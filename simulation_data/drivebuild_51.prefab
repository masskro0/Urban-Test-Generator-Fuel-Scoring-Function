//--- OBJECT WRITE BEGIN
$ThisPrefab = new SimGroup() {
    canSave = "1";
    canSaveDynamicFields = "1";
    groupPosition = "0.000000 0.000000 0.000000";

    
    new BeamNGVehicle(ego) {
        JBeam = "etk800";
        color = "White";
        colorPalette0 = "White";
        colorPalette1 = "White";
        renderDistance = "500";
        renderFade = "0.1";
        dataBlock = "default_vehicle";
        position = "1.0 -2.460199790733027 0";
        rotationMatrix = "6.123233995736766e-17 1.0 0.0 -1.0 6.123233995736766e-17 0.0 0.0 0.0 1.0";
        scale = "1 1 1";
        canSave = "1";
        canSaveDynamicFields = "1";
        annotation = "CAR";
        licenseText = "ego";
        
    };
    

    
    new DecalRoad(road_0) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "1.0 0.0 0.01 8.0";
        
        Node = "3.307 0.003 0.01 8.0";
        
        Node = "5.614 0.004 0.01 8.0";
        
        Node = "7.922 0.003 0.01 8.0";
        
        Node = "10.229 0.002 0.01 7.999999999999999";
        
        Node = "12.536 -0.0 0.01 8.0";
        
        Node = "14.843 -0.002 0.01 7.999999999999998";
        
        Node = "17.15 -0.003 0.01 7.999999999999998";
        
        Node = "19.458 -0.002 0.01 7.999999999999998";
        
        Node = "21.765 0.0 0.01 7.999999999999999";
        
        Node = "24.072 0.005 0.01 7.999999999999997";
        
        Node = "26.379 0.01 0.01 7.999999999999999";
        
        Node = "28.686 0.017 0.01 7.999999999999999";
        
        Node = "30.994 0.022 0.01 8.0";
        
        Node = "33.301 0.027 0.01 7.999999999999998";
        
        Node = "35.608 0.034 0.01 8.0";
        
        Node = "37.915 0.045 0.01 8.0";
        
        Node = "40.222 0.059 0.01 8.0";
        
        Node = "42.53 0.077 0.01 8.0";
        
        Node = "44.837 0.096 0.01 8.0";
        
        Node = "47.144 0.12 0.01 8.0";
        
        Node = "49.451 0.154 0.01 7.999999999999999";
        
        Node = "51.757 0.203 0.01 8.000000000000002";
        
        Node = "54.064 0.269 0.01 8.000000000000002";
        
        Node = "56.369 0.354 0.01 8.0";
        
        Node = "58.674 0.466 0.01 8.0";
        
        Node = "60.975 0.63 0.01 8.0";
        
        Node = "63.272 0.854 0.01 8.000000000000002";
        
        Node = "65.561 1.137 0.01 7.999999999999999";
        
        Node = "67.841 1.491 0.01 8.000000000000002";
        
        Node = "70.114 1.89 0.01 8.000000000000002";
        
        Node = "72.375 2.346 0.01 8.0";
        
        Node = "74.622 2.872 0.01 7.999999999999997";
        
        Node = "76.853 3.459 0.01 8.000000000000002";
        
        Node = "79.065 4.114 0.01 8.0";
        
        Node = "81.254 4.843 0.01 8.0";
        
        Node = "83.414 5.654 0.01 7.999999999999999";
        
        Node = "85.542 6.545 0.01 7.999999999999999";
        
        Node = "87.629 7.529 0.01 8.0";
        
        Node = "89.671 8.604 0.01 8.0";
        
        Node = "91.663 9.767 0.01 8.0";
        
        Node = "93.601 11.019 0.01 8.000000000000002";
        
        Node = "95.494 12.338 0.01 7.999999999999997";
        
        Node = "97.366 13.686 0.01 8.0";
        
        Node = "99.227 15.051 0.01 7.999999999999999";
        
        Node = "101.088 16.415 0.01 8.000000000000005";
        
        Node = "102.975 17.741 0.01 8.000000000000002";
        
        Node = "104.901 19.013 0.01 8.0";
        
        Node = "106.885 20.19 0.01 8.000000000000002";
        
        Node = "108.943 21.233 0.01 8.000000000000002";
        
        Node = "111.078 22.105 0.01 7.999999999999998";
        
        Node = "113.294 22.746 0.01 8.0";
        
        Node = "115.565 23.152 0.01 8.000000000000002";
        
        Node = "117.865 23.332 0.01 7.999999999999998";
        
        Node = "120.172 23.319 0.01 8.0";
        
        Node = "122.473 23.141 0.01 8.000000000000002";
        
        Node = "124.759 22.831 0.01 7.999999999999999";
        
        Node = "127.025 22.398 0.01 8.000000000000002";
        
        Node = "129.271 21.872 0.01 8.000000000000002";
        
        Node = "131.499 21.271 0.01 8.000000000000002";
        
        Node = "133.709 20.608 0.01 8.000000000000002";
        
        Node = "135.902 19.891 0.01 8.0";
        
        Node = "138.08 19.129 0.01 8.000000000000002";
        
        Node = "140.242 18.326 0.01 8.0";
        
        Node = "142.392 17.487 0.01 8.000000000000004";
        
        Node = "144.512 16.578 0.01 7.999999999999997";
        
        Node = "146.594 15.583 0.01 8.0";
        
        Node = "148.635 14.507 0.01 8.0";
        
        Node = "150.614 13.321 0.01 8.000000000000002";
        
        Node = "152.515 12.014 0.01 8.000000000000002";
        
        Node = "154.314 10.569 0.01 8.000000000000002";
        
        Node = "155.989 8.983 0.01 7.999999999999999";
        
        Node = "157.516 7.254 0.01 7.999999999999999";
        
        Node = "158.876 5.391 0.01 8.0";
        
        Node = "160.08 3.423 0.01 8.000000000000002";
        
        Node = "161.228 1.421 0.01 7.999999999999998";
        
        Node = "162.433 -0.547 0.01 8.0";
        
        Node = "163.765 -2.431 0.01 7.999999999999997";
        
        Node = "165.277 -4.174 0.01 8.000000000000002";
        
        Node = "166.973 -5.738 0.01 8.000000000000002";
        
        Node = "168.832 -7.106 0.01 8.000000000000002";
        
        Node = "170.822 -8.276 0.01 8.0";
        
        Node = "172.908 -9.263 0.01 8.000000000000002";
        
        Node = "175.064 -10.085 0.01 8.0";
        
        Node = "177.27 -10.767 0.01 7.999999999999998";
        
        Node = "179.508 -11.33 0.01 7.999999999999999";
        
        Node = "181.769 -11.791 0.01 8.000000000000002";
        
        Node = "184.046 -12.164 0.01 7.999999999999998";
        
        Node = "186.335 -12.46 0.01 7.999999999999998";
        
        Node = "188.632 -12.686 0.01 8.000000000000004";
        
        Node = "190.933 -12.851 0.01 8.000000000000007";
        
        Node = "193.238 -12.969 0.01 8.000000000000005";
        
        Node = "195.543 -13.055 0.01 8.0";
        
        Node = "197.849 -13.128 0.01 8.000000000000004";
        
        Node = "200.155 -13.212 0.01 8.0";
        
        Node = "202.461 -13.295 0.01 8.0";
        
        Node = "204.767 -13.368 0.01 8.0";
        
        Node = "207.073 -13.451 0.01 7.999999999999999";
        
        Node = "209.378 -13.535 0.01 7.999999999999998";
        
        Node = "211.684 -13.607 0.01 8.000000000000004";
        
        Node = "213.99 -13.69 0.01 8.0";
        
    };
    
    new DecalRoad(road_0_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "0.9950910314587591 3.774996808214261 0.01 0.15";
        
        Node = "3.302091031458759 3.777996808214261 0.01 0.15";
        
        Node = "5.612363675923122 3.77899964535674 0.01 0.15";
        
        Node = "7.9236356150977745 3.77799964566399 0.01 0.15";
        
        Node = "10.230636324076876 3.7769996453567396 0.01 0.15";
        
        Node = "14.845454485770032 3.772999290713614 0.01 0.15";
        
        Node = "17.150000354489748 3.7720003544896343 0.01 0.15";
        
        Node = "19.455545868719174 3.77299929102093 0.01 0.15";
        
        Node = "21.75927287299452 3.774996453573401 0.01 0.15";
        
        Node = "24.06381839806253 3.779991133948494 0.01 0.15";
        
        Node = "26.369182088742885 3.784987587547714 0.01 0.15";
        
        Node = "28.674545783113054 3.7919826225978186 0.01 0.15";
        
        Node = "30.9858201707132 3.796991137790389 0.01 0.15";
        
        Node = "33.29118208874238 3.801987587547713 0.01 0.15";
        
        Node = "35.59327319952281 3.808972692781984 0.01 0.15";
        
        Node = "37.89454625167802 3.8199453861385972 0.01 0.15";
        
        Node = "40.195825832094734 3.8339106718455045 0.01 0.15";
        
        Node = "42.499735355935464 3.85187877038499 0.01 0.15";
        
        Node = "44.80182057737016 3.8708382932316563 0.01 0.15";
        
        Node = "47.09655045747082 3.894710645690441 0.01 0.15";
        
        Node = "49.38308651204688 3.9284090530834126 0.01 0.15";
        
        Node = "51.66292383496309 3.9768531245590824 0.01 0.15";
        
        Node = "53.9404644343706 4.042010332864629 0.01 0.15";
        
        Node = "56.20783205855154 4.1256225879862685 0.01 0.15";
        
        Node = "58.4481775059296 4.234481021871884 0.01 0.15";
        
        Node = "60.65756090364457 4.391951198849395 0.01 0.15";
        
        Node = "62.85713652076644 4.60645051893442 0.01 0.15";
        
        Node = "65.03968779638367 4.876289754845155 0.01 0.15";
        
        Node = "67.2250105612915 5.215589868344002 0.01 0.15";
        
        Node = "69.41438980363674 5.599911169573983 0.01 0.15";
        
        Node = "71.57143452718664 6.03494539953363 0.01 0.15";
        
        Node = "73.71133997892618 6.535875647693395 0.01 0.15";
        
        Node = "75.83657614459165 7.095048049865352 0.01 0.15";
        
        Node = "77.93238123067704 7.715641328068756 0.01 0.15";
        
        Node = "79.99370054603499 8.402119985399016 0.01 0.15";
        
        Node = "82.02107029299768 9.1633222376151 0.01 0.15";
        
        Node = "84.00732175209072 9.994971697225955 0.01 0.15";
        
        Node = "85.94396735585674 10.908081076289568 0.01 0.15";
        
        Node = "87.8391868033621 11.905809237929267 0.01 0.15";
        
        Node = "89.6860933992149 12.984098580789112 0.01 0.15";
        
        Node = "91.49706472162187 14.154034646657808 0.01 0.15";
        
        Node = "93.31184880686985 15.418535549162861 0.01 0.15";
        
        Node = "95.14665527915601 16.739753030274912 0.01 0.15";
        
        Node = "96.9943185383275 18.094970842617244 0.01 0.15";
        
        Node = "98.85638245623433 19.459750915650947 0.01 0.15";
        
        Node = "98.9175806744088 19.503673655649013 0.01 0.15";
        
        Node = "100.8045806744088 20.829673655649014 0.01 0.15";
        
        Node = "100.89461377984374 20.891018757878108 0.01 0.15";
        
        Node = "102.82061377984374 22.16301875787811 0.01 0.15";
        
        Node = "102.97492622903631 22.259669805940504 0.01 0.15";
        
        Node = "104.95892622903632 23.436669805940504 0.01 0.15";
        
        Node = "105.17846836948121 23.55725033135923 0.01 0.15";
        
        Node = "107.2364683694812 24.60025033135923 0.01 0.15";
        
        Node = "107.51563708540706 24.727747503045787 0.01 0.15";
        
        Node = "109.65063708540707 25.599747503045787 0.01 0.15";
        
        Node = "110.02904600233603 25.731337065247075 0.01 0.15";
        
        Node = "112.24504600233603 26.372337065247073 0.01 0.15";
        
        Node = "112.62965410991296 26.46208255267889 0.01 0.15";
        
        Node = "114.90065410991298 26.868082552678892 0.01 0.15";
        
        Node = "115.27046581664501 26.915492342869243 0.01 0.15";
        
        Node = "117.57046581664501 27.095492342869242 0.01 0.15";
        
        Node = "117.8862718772723 27.10694006670799 0.01 0.15";
        
        Node = "120.19327187727231 27.093940066707987 0.01 0.15";
        
        Node = "120.46315533863097 27.082755248257605 0.01 0.15";
        
        Node = "122.76415533863097 26.904755248257604 0.01 0.15";
        
        Node = "122.98027733443779 26.881761246854133 0.01 0.15";
        
        Node = "125.26627733443779 26.571761246854134 0.01 0.15";
        
        Node = "125.46752865810254 26.53891209990844 0.01 0.15";
        
        Node = "127.73352865810254 26.10591209990844 0.01 0.15";
        
        Node = "127.88579202629855 26.07354922255992 0.01 0.15";
        
        Node = "130.13179202629854 25.547549222559923 0.01 0.15";
        
        Node = "130.25415972167377 25.516725224441252 0.01 0.15";
        
        Node = "132.48215972167378 24.915725224441253 0.01 0.15";
        
        Node = "132.58373826801295 24.88679422670985 0.01 0.15";
        
        Node = "134.79373826801296 24.22379422670985 0.01 0.15";
        
        Node = "134.88212446137007 24.19609197180551 0.01 0.15";
        
        Node = "137.07512446137005 23.47909197180551 0.01 0.15";
        
        Node = "137.1486356043873 23.454218302303953 0.01 0.15";
        
        Node = "139.32663560438732 22.692218302303957 0.01 0.15";
        
        Node = "139.39436305264323 22.667795666020638 0.01 0.15";
        
        Node = "141.5563630526432 21.864795666020637 0.01 0.15";
        
        Node = "141.61433826116922 21.84271902445035 0.01 0.15";
        
        Node = "143.76433826116923 21.003719024450348 0.01 0.15";
        
        Node = "143.87963787996628 20.95651848793019 0.01 0.15";
        
        Node = "145.9996378799663 20.04751848793019 0.01 0.15";
        
        Node = "146.13976035345962 19.984027191862243 0.01 0.15";
        
        Node = "148.22176035345962 18.98902719186224 0.01 0.15";
        
        Node = "148.3544850933005 18.922358806158268 0.01 0.15";
        
        Node = "150.3954850933005 17.846358806158268 0.01 0.15";
        
        Node = "150.57553688708748 17.745045952399806 0.01 0.15";
        
        Node = "152.5545368870875 16.559045952399806 0.01 0.15";
        
        Node = "152.75271575328526 16.43171051797647 0.01 0.15";
        
        Node = "154.65371575328524 15.124710517976471 0.01 0.15";
        
        Node = "154.87900507915984 14.957145423812161 0.01 0.15";
        
        Node = "156.67800507915985 13.512145423812163 0.01 0.15";
        
        Node = "156.9095096773709 13.310159337702576 0.01 0.15";
        
        Node = "158.5845096773709 11.724159337702574 0.01 0.15";
        
        Node = "158.8184914260872 11.481920420841584 0.01 0.15";
        
        Node = "160.3454914260872 9.752920420841583 0.01 0.15";
        
        Node = "160.56501059647974 9.479794101563343 0.01 0.15";
        
        Node = "161.92501059647975 7.616794101563343 0.01 0.15";
        
        Node = "162.0961678028887 7.3610620094908485 0.01 0.15";
        
        Node = "163.3001678028887 5.393062009490849 0.01 0.15";
        
        Node = "163.35479560629645 5.300854823190958 0.01 0.15";
        
        Node = "164.47578907184956 3.345951584482476 0.01 0.15";
        
        Node = "165.58736382713693 1.5305332289591658 0.01 0.15";
        
        Node = "166.73930836118979 -0.09879372461109923 0.01 0.15";
        
        Node = "167.99076845034904 -1.5414491051696673 0.01 0.15";
        
        Node = "169.3786278872496 -2.821291180235964 0.01 0.15";
        
        Node = "170.91286086035888 -3.9503017812114996 0.01 0.15";
        
        Node = "172.58945977195427 -4.936040839787679 0.01 0.15";
        
        Node = "174.38992710152405 -5.787939811161309 0.01 0.15";
        
        Node = "176.29519312340017 -6.514344574603873 0.01 0.15";
        
        Node = "178.288704562888 -7.130652281644077 0.01 0.15";
        
        Node = "180.345997859666 -7.648192999287513 0.01 0.15";
        
        Node = "181.0555680343623 -7.792868740346779 0.01 0.15";
        
        Node = "182.45147268404855 -8.077482647248754 0.01 0.15";
        
        Node = "184.59334923556614 -8.428347800395901 0.01 0.15";
        
        Node = "186.76198154200736 -8.70878255911438 0.01 0.15";
        
        Node = "188.9518754386833 -8.92424447493883 0.01 0.15";
        
        Node = "191.16452681856765 -9.08290917623432 0.01 0.15";
        
        Node = "193.40488256752687 -9.197599839304683 0.01 0.15";
        
        Node = "195.67309688291542 -9.282227358230243 0.01 0.15";
        
        Node = "197.9684436347523 -9.35489011316697 0.01 0.15";
        
        Node = "197.98641970003553 -9.355502044262694 0.01 0.15";
        
        Node = "200.29160279672047 -9.43947228716015 0.01 0.15";
        
        Node = "202.58861535626056 -9.522148801662244 0.01 0.15";
        
        Node = "204.8864436347523 -9.59489011316697 0.01 0.15";
        
        Node = "204.90278588059005 -9.595442883847564 0.01 0.15";
        
        Node = "207.20878588059006 -9.678442883847564 0.01 0.15";
        
        Node = "209.50564499953467 -9.76214582911021 0.01 0.15";
        
        Node = "211.80180902517438 -9.83383872149792 0.01 0.15";
        
        Node = "211.81978588059005 -9.834442883847563 0.01 0.15";
        
        Node = "214.12578588059006 -9.917442883847563 0.01 0.15";
        
    };
    
    new DecalRoad(road_0_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "213.85421411940996 -17.462557116152436 0.01 0.15";
        
        Node = "211.55720182744147 -17.379880611281067 0.01 0.15";
        
        Node = "209.2601909748256 -17.30816127850208 0.01 0.15";
        
        Node = "209.2405207609274 -17.307495786455437 0.01 0.15";
        
        Node = "206.93636743329043 -17.2235266413268 0.01 0.15";
        
        Node = "204.63938464373902 -17.140851198337742 0.01 0.15";
        
        Node = "202.3415563652477 -17.068109886833028 0.01 0.15";
        
        Node = "202.32521411940996 -17.067557116152436 0.01 0.15";
        
        Node = "200.01921411940995 -16.984557116152438 0.01 0.15";
        
        Node = "197.72056760369725 -16.900825333670333 0.01 0.15";
        
        Node = "195.4235563652477 -16.82810988683303 0.01 0.15";
        
        Node = "195.40225194315937 -16.827375244391202 0.01 0.15";
        
        Node = "193.09725194315936 -16.7413752443912 0.01 0.15";
        
        Node = "193.0449989401855 -16.73906307518992 0.01 0.15";
        
        Node = "190.7399989401855 -16.621063075189923 0.01 0.15";
        
        Node = "190.66299577208264 -16.616331687502015 0.01 0.15";
        
        Node = "188.36199577208265 -16.451331687502012 0.01 0.15";
        
        Node = "188.26236555964493 -16.442859776529247 0.01 0.15";
        
        Node = "185.96536555964494 -16.216859776529247 0.01 0.15";
        
        Node = "185.85087029119921 -16.20382737650342 0.01 0.15";
        
        Node = "183.5618702911992 -15.907827376503418 0.01 0.15";
        
        Node = "183.43574330013777 -15.88934719996315 0.01 0.15";
        
        Node = "181.1587433001378 -15.51634719996315 0.01 0.15";
        
        Node = "181.01482405766927 -15.489897626051519 0.01 0.15";
        
        Node = "180.0181493796757 -15.286683549733498 0.01 0.15";
        
        Node = "178.75382405766928 -15.02889762605152 0.01 0.15";
        
        Node = "178.58704046470592 -14.990936838344918 0.01 0.15";
        
        Node = "176.34904046470592 -14.427936838344916 0.01 0.15";
        
        Node = "176.15500176447543 -14.37357787033319 0.01 0.15";
        
        Node = "173.9490017644754 -13.691577870333191 0.01 0.15";
        
        Node = "173.7191652134567 -13.612328223585537 0.01 0.15";
        
        Node = "171.5631652134567 -12.790328223585536 0.01 0.15";
        
        Node = "171.29345087436144 -12.67530949957647 0.01 0.15";
        
        Node = "169.20745087436146 -11.68830949957647 0.01 0.15";
        
        Node = "168.908713718418 -11.530221966109579 0.01 0.15";
        
        Node = "166.918713718418 -10.360221966109581 0.01 0.15";
        
        Node = "166.59457095035557 -10.146482897141048 0.01 0.15";
        
        Node = "164.7355709503556 -8.778482897141048 0.01 0.15";
        
        Node = "164.4138521329587 -8.51313732896554 0.01 0.15";
        
        Node = "162.71785213295868 -6.94913732896554 0.01 0.15";
        
        Node = "162.42540760358148 -6.647670512555815 0.01 0.15";
        
        Node = "160.91340760358148 -4.904670512555815 0.01 0.15";
        
        Node = "160.6825795088945 -4.610290920463111 0.01 0.15";
        
        Node = "159.3505795088945 -2.726290920463111 0.01 0.15";
        
        Node = "159.21356066569223 -2.5182522346752045 0.01 0.15";
        
        Node = "158.00856066569224 -0.5502522346752046 0.01 0.15";
        
        Node = "157.95320439370357 -0.4568548231909584 0.01 0.15";
        
        Node = "156.83186377553812 1.4986538158048923 0.01 0.15";
        
        Node = "155.73619489332202 3.289581025274377 0.01 0.15";
        
        Node = "154.57040400610063 4.886543100931315 0.01 0.15";
        
        Node = "153.27109118274956 6.357736206087846 0.01 0.15";
        
        Node = "151.83012947952372 7.722133377022868 0.01 0.15";
        
        Node = "150.26052168441964 8.98288004957727 0.01 0.15";
        
        Node = "148.57238626762214 10.143528650184528 0.01 0.15";
        
        Node = "146.78310232602107 11.215833225595773 0.01 0.15";
        
        Node = "144.89922138056352 12.209001230158396 0.01 0.15";
        
        Node = "142.95365391227813 13.138799323791421 0.01 0.15";
        
        Node = "140.96162243481106 13.992929801629892 0.01 0.15";
        
        Node = "138.89855864114273 14.798004463438147 0.01 0.15";
        
        Node = "136.79938421981015 15.577670078761951 0.01 0.15";
        
        Node = "134.6919921239843 16.314967037907625 0.01 0.15";
        
        Node = "132.5798986925313 17.005514685126883 0.01 0.15";
        
        Node = "130.46484862509874 17.640029705356646 0.01 0.15";
        
        Node = "128.34876649485267 18.210840010687832 0.01 0.15";
        
        Node = "126.24000596060156 18.70469933438155 0.01 0.15";
        
        Node = "124.15065323784052 19.103944581052133 0.01 0.15";
        
        Node = "122.07345256222288 19.3856297120414 0.01 0.15";
        
        Node = "120.01558618515632 19.544821461332077 0.01 0.15";
        
        Node = "118.00187094165868 19.556168794737136 0.01 0.15";
        
        Node = "116.04561207494982 19.40307027473383 0.01 0.15";
        
        Node = "114.15300045255526 19.064716986009834 0.01 0.15";
        
        Node = "112.31965473982191 18.53440353751612 0.01 0.15";
        
        Node = "110.51254077539299 17.796322330498782 0.01 0.15";
        
        Node = "108.70330397276277 16.87939619583244 0.01 0.15";
        
        Node = "106.90539579093942 15.812794416595516 0.01 0.15";
        
        Node = "105.10084542092332 14.621004141070859 0.01 0.15";
        
        Node = "103.2892375613175 13.347982401888393 0.01 0.15";
        
        Node = "101.45914957086984 12.006639027911701 0.01 0.15";
        
        Node = "99.5986814616725 10.642029157382757 0.01 0.15";
        
        Node = "99.5719227750565 10.622582021583247 0.01 0.15";
        
        Node = "97.6999227750565 9.274582021583246 0.01 0.15";
        
        Node = "97.652116831187 9.240717845764223 0.01 0.15";
        
        Node = "95.759116831187 7.921717845764225 0.01 0.15";
        
        Node = "95.64946645201813 7.848131003185994 0.01 0.15";
        
        Node = "93.71146645201813 6.596131003185993 0.01 0.15";
        
        Node = "93.56633405777792 6.506947168449168 0.01 0.15";
        
        Node = "91.57433405777793 5.3439471684491675 0.01 0.15";
        
        Node = "91.42952987903891 5.2636111507000525 0.01 0.15";
        
        Node = "89.38752987903891 4.188611150700053 0.01 0.15";
        
        Node = "89.23890470175193 4.114496836833059 0.01 0.15";
        
        Node = "87.15190470175193 3.1304968368330583 0.01 0.15";
        
        Node = "86.99996269796982 3.0629072712909324 0.01 0.15";
        
        Node = "84.87196269796982 2.1719072712909324 0.01 0.15";
        
        Node = "84.74092532401933 2.1198955611815613 0.01 0.15";
        
        Node = "82.58092532401933 1.3088955611815614 0.01 0.15";
        
        Node = "82.44677806152333 1.2613934476343363 0.01 0.15";
        
        Node = "80.25777806152333 0.5323934476343362 0.01 0.15";
        
        Node = "80.13682056530101 0.49435558710557626 0.01 0.15";
        
        Node = "77.924820565301 -0.16064441289442355 0.01 0.15";
        
        Node = "77.8135511101036 -0.19174876770214277 0.01 0.15";
        
        Node = "75.58255111010361 -0.778748767702143 0.01 0.15";
        
        Node = "75.48242884723068 -0.8036342580367397 0.01 0.15";
        
        Node = "73.23542884723068 -1.3296342580367395 0.01 0.15";
        
        Node = "73.12131755265037 -1.3544911985580979 0.01 0.15";
        
        Node = "70.86031755265037 -1.810491198558098 0.01 0.15";
        
        Node = "70.76667996127469 -1.8281492530761152 0.01 0.15";
        
        Node = "68.49367996127468 -2.227149253076115 0.01 0.15";
        
        Node = "68.42017896203309 -2.2393051791962355 0.01 0.15";
        
        Node = "66.1401789620331 -2.5933051791962356 0.01 0.15";
        
        Node = "66.02419460740492 -2.6094751107769287 0.01 0.15";
        
        Node = "63.73519460740492 -2.8924751107769286 0.01 0.15";
        
        Node = "63.6383942900373 -2.9031771616771103 0.01 0.15";
        
        Node = "61.3413942900373 -3.1271771616771105 0.01 0.15";
        
        Node = "61.24337613441071 -3.1354480809697494 0.01 0.15";
        
        Node = "58.94237613441071 -3.299448080969749 0.01 0.15";
        
        Node = "58.85721117949501 -3.3045515065714253 0.01 0.15";
        
        Node = "56.552211179495 -3.4165515065714254 0.01 0.15";
        
        Node = "56.50811368712526 -3.4184358685144556 0.01 0.15";
        
        Node = "54.20311368712527 -3.5034358685144555 0.01 0.15";
        
        Node = "54.171953231040504 -3.504456121370423 0.01 0.15";
        
        Node = "51.8649532310405 -3.570456121370423 0.01 0.15";
        
        Node = "51.83719655442785 -3.5711480512372455 0.01 0.15";
        
        Node = "49.53119655442785 -3.6201480512372455 0.01 0.15";
        
        Node = "49.50662898282168 -3.620590099106156 0.01 0.15";
        
        Node = "47.19962898282168 -3.654590099106156 0.01 0.15";
        
        Node = "47.18326965661413 -3.65479574203286 0.01 0.15";
        
        Node = "44.87626965661413 -3.67879574203286 0.01 0.15";
        
        Node = "44.86808910603611 -3.678871980277725 0.01 0.15";
        
        Node = "42.56108910603609 -3.6978719802777253 0.01 0.15";
        
        Node = "40.25144017920553 -3.715885200353561 0.01 0.15";
        
        Node = "40.244908117419 -3.7159304918311165 0.01 0.15";
        
        Node = "37.937908117419 -3.7299304918311167 0.01 0.15";
        
        Node = "37.9329993619323 -3.729957088891214 0.01 0.15";
        
        Node = "35.62599936193229 -3.7409570888912143 0.01 0.15";
        
        Node = "35.619454216886936 -3.7409826225978193 0.01 0.15";
        
        Node = "33.31245421688695 -3.747982622597819 0.01 0.15";
        
        Node = "31.002181601937465 -3.752991133948494 0.01 0.15";
        
        Node = "28.695816138824767 -3.757987592925706 0.01 0.15";
        
        Node = "26.39045421688695 -3.764982622597819 0.01 0.15";
        
        Node = "24.08018160193747 -3.7699911339484937 0.01 0.15";
        
        Node = "21.773181601937466 -3.774991133948494 0.01 0.15";
        
        Node = "21.768272647231413 -3.7749985814275613 0.01 0.15";
        
        Node = "19.461272647231397 -3.776998581427561 0.01 0.15";
        
        Node = "17.151635615097774 -3.77799964566399 0.01 0.15";
        
        Node = "14.84136367592312 -3.77699964535674 0.01 0.15";
        
        Node = "10.226545514228945 -3.772999290713613 0.01 0.15";
        
        Node = "7.920364032162965 -3.7719996455111566 0.01 0.15";
        
        Node = "5.614000354489235 -3.7710003544896344 0.01 0.15";
        
        Node = "3.3102726469242043 -3.77199893607072 0.01 0.15";
        
        Node = "1.004908968541244 -3.774996808214261 0.01 0.15";
        
    };
    
    new DecalRoad(road_0_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "1.0 0.0 0.01 0.3";
        
        Node = "3.307 0.003 0.01 0.3";
        
        Node = "5.614 0.004 0.01 0.3";
        
        Node = "7.922 0.003 0.01 0.3";
        
        Node = "10.229 0.002 0.01 0.3";
        
        Node = "12.536 -0.0 0.01 0.3";
        
        Node = "14.843 -0.002 0.01 0.3";
        
        Node = "17.15 -0.003 0.01 0.3";
        
        Node = "19.458 -0.002 0.01 0.3";
        
        Node = "21.765 0.0 0.01 0.3";
        
        Node = "24.072 0.005 0.01 0.3";
        
        Node = "26.379 0.01 0.01 0.3";
        
        Node = "28.686 0.017 0.01 0.3";
        
        Node = "30.994 0.022 0.01 0.3";
        
        Node = "33.301 0.027 0.01 0.3";
        
        Node = "35.608 0.034 0.01 0.3";
        
        Node = "37.915 0.045 0.01 0.3";
        
        Node = "40.222 0.059 0.01 0.3";
        
        Node = "42.53 0.077 0.01 0.3";
        
        Node = "44.837 0.096 0.01 0.3";
        
        Node = "47.144 0.12 0.01 0.3";
        
        Node = "49.451 0.154 0.01 0.3";
        
        Node = "51.757 0.203 0.01 0.3";
        
        Node = "54.064 0.269 0.01 0.3";
        
        Node = "56.369 0.354 0.01 0.3";
        
        Node = "58.674 0.466 0.01 0.3";
        
        Node = "60.975 0.63 0.01 0.3";
        
        Node = "63.272 0.854 0.01 0.3";
        
        Node = "65.561 1.137 0.01 0.3";
        
        Node = "67.841 1.491 0.01 0.3";
        
        Node = "70.114 1.89 0.01 0.3";
        
        Node = "72.375 2.346 0.01 0.3";
        
        Node = "74.622 2.872 0.01 0.3";
        
        Node = "76.853 3.459 0.01 0.3";
        
        Node = "79.065 4.114 0.01 0.3";
        
        Node = "81.254 4.843 0.01 0.3";
        
        Node = "83.414 5.654 0.01 0.3";
        
        Node = "85.542 6.545 0.01 0.3";
        
        Node = "87.629 7.529 0.01 0.3";
        
        Node = "89.671 8.604 0.01 0.3";
        
        Node = "91.663 9.767 0.01 0.3";
        
        Node = "93.601 11.019 0.01 0.3";
        
        Node = "95.494 12.338 0.01 0.3";
        
        Node = "97.366 13.686 0.01 0.3";
        
        Node = "99.227 15.051 0.01 0.3";
        
        Node = "101.088 16.415 0.01 0.3";
        
        Node = "102.975 17.741 0.01 0.3";
        
        Node = "104.901 19.013 0.01 0.3";
        
        Node = "106.885 20.19 0.01 0.3";
        
        Node = "108.943 21.233 0.01 0.3";
        
        Node = "111.078 22.105 0.01 0.3";
        
        Node = "113.294 22.746 0.01 0.3";
        
        Node = "115.565 23.152 0.01 0.3";
        
        Node = "117.865 23.332 0.01 0.3";
        
        Node = "120.172 23.319 0.01 0.3";
        
        Node = "122.473 23.141 0.01 0.3";
        
        Node = "124.759 22.831 0.01 0.3";
        
        Node = "127.025 22.398 0.01 0.3";
        
        Node = "129.271 21.872 0.01 0.3";
        
        Node = "131.499 21.271 0.01 0.3";
        
        Node = "133.709 20.608 0.01 0.3";
        
        Node = "135.902 19.891 0.01 0.3";
        
        Node = "138.08 19.129 0.01 0.3";
        
        Node = "140.242 18.326 0.01 0.3";
        
        Node = "142.392 17.487 0.01 0.3";
        
        Node = "144.512 16.578 0.01 0.3";
        
        Node = "146.594 15.583 0.01 0.3";
        
        Node = "148.635 14.507 0.01 0.3";
        
        Node = "150.614 13.321 0.01 0.3";
        
        Node = "152.515 12.014 0.01 0.3";
        
        Node = "154.314 10.569 0.01 0.3";
        
        Node = "155.989 8.983 0.01 0.3";
        
        Node = "157.516 7.254 0.01 0.3";
        
        Node = "158.876 5.391 0.01 0.3";
        
        Node = "160.08 3.423 0.01 0.3";
        
        Node = "161.228 1.421 0.01 0.3";
        
        Node = "162.433 -0.547 0.01 0.3";
        
        Node = "163.765 -2.431 0.01 0.3";
        
        Node = "165.277 -4.174 0.01 0.3";
        
        Node = "166.973 -5.738 0.01 0.3";
        
        Node = "168.832 -7.106 0.01 0.3";
        
        Node = "170.822 -8.276 0.01 0.3";
        
        Node = "172.908 -9.263 0.01 0.3";
        
        Node = "175.064 -10.085 0.01 0.3";
        
        Node = "177.27 -10.767 0.01 0.3";
        
        Node = "179.508 -11.33 0.01 0.3";
        
        Node = "181.769 -11.791 0.01 0.3";
        
        Node = "184.046 -12.164 0.01 0.3";
        
        Node = "186.335 -12.46 0.01 0.3";
        
        Node = "188.632 -12.686 0.01 0.3";
        
        Node = "190.933 -12.851 0.01 0.3";
        
        Node = "193.238 -12.969 0.01 0.3";
        
        Node = "195.543 -13.055 0.01 0.3";
        
        Node = "197.849 -13.128 0.01 0.3";
        
        Node = "200.155 -13.212 0.01 0.3";
        
        Node = "202.461 -13.295 0.01 0.3";
        
        Node = "204.767 -13.368 0.01 0.3";
        
        Node = "207.073 -13.451 0.01 0.3";
        
        Node = "209.378 -13.535 0.01 0.3";
        
        Node = "211.684 -13.607 0.01 0.3";
        
        Node = "213.99 -13.69 0.01 0.3";
        
    };
    
    new DecalRoad(road_1) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "208.74 36.03 0.01 16.000000000000007";
        
        Node = "208.793 35.533 0.01 16.000000000000007";
        
        Node = "208.846 35.036 0.01 16.0";
        
        Node = "208.899 34.539 0.01 16.0";
        
        Node = "208.951 34.041 0.01 16.0";
        
        Node = "209.004 33.544 0.01 15.999999999999998";
        
        Node = "209.057 33.047 0.01 16.0";
        
        Node = "209.11 32.55 0.01 16.000000000000004";
        
        Node = "209.163 32.053 0.01 16.000000000000007";
        
        Node = "209.216 31.556 0.01 16.00000000000001";
        
        Node = "209.269 31.058 0.01 16.000000000000004";
        
        Node = "209.322 30.561 0.01 16.00000000000001";
        
        Node = "209.375 30.064 0.01 16.000000000000007";
        
        Node = "209.426 29.567 0.01 16.000000000000004";
        
        Node = "209.476 29.069 0.01 16.000000000000007";
        
        Node = "209.526 28.572 0.01 16.000000000000004";
        
        Node = "209.577 28.074 0.01 16.000000000000004";
        
        Node = "209.628 27.577 0.01 16.0";
        
        Node = "209.68 27.08 0.01 16.0";
        
        Node = "209.733 26.583 0.01 16.0";
        
        Node = "209.787 26.086 0.01 15.999999999999998";
        
        Node = "209.84 25.589 0.01 16.0";
        
        Node = "209.893 25.091 0.01 16.0";
        
        Node = "209.945 24.594 0.01 15.999999999999998";
        
        Node = "209.998 24.097 0.01 15.999999999999998";
        
        Node = "210.05 23.6 0.01 16.0";
        
        Node = "210.103 23.103 0.01 16.000000000000004";
        
        Node = "210.156 22.605 0.01 16.000000000000004";
        
        Node = "210.208 22.108 0.01 16.0";
        
        Node = "210.261 21.611 0.01 16.0";
        
        Node = "210.314 21.114 0.01 16.0";
        
        Node = "210.367 20.617 0.01 15.999999999999996";
        
        Node = "210.42 20.12 0.01 15.999999999999996";
        
        Node = "210.473 19.622 0.01 15.999999999999995";
        
        Node = "210.526 19.125 0.01 15.999999999999996";
        
        Node = "210.578 18.628 0.01 16.0";
        
        Node = "210.631 18.131 0.01 15.999999999999998";
        
        Node = "210.684 17.634 0.01 16.000000000000004";
        
        Node = "210.737 17.137 0.01 16.000000000000007";
        
        Node = "210.79 16.639 0.01 16.000000000000004";
        
        Node = "210.842 16.142 0.01 16.000000000000007";
        
        Node = "210.895 15.645 0.01 16.000000000000004";
        
        Node = "210.948 15.148 0.01 16.0";
        
        Node = "211.002 14.651 0.01 16.0";
        
        Node = "211.054 14.154 0.01 16.0";
        
        Node = "211.107 13.656 0.01 16.0";
        
        Node = "211.158 13.159 0.01 16.000000000000004";
        
        Node = "211.209 12.662 0.01 16.0";
        
        Node = "211.259 12.164 0.01 16.0";
        
        Node = "211.309 11.667 0.01 16.0";
        
        Node = "211.36 11.169 0.01 16.000000000000004";
        
        Node = "211.412 10.672 0.01 16.000000000000004";
        
        Node = "211.465 10.175 0.01 16.000000000000007";
        
        Node = "211.518 9.678 0.01 16.000000000000004";
        
        Node = "211.571 9.181 0.01 16.000000000000004";
        
        Node = "211.624 8.684 0.01 16.000000000000004";
        
        Node = "211.677 8.187 0.01 15.999999999999998";
        
        Node = "211.73 7.689 0.01 15.999999999999998";
        
        Node = "211.783 7.192 0.01 16.0";
        
        Node = "211.836 6.695 0.01 15.999999999999998";
        
        Node = "211.888 6.198 0.01 16.0";
        
        Node = "211.941 5.701 0.01 15.999999999999998";
        
        Node = "211.994 5.204 0.01 16.0";
        
        Node = "212.047 4.706 0.01 15.999999999999995";
        
        Node = "212.1 4.209 0.01 15.999999999999998";
        
        Node = "212.153 3.712 0.01 15.999999999999996";
        
        Node = "212.206 3.215 0.01 15.999999999999996";
        
        Node = "212.258 2.718 0.01 15.999999999999995";
        
        Node = "212.311 2.22 0.01 15.999999999999995";
        
        Node = "212.363 1.723 0.01 15.999999999999996";
        
        Node = "212.416 1.226 0.01 16.000000000000004";
        
        Node = "212.469 0.729 0.01 16.0";
        
        Node = "212.522 0.232 0.01 16.000000000000007";
        
        Node = "212.575 -0.265 0.01 16.000000000000004";
        
        Node = "212.628 -0.762 0.01 16.0";
        
        Node = "212.68 -1.26 0.01 16.000000000000004";
        
        Node = "212.731 -1.757 0.01 16.0";
        
        Node = "212.781 -2.255 0.01 16.000000000000004";
        
        Node = "212.831 -2.752 0.01 15.999999999999996";
        
        Node = "212.882 -3.249 0.01 15.999999999999995";
        
        Node = "212.933 -3.747 0.01 15.999999999999998";
        
        Node = "212.986 -4.244 0.01 16.0";
        
        Node = "213.039 -4.741 0.01 16.000000000000004";
        
        Node = "213.093 -5.238 0.01 16.000000000000004";
        
        Node = "213.146 -5.735 0.01 16.000000000000007";
        
        Node = "213.199 -6.232 0.01 16.000000000000004";
        
        Node = "213.252 -6.73 0.01 16.000000000000004";
        
        Node = "213.304 -7.227 0.01 15.999999999999998";
        
        Node = "213.357 -7.724 0.01 15.999999999999998";
        
        Node = "213.409 -8.221 0.01 16.0";
        
        Node = "213.462 -8.718 0.01 16.0";
        
        Node = "213.515 -9.216 0.01 16.0";
        
        Node = "213.567 -9.713 0.01 16.000000000000004";
        
        Node = "213.62 -10.21 0.01 16.000000000000004";
        
        Node = "213.673 -10.707 0.01 16.0";
        
        Node = "213.726 -11.204 0.01 16.0";
        
        Node = "213.779 -11.701 0.01 15.999999999999998";
        
        Node = "213.832 -12.198 0.01 15.999999999999996";
        
        Node = "213.884 -12.696 0.01 15.999999999999993";
        
        Node = "213.937 -13.193 0.01 15.999999999999996";
        
        Node = "213.99 -13.69 0.01 16.0";
        
    };
    
    new DecalRoad(road_1_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "216.47116465629563 36.85445015449426 0.01 0.15";
        
        Node = "216.63016465629562 35.36345015449426 0.01 0.15";
        
        Node = "216.6319578732002 35.346457448607126 0.01 0.15";
        
        Node = "216.68307060094062 34.85695478678541 0.01 0.15";
        
        Node = "216.7881646562956 33.871450154494255 0.01 0.15";
        
        Node = "216.84116465629558 33.374450154494696 0.01 0.15";
        
        Node = "216.89416465629563 32.877450154494255 0.01 0.15";
        
        Node = "216.94716465629563 32.38045015449426 0.01 0.15";
        
        Node = "217.00025193802404 31.88163168243732 0.01 0.15";
        
        Node = "217.10616465629562 30.888450154494258 0.01 0.15";
        
        Node = "217.10938517507353 30.857669303679387 0.01 0.15";
        
        Node = "217.16038517507351 30.360669303679387 0.01 0.15";
        
        Node = "217.1621059314538 30.343717462997546 0.01 0.15";
        
        Node = "217.21202826158282 29.846491054912565 0.01 0.15";
        
        Node = "217.22985916709013 29.669251854170028 0.01 0.15";
        
        Node = "217.26125482476888 29.357179016843258 0.01 0.15";
        
        Node = "217.3114660947108 28.866880733880986 0.01 0.15";
        
        Node = "217.3615951973577 28.378367713968874 0.01 0.15";
        
        Node = "217.41198492999467 27.896758153957787 0.01 0.15";
        
        Node = "217.46334473057146 27.415138891945308 0.01 0.15";
        
        Node = "217.51650951339704 26.925825983346993 0.01 0.15";
        
        Node = "217.51816465629562 26.910450154494256 0.01 0.15";
        
        Node = "217.57116465629562 26.413450154494257 0.01 0.15";
        
        Node = "217.6243390464767 25.91381319169327 0.01 0.15";
        
        Node = "217.6257898960164 25.900064536404017 0.01 0.15";
        
        Node = "217.6769849299953 25.410758153951676 0.01 0.15";
        
        Node = "217.7291646562956 24.92145015449426 0.01 0.15";
        
        Node = "217.73078989601635 24.906064536404454 0.01 0.15";
        
        Node = "217.78198492999474 24.41675815395742 0.01 0.15";
        
        Node = "217.83416465629563 23.92745015449426 0.01 0.15";
        
        Node = "217.8873390464767 23.42781319169326 0.01 0.15";
        
        Node = "217.88878989601642 23.414064536404016 0.01 0.15";
        
        Node = "217.93998492999532 22.924758153951675 0.01 0.15";
        
        Node = "218.14686901754828 20.984731898973784 0.01 0.15";
        
        Node = "218.1511646562956 20.94445015449426 0.01 0.15";
        
        Node = "218.20425193803302 20.445631682353085 0.01 0.15";
        
        Node = "218.25716465629563 19.949450154494258 0.01 0.15";
        
        Node = "218.25878989601642 19.934064536404016 0.01 0.15";
        
        Node = "218.30998492999532 19.444758153951675 0.01 0.15";
        
        Node = "218.4681646562956 17.96145015449426 0.01 0.15";
        
        Node = "218.52133904647673 17.46181319169326 0.01 0.15";
        
        Node = "218.52278989601635 17.448064536404452 0.01 0.15";
        
        Node = "218.57398492999474 16.95875815395742 0.01 0.15";
        
        Node = "218.67834473057147 15.980138891945307 0.01 0.15";
        
        Node = "218.73150951339704 15.490825983346994 0.01 0.15";
        
        Node = "218.73478989601642 15.460064536404014 0.01 0.15";
        
        Node = "218.7860705829897 14.969939508986286 0.01 0.15";
        
        Node = "218.8383390464767 14.478813191693265 0.01 0.15";
        
        Node = "218.84138517507353 14.449669303679386 0.01 0.15";
        
        Node = "218.8923851750735 13.952669303679386 0.01 0.15";
        
        Node = "218.94338517507347 13.455669303679825 0.01 0.15";
        
        Node = "218.94510593145384 13.438717462997108 0.01 0.15";
        
        Node = "218.97302949974403 13.160598722826803 0.01 0.15";
        
        Node = "218.99502826156083 12.941491055131296 0.01 0.15";
        
        Node = "219.04425482477114 12.452179016820844 0.01 0.15";
        
        Node = "219.09367768672337 11.969579305993392 0.01 0.15";
        
        Node = "219.14398492999533 11.488758153951768 0.01 0.15";
        
        Node = "219.24916465629562 10.502450154494259 0.01 0.15";
        
        Node = "219.30216465629562 10.005450154494255 0.01 0.15";
        
        Node = "219.4081646562956 9.011450154494257 0.01 0.15";
        
        Node = "219.4612519380242 8.512631682435556 0.01 0.15";
        
        Node = "219.5141646562956 8.016450154494258 0.01 0.15";
        
        Node = "219.56716465629557 7.519450154494695 0.01 0.15";
        
        Node = "219.56878989601643 7.504064536404014 0.01 0.15";
        
        Node = "219.61998492999533 7.014758153951673 0.01 0.15";
        
        Node = "219.67216465629562 6.525450154494257 0.01 0.15";
        
        Node = "219.72516465629562 6.028450154494258 0.01 0.15";
        
        Node = "219.77825193802425 5.529631682435113 0.01 0.15";
        
        Node = "219.8311646562956 5.033450154494256 0.01 0.15";
        
        Node = "219.8333124756719 5.013309282229758 0.01 0.15";
        
        Node = "219.8841646562956 4.5364501544942595 0.01 0.15";
        
        Node = "219.9371646562956 4.039450154494257 0.01 0.15";
        
        Node = "219.93878989601635 4.024064536404452 0.01 0.15";
        
        Node = "219.99007058298903 3.533939508992613 0.01 0.15";
        
        Node = "220.0423390464767 3.0428131916932637 0.01 0.15";
        
        Node = "220.04378989601642 3.029064536404014 0.01 0.15";
        
        Node = "220.09498492999532 2.539758153951766 0.01 0.15";
        
        Node = "220.14716465629562 2.050450154494258 0.01 0.15";
        
        Node = "220.3591646562956 0.06245015449425795 0.01 0.15";
        
        Node = "220.36095787320014 0.04545744860756917 0.01 0.15";
        
        Node = "220.41295787320016 -0.4525425513924308 0.01 0.15";
        
        Node = "220.41438517507353 -0.4663306963206142 0.01 0.15";
        
        Node = "220.46538517507352 -0.9633306963206141 0.01 0.15";
        
        Node = "220.4671059314538 -0.9802825370024537 0.01 0.15";
        
        Node = "220.48494778768207 -1.1579874250359719 0.01 0.15";
        
        Node = "220.51702826157646 -1.477508945024108 0.01 0.15";
        
        Node = "220.5661754756697 -1.9660322531110674 0.01 0.15";
        
        Node = "220.61638517507348 -2.4553306963201775 0.01 0.15";
        
        Node = "220.6658896053045 -2.9387253107399802 0.01 0.15";
        
        Node = "220.76934473057148 -3.908861108054813 0.01 0.15";
        
        Node = "220.82250951339702 -4.398174016653009 0.01 0.15";
        
        Node = "220.8241646562956 -4.4135498455057425 0.01 0.15";
        
        Node = "220.8771646562956 -4.910549845505742 0.01 0.15";
        
        Node = "220.93016465629557 -5.407549845505305 0.01 0.15";
        
        Node = "220.98333904647671 -5.907186808306737 0.01 0.15";
        
        Node = "220.98478989601642 -5.9209354635959865 0.01 0.15";
        
        Node = "221.03598492999532 -6.410241846048233 0.01 0.15";
        
        Node = "221.08816465629562 -6.899549845505742 0.01 0.15";
        
        Node = "221.0897898960164 -6.914935463595986 0.01 0.15";
        
        Node = "221.1409849299953 -7.404241846048233 0.01 0.15";
        
        Node = "221.1931646562956 -7.893549845505742 0.01 0.15";
        
        Node = "221.2463390464767 -8.393186808306735 0.01 0.15";
        
        Node = "221.24778989601634 -8.406935463595548 0.01 0.15";
        
        Node = "221.29898492999473 -8.896241846042583 0.01 0.15";
        
        Node = "221.35116465629562 -9.385549845505746 0.01 0.15";
        
        Node = "221.5631646562956 -11.373549845505742 0.01 0.15";
        
        Node = "221.5649578732002 -11.390542551392867 0.01 0.15";
        
        Node = "221.61607060094113 -11.88004521321939 0.01 0.15";
        
        Node = "221.66816465629557 -12.368549845505305 0.01 0.15";
        
        Node = "221.72116465629563 -12.865549845505742 0.01 0.15";
        
    };
    
    new DecalRoad(road_1_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "206.2588353437044 -14.514450154494257 0.01 0.15";
        
        Node = "206.2058353437044 -14.017450154494258 0.01 0.15";
        
        Node = "206.15283534370442 -13.520450154494695 0.01 0.15";
        
        Node = "206.15104212679978 -13.503457448607133 0.01 0.15";
        
        Node = "206.09992939905933 -13.013954786785002 0.01 0.15";
        
        Node = "205.8888353437044 -11.034450154494259 0.01 0.15";
        
        Node = "205.8358353437044 -10.537450154494255 0.01 0.15";
        
        Node = "205.83421010398365 -10.52206453640445 0.01 0.15";
        
        Node = "205.78292941701096 -10.031939508992691 0.01 0.15";
        
        Node = "205.7307480619758 -9.541631682435556 0.01 0.15";
        
        Node = "205.67783534370437 -9.045450154494258 0.01 0.15";
        
        Node = "205.67621010398358 -9.030064536404014 0.01 0.15";
        
        Node = "205.62501507000468 -8.540758153951767 0.01 0.15";
        
        Node = "205.57283534370438 -8.051450154494258 0.01 0.15";
        
        Node = "205.5712101039836 -8.036064536404014 0.01 0.15";
        
        Node = "205.5199294170103 -7.545939508986233 0.01 0.15";
        
        Node = "205.46774806197078 -7.05563168238838 0.01 0.15";
        
        Node = "205.41483534370442 -6.559450154494695 0.01 0.15";
        
        Node = "205.3626552694285 -6.070138891945163 0.01 0.15";
        
        Node = "205.30949048660295 -5.580825983346991 0.01 0.15";
        
        Node = "205.30783534370437 -5.565450154494258 0.01 0.15";
        
        Node = "205.20183534370437 -4.571450154494258 0.01 0.15";
        
        Node = "205.1984531464585 -4.539092147651649 0.01 0.15";
        
        Node = "205.14753390528332 -4.041880733823394 0.01 0.15";
        
        Node = "205.09661482492652 -3.545669303679823 0.01 0.15";
        
        Node = "205.09504956302217 -3.5302646314864363 0.01 0.15";
        
        Node = "205.0450495630222 -3.0332646314864364 0.01 0.15";
        
        Node = "205.01656328248924 -2.74954217666249 0.01 0.15";
        
        Node = "204.99574515921907 -2.542194326099361 0.01 0.15";
        
        Node = "204.94632233023927 -2.060564012315776 0.01 0.15";
        
        Node = "204.8959293990599 -1.5779547867903083 0.01 0.15";
        
        Node = "204.68483534370438 0.401549845505742 0.01 0.15";
        
        Node = "204.63183534370438 0.8985498455057424 0.01 0.15";
        
        Node = "204.6302101039836 0.9139354635959863 0.01 0.15";
        
        Node = "204.5789294170103 1.4040604910137406 0.01 0.15";
        
        Node = "204.5266609535233 1.8951868083067365 0.01 0.15";
        
        Node = "204.52521010398365 1.9089354635955484 0.01 0.15";
        
        Node = "204.47401507000527 2.3982418460425565 0.01 0.15";
        
        Node = "204.42183534370437 2.8875498455057427 0.01 0.15";
        
        Node = "204.37098316308067 3.3644089732413254 0.01 0.15";
        
        Node = "204.36883534370438 3.384549845505741 0.01 0.15";
        
        Node = "204.31583534370438 3.881549845505744 0.01 0.15";
        
        Node = "204.2627480619758 4.380368317564443 0.01 0.15";
        
        Node = "204.20983534370438 4.876549845505742 0.01 0.15";
        
        Node = "204.1568353437044 5.373549845505744 0.01 0.15";
        
        Node = "204.1552101039836 5.3889354635959865 0.01 0.15";
        
        Node = "204.10401507000418 5.878241846053106 0.01 0.15";
        
        Node = "204.05183534370443 6.367549845505305 0.01 0.15";
        
        Node = "203.99883534370437 6.864549845505742 0.01 0.15";
        
        Node = "203.9457480619758 7.363368317564443 0.01 0.15";
        
        Node = "203.83983534370438 8.356549845505741 0.01 0.15";
        
        Node = "203.78683534370438 8.853549845505746 0.01 0.15";
        
        Node = "203.6808353437044 9.847549845505743 0.01 0.15";
        
        Node = "203.6792101039836 9.862935463595987 0.01 0.15";
        
        Node = "203.6272101039836 10.359935463595987 0.01 0.15";
        
        Node = "203.62545314645857 10.376907852347914 0.01 0.15";
        
        Node = "203.57445314645855 10.874907852347913 0.01 0.15";
        
        Node = "203.5730495630222 10.888735368513125 0.01 0.15";
        
        Node = "203.5230495630222 11.385735368513124 0.01 0.15";
        
        Node = "203.50464564475513 11.56903781345939 0.01 0.15";
        
        Node = "203.47374515921925 11.87680567389892 0.01 0.15";
        
        Node = "203.42361482492652 12.365330696320177 0.01 0.15";
        
        Node = "203.37411042959184 12.847755882228816 0.01 0.15";
        
        Node = "203.3226609535233 13.331186808306736 0.01 0.15";
        
        Node = "203.3212101039836 13.344935463595986 0.01 0.15";
        
        Node = "203.27081969613715 13.826551477051463 0.01 0.15";
        
        Node = "203.21849048660297 14.308174016653005 0.01 0.15";
        
        Node = "203.2168353437044 14.323549845505742 0.01 0.15";
        
        Node = "203.1108353437044 15.317549845505742 0.01 0.15";
        
        Node = "203.10921010398366 15.332935463595549 0.01 0.15";
        
        Node = "203.05792941701262 15.823060490991711 0.01 0.15";
        
        Node = "203.0057480619618 16.313368317695407 0.01 0.15";
        
        Node = "202.84683534370438 17.803549845505742 0.01 0.15";
        
        Node = "202.8452101039836 17.818935463595984 0.01 0.15";
        
        Node = "202.7940150700047 18.308241846048325 0.01 0.15";
        
        Node = "202.7418353437044 18.797549845505742 0.01 0.15";
        
        Node = "202.68874806196698 19.296368317646916 0.01 0.15";
        
        Node = "202.68453970495747 19.335831589981428 0.01 0.15";
        
        Node = "202.47683534370438 21.283549845505743 0.01 0.15";
        
        Node = "202.47521010398358 21.298935463595985 0.01 0.15";
        
        Node = "202.42392941701027 21.78906049101403 0.01 0.15";
        
        Node = "202.37174806197598 22.27936831756268 0.01 0.15";
        
        Node = "202.3188353437044 22.775549845505743 0.01 0.15";
        
        Node = "202.31721010398365 22.79093546359555 0.01 0.15";
        
        Node = "202.26601507000527 23.280241846042582 0.01 0.15";
        
        Node = "202.21383534370437 23.769549845505743 0.01 0.15";
        
        Node = "202.21221010398358 23.784935463595986 0.01 0.15";
        
        Node = "202.16092941701032 24.275060491013605 0.01 0.15";
        
        Node = "202.1087480619756 24.765368317566207 0.01 0.15";
        
        Node = "202.05665526942855 25.25386110805469 0.01 0.15";
        
        Node = "202.00349048660297 25.743174016653004 0.01 0.15";
        
        Node = "202.00183534370439 25.75854984550574 0.01 0.15";
        
        Node = "201.9488353437044 26.25554984550574 0.01 0.15";
        
        Node = "201.94721010398365 26.270935463595553 0.01 0.15";
        
        Node = "201.89521010398363 26.767935463595556 0.01 0.15";
        
        Node = "201.89361482492646 26.783330696320615 0.01 0.15";
        
        Node = "201.84261482492647 27.280330696320615 0.01 0.15";
        
        Node = "201.7914531464585 27.779907852348348 0.01 0.15";
        
        Node = "201.79004956302225 27.793735368513126 0.01 0.15";
        
        Node = "201.76162967672303 28.076229038327295 0.01 0.15";
        
        Node = "201.74004956302224 28.290735368513126 0.01 0.15";
        
        Node = "201.69074515921906 28.781805673900557 0.01 0.15";
        
        Node = "201.64219445298374 29.254937066036884 0.01 0.15";
        
        Node = "201.5378353437044 30.233549845505742 0.01 0.15";
        
        Node = "201.48474806197635 30.73236831755914 0.01 0.15";
        
        Node = "201.4318353437044 31.228549845505732 0.01 0.15";
        
        Node = "201.3788353437044 31.72554984550574 0.01 0.15";
        
        Node = "201.32583534370443 32.2225498455053 0.01 0.15";
        
        Node = "201.21983534370437 33.21654984550574 0.01 0.15";
        
        Node = "201.2180421267998 33.23354255139287 0.01 0.15";
        
        Node = "201.16692939905937 33.72304521321459 0.01 0.15";
        
        Node = "201.0088353437044 35.20554984550574 0.01 0.15";
        
    };
    
    new DecalRoad(road_1_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "208.74 36.03 0.01 0.3";
        
        Node = "208.793 35.533 0.01 0.3";
        
        Node = "208.846 35.036 0.01 0.3";
        
        Node = "208.899 34.539 0.01 0.3";
        
        Node = "208.951 34.041 0.01 0.3";
        
        Node = "209.004 33.544 0.01 0.3";
        
        Node = "209.057 33.047 0.01 0.3";
        
        Node = "209.11 32.55 0.01 0.3";
        
        Node = "209.163 32.053 0.01 0.3";
        
        Node = "209.216 31.556 0.01 0.3";
        
        Node = "209.269 31.058 0.01 0.3";
        
        Node = "209.322 30.561 0.01 0.3";
        
        Node = "209.375 30.064 0.01 0.3";
        
        Node = "209.426 29.567 0.01 0.3";
        
        Node = "209.476 29.069 0.01 0.3";
        
        Node = "209.526 28.572 0.01 0.3";
        
        Node = "209.577 28.074 0.01 0.3";
        
        Node = "209.628 27.577 0.01 0.3";
        
        Node = "209.68 27.08 0.01 0.3";
        
        Node = "209.733 26.583 0.01 0.3";
        
        Node = "209.787 26.086 0.01 0.3";
        
        Node = "209.84 25.589 0.01 0.3";
        
        Node = "209.893 25.091 0.01 0.3";
        
        Node = "209.945 24.594 0.01 0.3";
        
        Node = "209.998 24.097 0.01 0.3";
        
        Node = "210.05 23.6 0.01 0.3";
        
        Node = "210.103 23.103 0.01 0.3";
        
        Node = "210.156 22.605 0.01 0.3";
        
        Node = "210.208 22.108 0.01 0.3";
        
        Node = "210.261 21.611 0.01 0.3";
        
        Node = "210.314 21.114 0.01 0.3";
        
        Node = "210.367 20.617 0.01 0.3";
        
        Node = "210.42 20.12 0.01 0.3";
        
        Node = "210.473 19.622 0.01 0.3";
        
        Node = "210.526 19.125 0.01 0.3";
        
        Node = "210.578 18.628 0.01 0.3";
        
        Node = "210.631 18.131 0.01 0.3";
        
        Node = "210.684 17.634 0.01 0.3";
        
        Node = "210.737 17.137 0.01 0.3";
        
        Node = "210.79 16.639 0.01 0.3";
        
        Node = "210.842 16.142 0.01 0.3";
        
        Node = "210.895 15.645 0.01 0.3";
        
        Node = "210.948 15.148 0.01 0.3";
        
        Node = "211.002 14.651 0.01 0.3";
        
        Node = "211.054 14.154 0.01 0.3";
        
        Node = "211.107 13.656 0.01 0.3";
        
        Node = "211.158 13.159 0.01 0.3";
        
        Node = "211.209 12.662 0.01 0.3";
        
        Node = "211.259 12.164 0.01 0.3";
        
        Node = "211.309 11.667 0.01 0.3";
        
        Node = "211.36 11.169 0.01 0.3";
        
        Node = "211.412 10.672 0.01 0.3";
        
        Node = "211.465 10.175 0.01 0.3";
        
        Node = "211.518 9.678 0.01 0.3";
        
        Node = "211.571 9.181 0.01 0.3";
        
        Node = "211.624 8.684 0.01 0.3";
        
        Node = "211.677 8.187 0.01 0.3";
        
        Node = "211.73 7.689 0.01 0.3";
        
        Node = "211.783 7.192 0.01 0.3";
        
        Node = "211.836 6.695 0.01 0.3";
        
        Node = "211.888 6.198 0.01 0.3";
        
        Node = "211.941 5.701 0.01 0.3";
        
        Node = "211.994 5.204 0.01 0.3";
        
        Node = "212.047 4.706 0.01 0.3";
        
        Node = "212.1 4.209 0.01 0.3";
        
        Node = "212.153 3.712 0.01 0.3";
        
        Node = "212.206 3.215 0.01 0.3";
        
        Node = "212.258 2.718 0.01 0.3";
        
        Node = "212.311 2.22 0.01 0.3";
        
        Node = "212.363 1.723 0.01 0.3";
        
        Node = "212.416 1.226 0.01 0.3";
        
        Node = "212.469 0.729 0.01 0.3";
        
        Node = "212.522 0.232 0.01 0.3";
        
        Node = "212.575 -0.265 0.01 0.3";
        
        Node = "212.628 -0.762 0.01 0.3";
        
        Node = "212.68 -1.26 0.01 0.3";
        
        Node = "212.731 -1.757 0.01 0.3";
        
        Node = "212.781 -2.255 0.01 0.3";
        
        Node = "212.831 -2.752 0.01 0.3";
        
        Node = "212.882 -3.249 0.01 0.3";
        
        Node = "212.933 -3.747 0.01 0.3";
        
        Node = "212.986 -4.244 0.01 0.3";
        
        Node = "213.039 -4.741 0.01 0.3";
        
        Node = "213.093 -5.238 0.01 0.3";
        
        Node = "213.146 -5.735 0.01 0.3";
        
        Node = "213.199 -6.232 0.01 0.3";
        
        Node = "213.252 -6.73 0.01 0.3";
        
        Node = "213.304 -7.227 0.01 0.3";
        
        Node = "213.357 -7.724 0.01 0.3";
        
        Node = "213.409 -8.221 0.01 0.3";
        
        Node = "213.462 -8.718 0.01 0.3";
        
        Node = "213.515 -9.216 0.01 0.3";
        
        Node = "213.567 -9.713 0.01 0.3";
        
        Node = "213.62 -10.21 0.01 0.3";
        
        Node = "213.673 -10.707 0.01 0.3";
        
        Node = "213.726 -11.204 0.01 0.3";
        
        Node = "213.779 -11.701 0.01 0.3";
        
        Node = "213.832 -12.198 0.01 0.3";
        
        Node = "213.884 -12.696 0.01 0.3";
        
        Node = "213.937 -13.193 0.01 0.3";
        
        Node = "213.99 -13.69 0.01 0.3";
        
    };
    
    new DecalRoad(road_1_separator_1) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_dashed_short";

        
        Node = "212.71744805468586 36.45415442031859 0.01 0.15";
        
        Node = "212.87644805468585 34.96315442031859 0.01 0.15";
        
        Node = "212.87737061000652 34.95441219220945 0.01 0.15";
        
        Node = "212.9289141355313 34.46078381314514 0.01 0.15";
        
        Node = "213.03444805468584 33.471154420318584 0.01 0.15";
        
        Node = "213.08744805468584 32.97415442031881 0.01 0.15";
        
        Node = "213.14044805468586 32.477154420318584 0.01 0.15";
        
        Node = "213.19344805468586 31.980154420318595 0.01 0.15";
        
        Node = "213.24649295847547 31.4817333413857 0.01 0.15";
        
        Node = "213.35244805468585 30.48815442031859 0.01 0.15";
        
        Node = "213.3541049132211 30.472318612825408 0.01 0.15";
        
        Node = "213.4051049132211 29.975318612825408 0.01 0.15";
        
        Node = "213.40599018981544 29.9665974086161 0.01 0.15";
        
        Node = "213.45595023103277 29.46899539809167 0.01 0.15";
        
        Node = "213.47471020721022 29.28252123488782 0.01 0.15";
        
        Node = "213.50555232142435 28.975950619599555 0.01 0.15";
        
        Node = "213.55614654390564 28.48191291772311 0.01 0.15";
        
        Node = "213.60669849381688 27.989279209764423 0.01 0.15";
        
        Node = "213.6578700604479 27.500197121003 0.01 0.15";
        
        Node = "213.7100262279473 27.011110040866747 0.01 0.15";
        
        Node = "213.76359653422355 26.51806481458366 0.01 0.15";
        
        Node = "213.76444805468586 26.51015442031859 0.01 0.15";
        
        Node = "213.81744805468585 26.01315442031859 0.01 0.15";
        
        Node = "213.870537773107 25.51431225296117 0.01 0.15";
        
        Node = "213.8712841908766 25.507238989789847 0.01 0.15";
        
        Node = "213.92287006044663 25.014197121014533 0.01 0.15";
        
        Node = "213.97544805468584 24.52115442031859 0.01 0.15";
        
        Node = "213.97628419087658 24.51323898979007 0.01 0.15";
        
        Node = "214.0278700604479 24.020197121003005 0.01 0.15";
        
        Node = "214.08044805468586 23.527154420318592 0.01 0.15";
        
        Node = "214.133537773107 23.028312252961165 0.01 0.15";
        
        Node = "214.1342841908766 23.021238989789847 0.01 0.15";
        
        Node = "214.18587006044663 22.528197121014532 0.01 0.15";
        
        Node = "214.3931524159385 20.584436164798454 0.01 0.15";
        
        Node = "214.39744805468584 20.54415442031859 0.01 0.15";
        
        Node = "214.45049295847318 20.0457333414073 0.01 0.15";
        
        Node = "214.50344805468586 19.54915442031859 0.01 0.15";
        
        Node = "214.5042841908766 19.541238989789846 0.01 0.15";
        
        Node = "214.55587006044664 19.04819712101453 0.01 0.15";
        
        Node = "214.71444805468585 17.56115442031859 0.01 0.15";
        
        Node = "214.767537773107 17.062312252961163 0.01 0.15";
        
        Node = "214.76828419087659 17.05523898979007 0.01 0.15";
        
        Node = "214.8198700604479 16.562197121003003 0.01 0.15";
        
        Node = "214.9250262279473 15.576110040866842 0.01 0.15";
        
        Node = "214.97859653422356 15.083064814583661 0.01 0.15";
        
        Node = "214.9802841908766 15.067238989789846 0.01 0.15";
        
        Node = "215.03191412629496 14.573775953195044 0.01 0.15";
        
        Node = "215.084537773107 14.079312252961165 0.01 0.15";
        
        Node = "215.0861049132211 14.064318612825408 0.01 0.15";
        
        Node = "215.1371049132211 13.567318612825408 0.01 0.15";
        
        Node = "215.18810491322108 13.070318612825634 0.01 0.15";
        
        Node = "215.18899018981548 13.061597408615876 0.01 0.15";
        
        Node = "215.217842581724 12.774227585206912 0.01 0.15";
        
        Node = "215.23895023103572 12.563995398062108 0.01 0.15";
        
        Node = "215.28855232142462 12.070950619596623 0.01 0.15";
        
        Node = "215.3387409320775 11.580873597927384 0.01 0.15";
        
        Node = "215.38987006044667 11.092197121014436 0.01 0.15";
        
        Node = "215.49544805468585 10.10215442031859 0.01 0.15";
        
        Node = "215.54844805468585 9.605154420318588 0.01 0.15";
        
        Node = "215.65444805468584 8.611154420318588 0.01 0.15";
        
        Node = "215.70749295847557 8.112733341384816 0.01 0.15";
        
        Node = "215.76044805468584 7.61615442031859 0.01 0.15";
        
        Node = "215.81344805468584 7.119154420318814 0.01 0.15";
        
        Node = "215.8142841908766 7.111238989789847 0.01 0.15";
        
        Node = "215.86587006044667 6.618197121014436 0.01 0.15";
        
        Node = "215.91844805468585 6.125154420318588 0.01 0.15";
        
        Node = "215.97144805468585 5.628154420318589 0.01 0.15";
        
        Node = "216.0244929584756 5.129733341384375 0.01 0.15";
        
        Node = "216.07744805468585 4.633154420318588 0.01 0.15";
        
        Node = "216.0795958740621 4.613013548054445 0.01 0.15";
        
        Node = "216.13044805468584 4.13615442031859 0.01 0.15";
        
        Node = "216.18344805468584 3.639154420318589 0.01 0.15";
        
        Node = "216.18428419087658 3.6312389897900714 0.01 0.15";
        
        Node = "216.23591412629636 3.1377759531820812 0.01 0.15";
        
        Node = "216.288537773107 2.643312252961165 0.01 0.15";
        
        Node = "216.2892841908766 2.6362389897898466 0.01 0.15";
        
        Node = "216.34087006044666 2.1431971210144827 0.01 0.15";
        
        Node = "216.39344805468585 1.6501544203185892 0.01 0.15";
        
        Node = "216.60544805468584 -0.33784557968141077 0.01 0.15";
        
        Node = "216.60637061000648 -0.34658780779031817 0.01 0.15";
        
        Node = "216.6583706100065 -0.8445878077903182 0.01 0.15";
        
        Node = "216.6591049132211 -0.8516813871745925 0.01 0.15";
        
        Node = "216.7101049132211 -1.3486813871745924 0.01 0.15";
        
        Node = "216.71099018981545 -1.357402591383899 0.01 0.15";
        
        Node = "216.72976086966196 -1.5443585626549488 0.01 0.15";
        
        Node = "216.76095023103 -1.8550046018805362 0.01 0.15";
        
        Node = "216.81051149873687 -2.347643602887313 0.01 0.15";
        
        Node = "216.86110491322108 -2.8406813871743677 0.01 0.15";
        
        Node = "216.91133548825962 -3.3311673624393907 0.01 0.15";
        
        Node = "217.0160262279473 -4.312889959133203 0.01 0.15";
        
        Node = "217.06959653422354 -4.805935185416339 0.01 0.15";
        
        Node = "217.07044805468584 -4.813845579681411 0.01 0.15";
        
        Node = "217.12344805468584 -5.310845579681411 0.01 0.15";
        
        Node = "217.17644805468584 -5.807845579681186 0.01 0.15";
        
        Node = "217.229537773107 -6.306687747038836 0.01 0.15";
        
        Node = "217.2302841908766 -6.313761010210154 0.01 0.15";
        
        Node = "217.28187006044666 -6.806802878985517 0.01 0.15";
        
        Node = "217.33444805468585 -7.299845579681411 0.01 0.15";
        
        Node = "217.3352841908766 -7.307761010210154 0.01 0.15";
        
        Node = "217.38687006044665 -7.800802878985517 0.01 0.15";
        
        Node = "217.43944805468584 -8.293845579681411 0.01 0.15";
        
        Node = "217.492537773107 -8.792687747038835 0.01 0.15";
        
        Node = "217.49328419087658 -8.799761010209927 0.01 0.15";
        
        Node = "217.5448700604479 -9.292802878997183 0.01 0.15";
        
        Node = "217.59744805468586 -9.785845579681412 0.01 0.15";
        
        Node = "217.80944805468584 -11.773845579681412 0.01 0.15";
        
        Node = "217.81037061000652 -11.782587807790543 0.01 0.15";
        
        Node = "217.8619141355315 -12.276216186856871 0.01 0.15";
        
        Node = "217.91444805468583 -12.768845579681185 0.01 0.15";
        
        Node = "217.96744805468586 -13.265845579681411 0.01 0.15";
        
    };
    
    new DecalRoad(road_1_separator_3) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_dashed_short";

        
        Node = "210.01255194531416 -14.114154420318588 0.01 0.15";
        
        Node = "209.95955194531416 -13.617154420318588 0.01 0.15";
        
        Node = "209.90655194531416 -13.120154420318814 0.01 0.15";
        
        Node = "209.90562938999346 -13.111412192209457 0.01 0.15";
        
        Node = "209.85408586446866 -12.61778381314498 0.01 0.15";
        
        Node = "209.64255194531415 -10.63415442031859 0.01 0.15";
        
        Node = "209.58955194531416 -10.137154420318588 0.01 0.15";
        
        Node = "209.5887158091234 -10.129238989790071 0.01 0.15";
        
        Node = "209.53708587370363 -9.635775953182028 0.01 0.15";
        
        Node = "209.4845070415244 -9.141733341384816 0.01 0.15";
        
        Node = "209.43155194531414 -8.645154420318589 0.01 0.15";
        
        Node = "209.4307158091234 -8.637238989789846 0.01 0.15";
        
        Node = "209.37912993955334 -8.144197121014436 0.01 0.15";
        
        Node = "209.32655194531415 -7.65115442031859 0.01 0.15";
        
        Node = "209.3257158091234 -7.643238989789847 0.01 0.15";
        
        Node = "209.27408587370505 -7.1497759531950456 0.01 0.15";
        
        Node = "209.22150704152227 -6.655733341364549 0.01 0.15";
        
        Node = "209.16855194531416 -6.159154420318814 0.01 0.15";
        
        Node = "209.11597377205268 -5.666110040866797 0.01 0.15";
        
        Node = "209.06240346577644 -5.173064814583661 0.01 0.15";
        
        Node = "209.06155194531414 -5.165154420318589 0.01 0.15";
        
        Node = "208.95555194531414 -4.171154420318589 0.01 0.15";
        
        Node = "208.95381190814584 -4.154507214225929 0.01 0.15";
        
        Node = "208.90285345609178 -3.6569129176978574 0.01 0.15";
        
        Node = "208.8518950867789 -3.160318612825632 0.01 0.15";
        
        Node = "208.8510898073426 -3.152393379542861 0.01 0.15";
        
        Node = "208.8010898073426 -2.6553933795428613 0.01 0.15";
        
        Node = "208.77174952695145 -2.3631646601292933 0.01 0.15";
        
        Node = "208.75144767033825 -2.1609584957471153 0.01 0.15";
        
        Node = "208.7012590766496 -1.6718657298006991 0.01 0.15";
        
        Node = "208.6500858644689 -1.1817838131473548 0.01 0.15";
        
        Node = "208.43855194531415 0.8018455796814108 0.01 0.15";
        
        Node = "208.38555194531415 1.298845579681411 0.01 0.15";
        
        Node = "208.3847158091234 1.306761010210154 0.01 0.15";
        
        Node = "208.33308587370504 1.8002240468049293 0.01 0.15";
        
        Node = "208.280462226893 2.2946877470388354 0.01 0.15";
        
        Node = "208.27971580912342 2.3017610102099284 0.01 0.15";
        
        Node = "208.2281299395521 2.7948028789971358 0.01 0.15";
        
        Node = "208.17555194531414 3.2878455796814112 0.01 0.15";
        
        Node = "208.12469976469046 3.7647047074167643 0.01 0.15";
        
        Node = "208.12255194531414 3.7848455796814098 0.01 0.15";
        
        Node = "208.06955194531415 4.281845579681412 0.01 0.15";
        
        Node = "208.01650704152442 4.780266658615182 0.01 0.15";
        
        Node = "207.96355194531415 5.27684557968141 0.01 0.15";
        
        Node = "207.91055194531415 5.773845579681412 0.01 0.15";
        
        Node = "207.9097158091234 5.781761010210154 0.01 0.15";
        
        Node = "207.85812993955315 6.274802878987621 0.01 0.15";
        
        Node = "207.80555194531416 6.767845579681186 0.01 0.15";
        
        Node = "207.75255194531414 7.264845579681411 0.01 0.15";
        
        Node = "207.6995070415244 7.763266658615183 0.01 0.15";
        
        Node = "207.59355194531415 8.75684557968141 0.01 0.15";
        
        Node = "207.54055194531415 9.253845579681412 0.01 0.15";
        
        Node = "207.43455194531415 10.247845579681412 0.01 0.15";
        
        Node = "207.4337158091234 10.255761010210154 0.01 0.15";
        
        Node = "207.38171580912342 10.752761010210154 0.01 0.15";
        
        Node = "207.3808119081459 10.761492785773846 0.01 0.15";
        
        Node = "207.32981190814587 11.259492785773846 0.01 0.15";
        
        Node = "207.32908980734263 11.266606620456914 0.01 0.15";
        
        Node = "207.27908980734261 11.763606620456914 0.01 0.15";
        
        Node = "207.25983157123738 11.955418341414322 0.01 0.15";
        
        Node = "207.22944767033775 12.258041504257873 0.01 0.15";
        
        Node = "207.1788950867789 12.750681387174367 0.01 0.15";
        
        Node = "207.12866452969396 13.24018309053168 0.01 0.15";
        
        Node = "207.076462226893 13.730687747038836 0.01 0.15";
        
        Node = "207.0757158091234 13.737761010210154 0.01 0.15";
        
        Node = "207.02454389511908 14.22684641905936 0.01 0.15";
        
        Node = "206.97140346577646 14.715935185416338 0.01 0.15";
        
        Node = "206.97055194531416 14.723845579681411 0.01 0.15";
        
        Node = "206.86455194531416 15.717845579681411 0.01 0.15";
        
        Node = "206.86371580912342 15.725761010209927 0.01 0.15";
        
        Node = "206.81208587370367 16.219224046817867 0.01 0.15";
        
        Node = "206.75950704152453 16.7132666586143 0.01 0.15";
        
        Node = "206.60055194531415 18.20384557968141 0.01 0.15";
        
        Node = "206.5997158091234 18.211761010210154 0.01 0.15";
        
        Node = "206.54812993955338 18.70480287898547 0.01 0.15";
        
        Node = "206.49555194531416 19.19784557968141 0.01 0.15";
        
        Node = "206.44250704152682 19.6962666585927 0.01 0.15";
        
        Node = "206.43825630656602 19.73612732416849 0.01 0.15";
        
        Node = "206.23055194531415 21.68384557968141 0.01 0.15";
        
        Node = "206.2297158091234 21.691761010210154 0.01 0.15";
        
        Node = "206.17808587370504 22.185224046804954 0.01 0.15";
        
        Node = "206.12550704152454 22.679266658614303 0.01 0.15";
        
        Node = "206.07255194531416 23.17584557968141 0.01 0.15";
        
        Node = "206.07171580912342 23.18376101020993 0.01 0.15";
        
        Node = "206.0201299395521 23.676802878996998 0.01 0.15";
        
        Node = "205.96755194531414 24.16984557968141 0.01 0.15";
        
        Node = "205.9667158091234 24.177761010210155 0.01 0.15";
        
        Node = "205.91508587370507 24.671224046804745 0.01 0.15";
        
        Node = "205.86250704152434 25.165266658616062 0.01 0.15";
        
        Node = "205.8099737720527 25.65788995913325 0.01 0.15";
        
        Node = "205.75640346577646 26.150935185416337 0.01 0.15";
        
        Node = "205.75555194531415 26.158845579681408 0.01 0.15";
        
        Node = "205.70255194531416 26.655845579681408 0.01 0.15";
        
        Node = "205.7017158091234 26.663761010209928 0.01 0.15";
        
        Node = "205.6497158091234 27.16076101020993 0.01 0.15";
        
        Node = "205.64889508677888 27.168681387174594 0.01 0.15";
        
        Node = "205.5978950867789 27.665681387174594 0.01 0.15";
        
        Node = "205.54681190814586 28.16449278577407 0.01 0.15";
        
        Node = "205.54608980734264 28.171606620456913 0.01 0.15";
        
        Node = "205.51677863660314 28.462959657607502 0.01 0.15";
        
        Node = "205.49608980734263 28.668606620456913 0.01 0.15";
        
        Node = "205.44644767033827 29.163041504252803 0.01 0.15";
        
        Node = "205.39670775716212 29.6477618346164 0.01 0.15";
        
        Node = "205.29155194531415 30.63384557968141 0.01 0.15";
        
        Node = "205.2385070415247 31.13226665861253 0.01 0.15";
        
        Node = "205.18555194531416 31.628845579681403 0.01 0.15";
        
        Node = "205.13255194531416 32.12584557968141 0.01 0.15";
        
        Node = "205.07955194531417 32.62284557968118 0.01 0.15";
        
        Node = "204.97355194531414 33.61684557968141 0.01 0.15";
        
        Node = "204.97262938999347 33.625587807790545 0.01 0.15";
        
        Node = "204.9210858644687 34.11921618685486 0.01 0.15";
        
        Node = "204.76255194531416 35.605845579681414 0.01 0.15";
        
    };
    
    new DecalRoad(road_2) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "213.99 -13.69 0.01 8.000000000000004";
        
        Node = "214.803 -13.713 0.01 7.999999999999997";
        
        Node = "215.615 -13.745 0.01 8.0";
        
        Node = "216.427 -13.778 0.01 8.000000000000002";
        
        Node = "217.24 -13.805 0.01 8.000000000000002";
        
        Node = "218.052 -13.83 0.01 7.999999999999999";
        
        Node = "218.865 -13.856 0.01 8.0";
        
        Node = "219.677 -13.881 0.01 8.0";
        
        Node = "220.49 -13.91 0.01 7.999999999999999";
        
        Node = "221.302 -13.943 0.01 8.000000000000002";
        
        Node = "222.115 -13.972 0.01 8.0";
        
        Node = "222.927 -13.996 0.01 8.0";
        
        Node = "223.74 -14.021 0.01 8.000000000000002";
        
        Node = "224.552 -14.053 0.01 7.999999999999999";
        
        Node = "225.364 -14.085 0.01 8.0";
        
        Node = "226.177 -14.111 0.01 7.999999999999998";
        
        Node = "226.99 -14.135 0.01 8.000000000000002";
        
        Node = "227.802 -14.163 0.01 8.000000000000002";
        
        Node = "228.614 -14.196 0.01 8.0";
        
        Node = "229.427 -14.226 0.01 8.000000000000002";
        
        Node = "230.239 -14.25 0.01 8.0";
        
        Node = "231.052 -14.275 0.01 8.000000000000002";
        
        Node = "231.864 -14.305 0.01 7.999999999999998";
        
        Node = "232.677 -14.338 0.01 7.999999999999998";
        
        Node = "233.489 -14.365 0.01 7.999999999999999";
        
        Node = "234.302 -14.39 0.01 7.999999999999999";
        
        Node = "235.114 -14.416 0.01 8.000000000000004";
        
        Node = "235.927 -14.441 0.01 7.999999999999999";
        
        Node = "236.739 -14.47 0.01 7.999999999999997";
        
        Node = "237.551 -14.504 0.01 8.0";
        
        Node = "238.364 -14.532 0.01 8.000000000000002";
        
        Node = "239.176 -14.556 0.01 8.000000000000002";
        
        Node = "239.989 -14.583 0.01 8.0";
        
        Node = "240.803 -14.609 0.01 7.999999999999996";
        
        Node = "241.613 -14.649 0.01 7.999999999999999";
        
        Node = "242.421 -14.688 0.01 8.000000000000002";
        
        Node = "243.257 -14.638 0.01 8.0";
        
        Node = "244.042 -14.753 0.01 8.000000000000002";
        
        Node = "244.711 -15.224 0.01 8.0";
        
        Node = "245.385 -15.675 0.01 7.999999999999999";
        
        Node = "246.054 -16.138 0.01 7.999999999999999";
        
        Node = "246.715 -16.61 0.01 7.999999999999999";
        
        Node = "247.38 -17.078 0.01 8.000000000000004";
        
        Node = "248.032 -17.564 0.01 8.000000000000002";
        
        Node = "248.681 -18.053 0.01 8.000000000000002";
        
        Node = "249.328 -18.546 0.01 8.000000000000004";
        
        Node = "249.968 -19.047 0.01 8.000000000000002";
        
        Node = "250.599 -19.56 0.01 8.000000000000002";
        
        Node = "251.224 -20.079 0.01 8.000000000000002";
        
        Node = "251.844 -20.605 0.01 8.000000000000002";
        
        Node = "252.455 -21.142 0.01 8.000000000000002";
        
        Node = "253.058 -21.686 0.01 8.000000000000002";
        
        Node = "253.655 -22.239 0.01 7.999999999999999";
        
        Node = "254.242 -22.801 0.01 7.999999999999999";
        
        Node = "254.815 -23.377 0.01 7.999999999999998";
        
        Node = "255.383 -23.959 0.01 7.999999999999997";
        
        Node = "255.935 -24.556 0.01 8.000000000000002";
        
        Node = "256.472 -25.166 0.01 7.999999999999999";
        
        Node = "257.007 -25.778 0.01 8.0";
        
        Node = "257.513 -26.415 0.01 7.999999999999999";
        
        Node = "258.011 -27.057 0.01 7.999999999999999";
        
        Node = "258.495 -27.71 0.01 7.999999999999999";
        
        Node = "258.952 -28.383 0.01 8.000000000000002";
        
        Node = "259.395 -29.064 0.01 8.0";
        
        Node = "259.815 -29.76 0.01 7.9999999999999964";
        
        Node = "260.211 -30.47 0.01 8.0";
        
        Node = "260.577 -31.196 0.01 8.0";
        
        Node = "260.928 -31.929 0.01 8.0";
        
        Node = "261.242 -32.679 0.01 8.0";
        
        Node = "261.53 -33.44 0.01 8.0";
        
        Node = "261.784 -34.212 0.01 8.000000000000002";
        
        Node = "261.992 -34.998 0.01 7.999999999999999";
        
        Node = "262.173 -35.79 0.01 8.000000000000002";
        
        Node = "262.32 -36.59 0.01 8.000000000000002";
        
        Node = "262.429 -37.395 0.01 7.999999999999997";
        
        Node = "262.497 -38.205 0.01 7.999999999999998";
        
        Node = "262.519 -39.018 0.01 8.0";
        
        Node = "262.507 -39.831 0.01 8.0";
        
        Node = "262.45 -40.642 0.01 8.0";
        
        Node = "262.353 -41.449 0.01 8.000000000000002";
        
        Node = "262.219 -42.251 0.01 7.999999999999997";
        
        Node = "262.056 -43.047 0.01 8.000000000000002";
        
        Node = "261.852 -43.834 0.01 8.000000000000002";
        
        Node = "261.608 -44.609 0.01 7.999999999999999";
        
        Node = "261.336 -45.375 0.01 7.999999999999998";
        
        Node = "261.037 -46.132 0.01 8.0";
        
        Node = "260.707 -46.874 0.01 8.0";
        
        Node = "260.348 -47.604 0.01 8.000000000000002";
        
        Node = "259.965 -48.321 0.01 7.999999999999999";
        
        Node = "259.559 -49.025 0.01 8.000000000000004";
        
        Node = "259.14 -49.722 0.01 8.000000000000004";
        
        Node = "258.693 -50.401 0.01 8.0";
        
        Node = "258.23 -51.069 0.01 7.999999999999999";
        
        Node = "257.744 -51.721 0.01 8.000000000000002";
        
        Node = "257.253 -52.368 0.01 8.0";
        
        Node = "256.741 -53.0 0.01 8.0";
        
        Node = "256.213 -53.619 0.01 8.0";
        
        Node = "255.678 -54.23 0.01 8.000000000000002";
        
        Node = "255.13 -54.831 0.01 8.0";
        
        Node = "254.567 -55.418 0.01 7.999999999999997";
        
        Node = "254.0 -56.0 0.01 8.0";
        
    };
    
    new DecalRoad(road_2_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "214.0967531071057 -9.91650973578528 0.01 0.15";
        
        Node = "214.9097531071057 -9.939509735785279 0.01 0.15";
        
        Node = "214.95165308420025 -9.940927988418334 0.01 0.15";
        
        Node = "215.76365308420026 -9.972927988418334 0.01 0.15";
        
        Node = "215.7682909490557 -9.973113617175404 0.01 0.15";
        
        Node = "216.56629735400088 -10.00554491195766 0.01 0.15";
        
        Node = "217.36073530038888 -10.031928459992685 0.01 0.15";
        
        Node = "218.1681703228862 -10.056787912655782 0.01 0.15";
        
        Node = "218.17266401901483 -10.056928943882028 0.01 0.15";
        
        Node = "218.9834172129424 -10.082857090305296 0.01 0.15";
        
        Node = "219.7931703228862 -10.10778791265578 0.01 0.15";
        
        Node = "219.81157001205554 -10.108399317201016 0.01 0.15";
        
        Node = "220.62457001205556 -10.137399317201016 0.01 0.15";
        
        Node = "220.64329094905568 -10.138113617175406 0.01 0.15";
        
        Node = "221.44593136679 -10.170733240063623 0.01 0.15";
        
        Node = "222.23804997853904 -10.198988393496244 0.01 0.15";
        
        Node = "223.03852765028364 -10.222647832069978 0.01 0.15";
        
        Node = "223.04302756703055 -10.222783520166253 0.01 0.15";
        
        Node = "223.85602756703057 -10.247783520166255 0.01 0.15";
        
        Node = "223.88865308420029 -10.248927988418338 0.01 0.15";
        
        Node = "224.70065308420027 -10.280927988418334 0.01 0.15";
        
        Node = "225.49866040460913 -10.312376552769422 0.01 0.15";
        
        Node = "226.2930274794254 -10.337780665863178 0.01 0.15";
        
        Node = "227.10139058941695 -10.361643783501304 0.01 0.15";
        
        Node = "227.12009509129518 -10.362242352440205 0.01 0.15";
        
        Node = "227.93209509129517 -10.390242352440207 0.01 0.15";
        
        Node = "227.95529094905567 -10.391113617175407 0.01 0.15";
        
        Node = "228.76024806063867 -10.423827391414616 0.01 0.15";
        
        Node = "229.55236758789286 -10.453056894265323 0.01 0.15";
        
        Node = "230.35052765028365 -10.476647832069975 0.01 0.15";
        
        Node = "230.35502756703056 -10.476783520166254 0.01 0.15";
        
        Node = "231.16802756703055 -10.501783520166253 0.01 0.15";
        
        Node = "231.19137535259205 -10.50257378984163 0.01 0.15";
        
        Node = "232.00337535259206 -10.532573789841628 0.01 0.15";
        
        Node = "232.01710270963352 -10.533105971755983 0.01 0.15";
        
        Node = "232.81628025741014 -10.565544912809646 0.01 0.15";
        
        Node = "233.60974100411678 -10.591928459806049 0.01 0.15";
        
        Node = "234.41802756703055 -10.616783520166255 0.01 0.15";
        
        Node = "234.42281246791813 -10.616933694248733 0.01 0.15";
        
        Node = "235.23242006508488 -10.642857090217127 0.01 0.15";
        
        Node = "236.04302756703055 -10.667783520166253 0.01 0.15";
        
        Node = "236.06173552768433 -10.668405224838 0.01 0.15";
        
        Node = "236.87373552768435 -10.697405224838 0.01 0.15";
        
        Node = "236.89692811874036 -10.698304928906484 0.01 0.15";
        
        Node = "237.69493367208722 -10.731718954539232 0.01 0.15";
        
        Node = "238.48473217475944 -10.758919886980593 0.01 0.15";
        
        Node = "239.28752765028364 -10.782647832069976 0.01 0.15";
        
        Node = "239.30129992444995 -10.783080052673682 0.01 0.15";
        
        Node = "240.1119079787708 -10.810000615363304 0.01 0.15";
        
        Node = "240.92351593429257 -10.835924210994222 0.01 0.15";
        
        Node = "240.98919286147265 -10.838594555178894 0.01 0.15";
        
        Node = "241.79709512724745 -10.878490963365302 0.01 0.15";
        
        Node = "242.39924791981602 -10.907555268947206 0.01 0.15";
        
        Node = "243.0316252189085 -10.869733660149809 0.01 0.15";
        
        Node = "243.4187557371886 -10.8664671443183 0.01 0.15";
        
        Node = "243.80418499222847 -10.902867661744779 0.01 0.15";
        
        Node = "244.58918499222847 -11.017867661744777 0.01 0.15";
        
        Node = "244.93586400031455 -11.08535332277744 0.01 0.15";
        
        Node = "245.27471870767 -11.184943163602846 0.01 0.15";
        
        Node = "245.602783001851 -11.315765439901877 0.01 0.15";
        
        Node = "245.9171852226322 -11.476675019046226 0.01 0.15";
        
        Node = "246.21517329864153 -11.666263403840318 0.01 0.15";
        
        Node = "246.8475676956084 -12.111491746099503 0.01 0.15";
        
        Node = "247.4843612211247 -12.537595425636372 0.01 0.15";
        
        Node = "247.53328509195578 -12.570890439485012 0.01 0.15";
        
        Node = "248.2022850919558 -13.033890439485013 0.01 0.15";
        
        Node = "248.24773450748958 -13.065842140994462 0.01 0.15";
        
        Node = "248.89819425187562 -13.5303156649736 0.01 0.15";
        
        Node = "249.55260259988253 -13.990861690337866 0.01 0.15";
        
        Node = "249.63607723804108 -14.051328479006536 0.01 0.15";
        
        Node = "250.2880772380411 -14.537328479006536 0.01 0.15";
        
        Node = "250.30368406494514 -14.54902462546137 0.01 0.15";
        
        Node = "250.95268406494515 -15.038024625461368 0.01 0.15";
        
        Node = "250.96895296073595 -15.050351793922637 0.01 0.15";
        
        Node = "251.61595296073594 -15.543351793922632 0.01 0.15";
        
        Node = "251.65493937454934 -15.573462675226452 0.01 0.15";
        
        Node = "252.29493937454933 -16.074462675226453 0.01 0.15";
        
        Node = "252.34936084754594 -16.11787973722906 0.01 0.15";
        
        Node = "252.98036084754594 -16.63087973722906 0.01 0.15";
        
        Node = "253.01066484253894 -16.65577933220261 0.01 0.15";
        
        Node = "253.63566484253894 -17.17477933220261 0.01 0.15";
        
        Node = "253.66617625767253 -17.20038920198292 0.01 0.15";
        
        Node = "254.28617625767254 -17.72638920198292 0.01 0.15";
        
        Node = "254.33609134004294 -17.76949197622666 0.01 0.15";
        
        Node = "254.94709134004296 -18.30649197622666 0.01 0.15";
        
        Node = "254.98367863689066 -18.339071290358444 0.01 0.15";
        
        Node = "255.58667863689064 -18.883071290358444 0.01 0.15";
        
        Node = "255.6233202927638 -18.916567423544276 0.01 0.15";
        
        Node = "256.2203202927638 -19.469567423544277 0.01 0.15";
        
        Node = "256.2656308435996 -19.5122378911158 0.01 0.15";
        
        Node = "256.85263084359957 -20.074237891115796 0.01 0.15";
        
        Node = "256.9182885017356 -20.138650500877535 0.01 0.15";
        
        Node = "257.49128850173565 -20.714650500877536 0.01 0.15";
        
        Node = "257.5166240785956 -20.740363442195278 0.01 0.15";
        
        Node = "258.08462407859565 -21.32236344219528 0.01 0.15";
        
        Node = "258.1547460579121 -21.39617952434262 0.01 0.15";
        
        Node = "258.7067460579121 -21.993179524342622 0.01 0.15";
        
        Node = "258.76848274230827 -22.06160617603367 0.01 0.15";
        
        Node = "259.30548274230824 -22.67160617603367 0.01 0.15";
        
        Node = "259.3141274435673 -22.681460486423838 0.01 0.15";
        
        Node = "259.84912744356734 -23.293460486423836 0.01 0.15";
        
        Node = "259.96291108601116 -23.42997643717181 0.01 0.15";
        
        Node = "260.46891108601113 -24.06697643717181 0.01 0.15";
        
        Node = "260.49580422415613 -24.101235975654347 0.01 0.15";
        
        Node = "260.9938042241562 -24.743235975654347 0.01 0.15";
        
        Node = "261.04377008311997 -24.809127534104153 0.01 0.15";
        
        Node = "261.52777008311995 -25.462127534104155 0.01 0.15";
        
        Node = "261.618027852356 -25.589310953154985 0.01 0.15";
        
        Node = "262.075027852356 -26.262310953154984 0.01 0.15";
        
        Node = "262.11638130472915 -26.32452581792224 0.01 0.15";
        
        Node = "262.55938130472913 -27.00552581792224 0.01 0.15";
        
        Node = "262.62710842052263 -27.113589746236272 0.01 0.15";
        
        Node = "263.04710842052265 -27.809589746236274 0.01 0.15";
        
        Node = "263.11187265042184 -27.92118088793366 0.01 0.15";
        
        Node = "263.50787265042186 -28.631180887933656 0.01 0.15";
        
        Node = "263.58187256746413 -28.770634490782612 0.01 0.15";
        
        Node = "263.9478725674641 -29.49663449078261 0.01 0.15";
        
        Node = "263.981770216541 -29.56561207911883 0.01 0.15";
        
        Node = "264.332770216541 -30.298612079118826 0.01 0.15";
        
        Node = "264.4101378080811 -30.471144971016617 0.01 0.15";
        
        Node = "264.72413780808114 -31.22114497101662 0.01 0.15";
        
        Node = "264.772622608921 -31.342837961407263 0.01 0.15";
        
        Node = "265.06062260892094 -32.10383796140726 0.01 0.15";
        
        Node = "265.11589728434006 -32.260184054115996 0.01 0.15";
        
        Node = "265.3698972843401 -33.032184054116 0.01 0.15";
        
        Node = "265.4333797877577 -33.246260819524544 0.01 0.15";
        
        Node = "265.6413797877577 -34.03226081952454 0.01 0.15";
        
        Node = "265.6721196987234 -34.1569625435999 0.01 0.15";
        
        Node = "265.8531196987234 -34.948962543599905 0.01 0.15";
        
        Node = "265.8858400555052 -35.10776563980097 0.01 0.15";
        
        Node = "266.0328400555052 -35.90776563980097 0.01 0.15";
        
        Node = "266.06086295077006 -36.083473215361664 0.01 0.15";
        
        Node = "266.16986295077004 -36.888473215361664 0.01 0.15";
        
        Node = "266.1907673585475 -37.07919730817113 0.01 0.15";
        
        Node = "266.2587673585475 -37.88919730817113 0.01 0.15";
        
        Node = "266.2706186211607 -38.102884858960024 0.01 0.15";
        
        Node = "266.29261862116067 -38.91588485896003 0.01 0.15";
        
        Node = "266.29358885273456 -39.07371348860125 0.01 0.15";
        
        Node = "266.28158885273456 -39.88671348860125 0.01 0.15";
        
        Node = "266.27271055850645 -40.09566769646724 0.01 0.15";
        
        Node = "266.21571055850643 -40.90666769646724 0.01 0.15";
        
        Node = "266.1980220872805 -41.09250575274615 0.01 0.15";
        
        Node = "266.1010220872805 -41.899505752746144 0.01 0.15";
        
        Node = "266.0763858052951 -42.07111184278004 0.01 0.15";
        
        Node = "265.9423858052951 -42.87311184278004 0.01 0.15";
        
        Node = "265.91725793230165 -43.00830658663971 0.01 0.15";
        
        Node = "265.75425793230164 -43.80430658663971 0.01 0.15";
        
        Node = "265.71023006424866 -43.994221007759535 0.01 0.15";
        
        Node = "265.50623006424865 -44.78122100775954 0.01 0.15";
        
        Node = "265.4527562765924 -44.96765745998512 0.01 0.15";
        
        Node = "265.20875627659245 -45.74265745998511 0.01 0.15";
        
        Node = "265.1653813680413 -45.87219547272482 0.01 0.15";
        
        Node = "264.89338136804133 -46.63819547272482 0.01 0.15";
        
        Node = "264.8470440907267 -46.76179284428982 0.01 0.15";
        
        Node = "264.54804409072665 -47.51879284428982 0.01 0.15";
        
        Node = "264.4862550991738 -47.66603528669445 0.01 0.15";
        
        Node = "264.1562550991738 -48.40803528669446 0.01 0.15";
        
        Node = "264.0945262478027 -48.53992044241248 0.01 0.15";
        
        Node = "263.73552624780274 -49.26992044241248 0.01 0.15";
        
        Node = "263.67772467193123 -49.382639538842106 0.01 0.15";
        
        Node = "263.2947246719312 -50.099639538842105 0.01 0.15";
        
        Node = "263.235159873904 -50.20691606364329 0.01 0.15";
        
        Node = "262.8291598739041 -50.91091606364329 0.01 0.15";
        
        Node = "262.7943963293207 -50.96995130844404 0.01 0.15";
        
        Node = "262.37539632932067 -51.66695130844404 0.01 0.15";
        
        Node = "262.29308212916436 -51.79774037074591 0.01 0.15";
        
        Node = "261.84608212916436 -52.476740370745915 0.01 0.15";
        
        Node = "261.79560461934653 -52.55145799215174 0.01 0.15";
        
        Node = "261.33260461934657 -53.21945799215174 0.01 0.15";
        
        Node = "261.25667152099345 -53.32507723804111 0.01 0.15";
        
        Node = "260.77067152099346 -53.977077238041105 0.01 0.15";
        
        Node = "260.7511236499315 -54.003067561231006 0.01 0.15";
        
        Node = "260.2601236499315 -54.65006756123101 0.01 0.15";
        
        Node = "260.18623453172927 -54.744291266211064 0.01 0.15";
        
        Node = "259.67423453172927 -55.37629126621106 0.01 0.15";
        
        Node = "259.61308078834594 -55.449852433354714 0.01 0.15";
        
        Node = "259.085080788346 -56.068852433354714 0.01 0.15";
        
        Node = "259.0531130070998 -56.105841994760155 0.01 0.15";
        
        Node = "258.51811300709977 -56.71684199476015 0.01 0.15";
        
        Node = "258.4674903438527 -56.77349535512694 0.01 0.15";
        
        Node = "257.9194903438527 -57.374495355126946 0.01 0.15";
        
        Node = "257.8544425802536 -57.444051401503835 0.01 0.15";
        
        Node = "257.2914425802536 -58.03105140150383 0.01 0.15";
        
        Node = "257.2709453193095 -58.05225600695614 0.01 0.15";
        
        Node = "256.70394531930947 -58.63425600695614 0.01 0.15";
        
    };
    
    new DecalRoad(road_2_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "251.29605468069056 -53.36574399304386 0.01 0.15";
        
        Node = "251.85276463504084 -52.79430626212348 0.01 0.15";
        
        Node = "252.3725948271703 -52.252316345995595 0.01 0.15";
        
        Node = "252.86291325974764 -51.71457660515802 0.01 0.15";
        
        Node = "253.35678333851408 -51.150549281557495 0.01 0.15";
        
        Node = "253.83787628041068 -50.586540700053675 0.01 0.15";
        
        Node = "254.28207363886122 -50.03823458571632 0.01 0.15";
        
        Node = "254.72704643841527 -49.451885499542264 0.01 0.15";
        
        Node = "255.16445191820338 -48.86507814805696 0.01 0.15";
        
        Node = "255.56471041390796 -48.28759936807713 0.01 0.15";
        
        Node = "255.94442197162618 -47.710811565637115 0.01 0.15";
        
        Node = "256.3059540381139 -47.10940858152758 0.01 0.15";
        
        Node = "256.66418587449976 -46.48823810661215 0.01 0.15";
        
        Node = "256.9884287964904 -45.88123503855139 0.01 0.15";
        
        Node = "257.287337259042 -45.27342674422637 0.01 0.15";
        
        Node = "257.55529297653607 -44.67093237337609 0.01 0.15";
        
        Node = "257.80070666855374 -44.04960071833469 0.01 0.15";
        
        Node = "258.0277590783485 -43.41018106428044 0.01 0.15";
        
        Node = "258.2221113357021 -42.79287368948919 0.01 0.15";
        
        Node = "258.37730326141656 -42.19416758391425 0.01 0.15";
        
        Node = "258.50694675851554 -41.56106191709966 0.01 0.15";
        
        Node = "258.61532529729266 -40.912408274567944 0.01 0.15";
        
        Node = "258.6908354995701 -40.28419452984737 0.01 0.15";
        
        Node = "258.7339550604768 -39.670686391333376 0.01 0.15";
        
        Node = "258.74324621061146 -39.041210969708615 0.01 0.15";
        
        Node = "258.72627714747625 -38.414126954759006 0.01 0.15";
        
        Node = "258.6752606502205 -37.80643044333028 0.01 0.15";
        
        Node = "258.5910775026139 -37.184710866969745 0.01 0.15";
        
        Node = "258.47481455270804 -36.55198733006677 0.01 0.15";
        
        Node = "258.32618943944067 -35.90164981786931 0.01 0.15";
        
        Node = "258.16319442134636 -35.28571672064757 0.01 0.15";
        
        Node = "257.97002263382547 -34.698596169599796 0.01 0.15";
        
        Node = "257.73456391741865 -34.07642921409431 0.01 0.15";
        
        Node = "257.48238481472987 -33.47409059302231 0.01 0.15";
        
        Node = "257.18882750420926 -32.86104925794651 0.01 0.15";
        
        Node = "256.87566907893597 -32.23986615207651 0.01 0.15";
        
        Node = "256.54955582545546 -31.655168147098863 0.01 0.15";
        
        Node = "256.1958423075951 -31.06901431750174 0.01 0.15";
        
        Node = "255.80798760870803 -30.472786213794947 0.01 0.15";
        
        Node = "255.41578717967528 -29.895213153096805 0.01 0.15";
        
        Node = "255.00285197495933 -29.338091895494493 0.01 0.15";
        
        Node = "254.54354352590315 -28.74597136478357 0.01 0.15";
        
        Node = "254.10637358783552 -28.195621067255715 0.01 0.15";
        
        Node = "253.6341863522593 -27.65547417347507 0.01 0.15";
        
        Node = "253.13196793570293 -27.084983979621455 0.01 0.15";
        
        Node = "252.64581717498461 -26.559201363409798 0.01 0.15";
        
        Node = "252.1259822403201 -26.02655359584864 0.01 0.15";
        
        Node = "251.59814794530172 -25.49595577048985 0.01 0.15";
        
        Node = "251.06684854445444 -24.987284112438452 0.01 0.15";
        
        Node = "250.5108904064754 -24.47230111360696 0.01 0.15";
        
        Node = "249.94450930944848 -23.961337072508016 0.01 0.15";
        
        Node = "249.37667794127262 -23.462277424864105 0.01 0.15";
        
        Node = "248.79701188840824 -22.970496225175943 0.01 0.15";
        
        Node = "248.2024224787113 -22.47674917936361 0.01 0.15";
        
        Node = "247.61364970616984 -21.99807971452404 0.01 0.15";
        
        Node = "247.02045559981934 -21.53371995314653 0.01 0.15";
        
        Node = "246.40116482365437 -21.06183378212748 0.01 0.15";
        
        Node = "245.76810424172027 -20.584843605600852 0.01 0.15";
        
        Node = "245.16524729069576 -20.13547477400897 0.01 0.15";
        
        Node = "244.54239740011747 -19.697138309662137 0.01 0.15";
        
        Node = "244.52126549251042 -19.682157859005542 0.01 0.15";
        
        Node = "243.88287263848278 -19.22630093449564 0.01 0.15";
        
        Node = "243.2610463526107 -18.795948811388342 0.01 0.15";
        
        Node = "242.74462393991016 -18.45039019398783 0.01 0.15";
        
        Node = "242.6463747810915 -18.45626633985019 0.01 0.15";
        
        Node = "242.23900272095023 -18.458610294159087 0.01 0.15";
        
        Node = "241.43100272095023 -18.419610294159085 0.01 0.15";
        
        Node = "241.42680713852735 -18.419405444821102 0.01 0.15";
        
        Node = "240.64963397751097 -18.381026523289428 0.01 0.15";
        
        Node = "239.86848406570743 -18.35607578900578 0.01 0.15";
        
        Node = "239.86370007555004 -18.35591994732632 0.01 0.15";
        
        Node = "239.05758581822195 -18.32914862512723 0.01 0.15";
        
        Node = "238.25247234971636 -18.305352167930025 0.01 0.15";
        
        Node = "238.2340647375716 -18.304763155510514 0.01 0.15";
        
        Node = "237.42106473757158 -18.276763155510515 0.01 0.15";
        
        Node = "237.39307188125963 -18.275695071093516 0.01 0.15";
        
        Node = "236.59266679385655 -18.242180572359885 0.01 0.15";
        
        Node = "235.80161768196174 -18.213928818363648 0.01 0.15";
        
        Node = "234.99797243296945 -18.189216479833746 0.01 0.15";
        
        Node = "234.99318753208186 -18.18906630575127 0.01 0.15";
        
        Node = "234.18357993491512 -18.163142909782877 0.01 0.15";
        
        Node = "233.37297243296945 -18.138216479833744 0.01 0.15";
        
        Node = "233.3635459356174 -18.13791482513585 0.01 0.15";
        
        Node = "232.55154593561738 -18.11091482513585 0.01 0.15";
        
        Node = "232.52389729036648 -18.109894028244014 0.01 0.15";
        
        Node = "231.71776048471796 -18.077172608088546 0.01 0.15";
        
        Node = "230.92429731755954 -18.04785746644476 0.01 0.15";
        
        Node = "230.12522235088997 -18.02328566550166 0.01 0.15";
        
        Node = "229.31547234971634 -17.999352167930027 0.01 0.15";
        
        Node = "229.28779584754992 -17.998432531396773 0.01 0.15";
        
        Node = "228.47479584754993 -17.968432531396772 0.01 0.15";
        
        Node = "228.46070905094433 -17.967886382824595 0.01 0.15";
        
        Node = "227.66030564048185 -17.935357672793486 0.01 0.15";
        
        Node = "226.86925641781005 -17.90808011339101 0.01 0.15";
        
        Node = "226.06560941058305 -17.884356216498695 0.01 0.15";
        
        Node = "226.05633598098515 -17.884071056117975 0.01 0.15";
        
        Node = "225.24333598098517 -17.85807105611797 0.01 0.15";
        
        Node = "225.21534691579976 -17.857072011581664 0.01 0.15";
        
        Node = "224.40334691579974 -17.825072011581668 0.01 0.15";
        
        Node = "223.60765720006782 -17.793714781405036 0.01 0.15";
        
        Node = "222.81322235088697 -17.76928566550157 0.01 0.15";
        
        Node = "222.00347234971636 -17.745352167930022 0.01 0.15";
        
        Node = "221.98042998794446 -17.744600682798982 0.01 0.15";
        
        Node = "221.16742998794444 -17.715600682798986 0.01 0.15";
        
        Node = "221.14870905094432 -17.714886382824595 0.01 0.15";
        
        Node = "220.34606863321036 -17.68226675993639 0.01 0.15";
        
        Node = "219.55162908710528 -17.653928817947403 0.01 0.15";
        
        Node = "218.7488296771138 -17.629212087344214 0.01 0.15";
        
        Node = "218.74433598098517 -17.629071056117972 0.01 0.15";
        
        Node = "217.9335827870576 -17.603142909694704 0.01 0.15";
        
        Node = "217.1238296771138 -17.578212087344212 0.01 0.15";
        
        Node = "217.11470007555008 -17.577919947326322 0.01 0.15";
        
        Node = "216.30170007555006 -17.55091994732632 0.01 0.15";
        
        Node = "216.2737090509443 -17.549886382824596 0.01 0.15";
        
        Node = "215.4640279263103 -17.516980622833316 0.01 0.15";
        
        Node = "214.67529296661846 -17.48589747171245 0.01 0.15";
        
        Node = "213.8832468928943 -17.46349026421472 0.01 0.15";
        
    };
    
    new DecalRoad(road_2_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "213.99 -13.69 0.01 0.3";
        
        Node = "214.803 -13.713 0.01 0.3";
        
        Node = "215.615 -13.745 0.01 0.3";
        
        Node = "216.427 -13.778 0.01 0.3";
        
        Node = "217.24 -13.805 0.01 0.3";
        
        Node = "218.052 -13.83 0.01 0.3";
        
        Node = "218.865 -13.856 0.01 0.3";
        
        Node = "219.677 -13.881 0.01 0.3";
        
        Node = "220.49 -13.91 0.01 0.3";
        
        Node = "221.302 -13.943 0.01 0.3";
        
        Node = "222.115 -13.972 0.01 0.3";
        
        Node = "222.927 -13.996 0.01 0.3";
        
        Node = "223.74 -14.021 0.01 0.3";
        
        Node = "224.552 -14.053 0.01 0.3";
        
        Node = "225.364 -14.085 0.01 0.3";
        
        Node = "226.177 -14.111 0.01 0.3";
        
        Node = "226.99 -14.135 0.01 0.3";
        
        Node = "227.802 -14.163 0.01 0.3";
        
        Node = "228.614 -14.196 0.01 0.3";
        
        Node = "229.427 -14.226 0.01 0.3";
        
        Node = "230.239 -14.25 0.01 0.3";
        
        Node = "231.052 -14.275 0.01 0.3";
        
        Node = "231.864 -14.305 0.01 0.3";
        
        Node = "232.677 -14.338 0.01 0.3";
        
        Node = "233.489 -14.365 0.01 0.3";
        
        Node = "234.302 -14.39 0.01 0.3";
        
        Node = "235.114 -14.416 0.01 0.3";
        
        Node = "235.927 -14.441 0.01 0.3";
        
        Node = "236.739 -14.47 0.01 0.3";
        
        Node = "237.551 -14.504 0.01 0.3";
        
        Node = "238.364 -14.532 0.01 0.3";
        
        Node = "239.176 -14.556 0.01 0.3";
        
        Node = "239.989 -14.583 0.01 0.3";
        
        Node = "240.803 -14.609 0.01 0.3";
        
        Node = "241.613 -14.649 0.01 0.3";
        
        Node = "242.421 -14.688 0.01 0.3";
        
        Node = "243.257 -14.638 0.01 0.3";
        
        Node = "244.042 -14.753 0.01 0.3";
        
        Node = "244.711 -15.224 0.01 0.3";
        
        Node = "245.385 -15.675 0.01 0.3";
        
        Node = "246.054 -16.138 0.01 0.3";
        
        Node = "246.715 -16.61 0.01 0.3";
        
        Node = "247.38 -17.078 0.01 0.3";
        
        Node = "248.032 -17.564 0.01 0.3";
        
        Node = "248.681 -18.053 0.01 0.3";
        
        Node = "249.328 -18.546 0.01 0.3";
        
        Node = "249.968 -19.047 0.01 0.3";
        
        Node = "250.599 -19.56 0.01 0.3";
        
        Node = "251.224 -20.079 0.01 0.3";
        
        Node = "251.844 -20.605 0.01 0.3";
        
        Node = "252.455 -21.142 0.01 0.3";
        
        Node = "253.058 -21.686 0.01 0.3";
        
        Node = "253.655 -22.239 0.01 0.3";
        
        Node = "254.242 -22.801 0.01 0.3";
        
        Node = "254.815 -23.377 0.01 0.3";
        
        Node = "255.383 -23.959 0.01 0.3";
        
        Node = "255.935 -24.556 0.01 0.3";
        
        Node = "256.472 -25.166 0.01 0.3";
        
        Node = "257.007 -25.778 0.01 0.3";
        
        Node = "257.513 -26.415 0.01 0.3";
        
        Node = "258.011 -27.057 0.01 0.3";
        
        Node = "258.495 -27.71 0.01 0.3";
        
        Node = "258.952 -28.383 0.01 0.3";
        
        Node = "259.395 -29.064 0.01 0.3";
        
        Node = "259.815 -29.76 0.01 0.3";
        
        Node = "260.211 -30.47 0.01 0.3";
        
        Node = "260.577 -31.196 0.01 0.3";
        
        Node = "260.928 -31.929 0.01 0.3";
        
        Node = "261.242 -32.679 0.01 0.3";
        
        Node = "261.53 -33.44 0.01 0.3";
        
        Node = "261.784 -34.212 0.01 0.3";
        
        Node = "261.992 -34.998 0.01 0.3";
        
        Node = "262.173 -35.79 0.01 0.3";
        
        Node = "262.32 -36.59 0.01 0.3";
        
        Node = "262.429 -37.395 0.01 0.3";
        
        Node = "262.497 -38.205 0.01 0.3";
        
        Node = "262.519 -39.018 0.01 0.3";
        
        Node = "262.507 -39.831 0.01 0.3";
        
        Node = "262.45 -40.642 0.01 0.3";
        
        Node = "262.353 -41.449 0.01 0.3";
        
        Node = "262.219 -42.251 0.01 0.3";
        
        Node = "262.056 -43.047 0.01 0.3";
        
        Node = "261.852 -43.834 0.01 0.3";
        
        Node = "261.608 -44.609 0.01 0.3";
        
        Node = "261.336 -45.375 0.01 0.3";
        
        Node = "261.037 -46.132 0.01 0.3";
        
        Node = "260.707 -46.874 0.01 0.3";
        
        Node = "260.348 -47.604 0.01 0.3";
        
        Node = "259.965 -48.321 0.01 0.3";
        
        Node = "259.559 -49.025 0.01 0.3";
        
        Node = "259.14 -49.722 0.01 0.3";
        
        Node = "258.693 -50.401 0.01 0.3";
        
        Node = "258.23 -51.069 0.01 0.3";
        
        Node = "257.744 -51.721 0.01 0.3";
        
        Node = "257.253 -52.368 0.01 0.3";
        
        Node = "256.741 -53.0 0.01 0.3";
        
        Node = "256.213 -53.619 0.01 0.3";
        
        Node = "255.678 -54.23 0.01 0.3";
        
        Node = "255.13 -54.831 0.01 0.3";
        
        Node = "254.567 -55.418 0.01 0.3";
        
        Node = "254.0 -56.0 0.01 0.3";
        
    };
    

    
    new TSStatic(stopsign411) {
        
        shapeName = "/levels/drivebuild/art/objects/stopsign.dae";
        
        position = "206.80273547447786 -18.944742582361897 0";
        
        rotationMatrix = "-0.03489949670250076 -0.9993908270190958 0.0 0.9993908270190958 -0.03489949670250076 0.0 0.0 0.0 1.0";
        
        scale = "1.9 1.9 1.9";
        
    };
new BeamNGWaypoint(wp_ego_0){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "37.02 0.04 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_1){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "55.5 0.32 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_2){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "65.08 1.07 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_3){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "73.25 2.54 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_4){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "81.5 4.93 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_5){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "89.41 8.46 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_6){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "96.64 13.16 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_7){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "103.49 18.09 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_8){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "110.49 21.89 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_9){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "118.14 23.34 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_10){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "126.34 22.54 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_11){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "134.73 20.28 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_12){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "142.92 17.27 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_13){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "150.41 13.45 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_14){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "156.65 8.27 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_15){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "161.31 1.28 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_16){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "167.66 -6.28 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_17){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "181.93 -11.82 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_18){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "197.33 -13.11 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_19){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "200.66 -13.23 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_20){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "203.99 -13.34 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_21){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "207.33 -13.46 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_22){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "210.66 -13.57 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_23){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "213.99 -13.69 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_24){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "218.99 -13.86 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_25){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "223.98 -14.03 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_26){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "228.98 -14.21 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_27){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "233.98 -14.38 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_28){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "238.97 -14.55 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_29){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "243.97 -14.72 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_30){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "246.24 -16.27 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_31){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "248.48 -17.9 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_32){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "250.66 -19.61 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_33){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "252.74 -21.4 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_34){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "254.71 -23.27 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_35){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "256.52 -25.22 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_36){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "258.15 -27.24 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_37){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "259.57 -29.35 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_38){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "260.74 -31.53 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_39){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "261.65 -33.79 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_40){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "262.24 -36.13 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_41){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "262.51 -38.54 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_42){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "262.41 -41.03 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_43){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "261.92 -43.59 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_44){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "261.0 -46.22 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_45){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "259.62 -48.92 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_46){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "257.76 -51.7 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_47){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "255.39 -54.55 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_1', 'wp_ego_2', 'wp_ego_3', 'wp_ego_4', 'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "37.02 0.04 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_2', 'wp_ego_3', 'wp_ego_4', 'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "55.5 0.32 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_3', 'wp_ego_4', 'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "65.08 1.07 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_4', 'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "73.25 2.54 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "81.5 4.93 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "89.41 8.46 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "96.64 13.16 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "103.49 18.09 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "110.49 21.89 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "118.14 23.34 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "126.34 22.54 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "134.73 20.28 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "142.92 17.27 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "150.41 13.45 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "156.65 8.27 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "161.31 1.28 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "167.66 -6.28 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "181.93 -11.82 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "197.33 -13.11 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "200.66 -13.23 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "203.99 -13.34 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "207.33 -13.46 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "210.66 -13.57 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "213.99 -13.69 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "218.99 -13.86 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "223.98 -14.03 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "228.98 -14.21 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "233.98 -14.38 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "238.97 -14.55 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "243.97 -14.72 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "246.24 -16.27 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "248.48 -17.9 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "250.66 -19.61 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "252.74 -21.4 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "254.71 -23.27 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "256.52 -25.22 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "258.15 -27.24 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "259.57 -29.35 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "260.74 -31.53 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "261.65 -33.79 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "262.24 -36.13 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "262.51 -38.54 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "262.41 -41.03 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "261.92 -43.59 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_45', 'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "261.0 -46.22 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_46', 'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "259.62 -48.92 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_47'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "257.76 -51.7 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
    
};