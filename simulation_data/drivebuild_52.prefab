//--- OBJECT WRITE BEGIN
$ThisPrefab = new SimGroup() {
    canSave = "1";
    canSaveDynamicFields = "1";
    groupPosition = "0.000000 0.000000 0.000000";

    
    new BeamNGVehicle(ego) {
        JBeam = "etk800";
        color = "White";
        colorPalette0 = "White";
        colorPalette1 = "White";
        renderDistance = "500";
        renderFade = "0.1";
        dataBlock = "default_vehicle";
        position = "1.0 -4.998578563954751 0";
        rotationMatrix = "6.123233995736766e-17 1.0 0.0 -1.0 6.123233995736766e-17 0.0 0.0 0.0 1.0";
        scale = "1 1 1";
        canSave = "1";
        canSaveDynamicFields = "1";
        annotation = "CAR";
        licenseText = "ego";
        
    };
    

    
    new DecalRoad(road_0) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "1.0 0.0 0.01 12.0";
        
        Node = "2.052 0.0 0.01 11.999999999999993";
        
        Node = "3.104 -0.0 0.01 11.999999999999995";
        
        Node = "4.155 -0.0 0.01 11.999999999999996";
        
        Node = "5.207 0.0 0.01 12.0";
        
        Node = "6.259 0.0 0.01 11.999999999999996";
        
        Node = "7.311 -0.0 0.01 12.0";
        
        Node = "8.363 -0.0 0.01 11.999999999999996";
        
        Node = "9.414 0.0 0.01 11.999999999999998";
        
        Node = "10.466 0.0 0.01 11.999999999999998";
        
        Node = "11.518 -0.001 0.01 12.0";
        
        Node = "12.57 0.001 0.01 12.0";
        
        Node = "13.622 0.008 0.01 11.999999999999998";
        
        Node = "14.673 0.01 0.01 12.000000000000002";
        
        Node = "15.725 0.01 0.01 12.000000000000002";
        
        Node = "16.777 0.016 0.01 12.000000000000004";
        
        Node = "17.829 0.021 0.01 12.000000000000005";
        
        Node = "18.88 0.02 0.01 12.000000000000002";
        
        Node = "19.932 0.024 0.01 12.000000000000005";
        
        Node = "20.984 0.032 0.01 12.000000000000004";
        
        Node = "22.036 0.038 0.01 11.999999999999998";
        
        Node = "23.088 0.045 0.01 12.0";
        
        Node = "24.139 0.052 0.01 12.000000000000005";
        
        Node = "25.191 0.059 0.01 12.0";
        
        Node = "26.243 0.065 0.01 11.999999999999998";
        
        Node = "27.295 0.074 0.01 12.000000000000005";
        
        Node = "28.346 0.089 0.01 12.000000000000004";
        
        Node = "29.398 0.104 0.01 11.999999999999998";
        
        Node = "30.45 0.118 0.01 11.999999999999998";
        
        Node = "31.501 0.133 0.01 12.000000000000002";
        
        Node = "32.553 0.148 0.01 11.999999999999996";
        
        Node = "33.605 0.17 0.01 12.000000000000002";
        
        Node = "34.656 0.194 0.01 12.000000000000002";
        
        Node = "35.708 0.217 0.01 12.0";
        
        Node = "36.759 0.241 0.01 12.000000000000004";
        
        Node = "37.811 0.265 0.01 12.000000000000002";
        
        Node = "38.862 0.296 0.01 12.000000000000004";
        
        Node = "39.913 0.331 0.01 12.000000000000004";
        
        Node = "40.965 0.364 0.01 12.0";
        
        Node = "42.016 0.4 0.01 12.0";
        
        Node = "43.067 0.445 0.01 12.000000000000002";
        
        Node = "44.117 0.489 0.01 12.0";
        
        Node = "45.168 0.534 0.01 12.0";
        
        Node = "46.219 0.589 0.01 12.0";
        
        Node = "47.269 0.644 0.01 12.0";
        
        Node = "48.319 0.708 0.01 12.000000000000004";
        
        Node = "49.368 0.777 0.01 12.0";
        
        Node = "50.418 0.845 0.01 12.000000000000002";
        
        Node = "51.467 0.92 0.01 12.000000000000002";
        
        Node = "52.515 1.01 0.01 11.999999999999998";
        
        Node = "53.563 1.094 0.01 11.999999999999998";
        
        Node = "54.611 1.193 0.01 12.000000000000004";
        
        Node = "55.657 1.301 0.01 12.000000000000002";
        
        Node = "56.703 1.407 0.01 12.000000000000004";
        
        Node = "57.748 1.527 0.01 12.000000000000002";
        
        Node = "58.791 1.661 0.01 12.0";
        
        Node = "59.834 1.797 0.01 12.000000000000004";
        
        Node = "60.877 1.937 0.01 12.0";
        
        Node = "61.917 2.093 0.01 12.000000000000004";
        
        Node = "62.954 2.266 0.01 12.0";
        
        Node = "63.991 2.445 0.01 12.000000000000004";
        
        Node = "65.027 2.626 0.01 12.000000000000005";
        
        Node = "66.058 2.835 0.01 11.999999999999998";
        
        Node = "67.089 3.042 0.01 12.000000000000005";
        
        Node = "68.116 3.27 0.01 12.000000000000004";
        
        Node = "69.14 3.507 0.01 12.0";
        
        Node = "70.162 3.76 0.01 12.000000000000002";
        
        Node = "71.182 4.015 0.01 12.000000000000002";
        
        Node = "72.196 4.292 0.01 12.000000000000005";
        
        Node = "73.207 4.583 0.01 11.999999999999996";
        
        Node = "74.214 4.889 0.01 12.0";
        
        Node = "75.219 5.199 0.01 11.999999999999998";
        
        Node = "76.217 5.529 0.01 11.999999999999998";
        
        Node = "77.212 5.87 0.01 11.999999999999996";
        
        Node = "78.201 6.229 0.01 12.0";
        
        Node = "79.189 6.591 0.01 12.000000000000002";
        
        Node = "80.172 6.965 0.01 12.0";
        
        Node = "81.146 7.359 0.01 12.000000000000002";
        
        Node = "82.121 7.755 0.01 12.0";
        
        Node = "83.091 8.162 0.01 11.999999999999996";
        
        Node = "84.056 8.581 0.01 12.0";
        
        Node = "85.017 9.008 0.01 12.0";
        
        Node = "85.977 9.437 0.01 11.999999999999996";
        
        Node = "86.935 9.871 0.01 11.999999999999998";
        
        Node = "87.893 10.305 0.01 12.000000000000007";
        
        Node = "88.854 10.734 0.01 12.000000000000002";
        
        Node = "89.814 11.163 0.01 12.0";
        
        Node = "90.772 11.598 0.01 11.999999999999998";
        
        Node = "91.73 12.031 0.01 12.0";
        
        Node = "92.69 12.46 0.01 11.999999999999996";
        
        Node = "93.651 12.889 0.01 11.999999999999998";
        
        Node = "94.608 13.325 0.01 12.0";
        
        Node = "95.567 13.757 0.01 12.000000000000004";
        
        Node = "96.527 14.187 0.01 11.999999999999998";
        
        Node = "97.487 14.616 0.01 12.000000000000004";
        
        Node = "98.444 15.052 0.01 12.000000000000004";
        
        Node = "99.403 15.484 0.01 11.999999999999996";
        
        Node = "100.363 15.913 0.01 11.999999999999998";
        
        Node = "101.324 16.342 0.01 11.999999999999996";
        
        Node = "102.281 16.778 0.01 11.999999999999998";
        
        Node = "103.24 17.21 0.01 12.0";
        
    };
    
    new DecalRoad(road_0_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "1.0 5.775 0.01 0.15";
        
        Node = "10.466 5.775 0.01 0.15";
        
        Node = "11.51525523123702 5.774005218193922 0.01 0.15";
        
        Node = "12.545297348981354 5.7759634731706235 0.01 0.15";
        
        Node = "13.583574044573334 5.782872158407452 0.01 0.15";
        
        Node = "13.611010486120335 5.782989543764101 0.01 0.15";
        
        Node = "14.662010486120336 5.784989543764101 0.01 0.15";
        
        Node = "14.673 5.785 0.01 0.15";
        
        Node = "15.708531502746178 5.785 0.01 0.15";
        
        Node = "16.744063273338003 5.790906074737216 0.01 0.15";
        
        Node = "17.801552591380055 5.795934773636845 0.01 0.15";
        
        Node = "17.834494764401462 5.7959973859357 0.01 0.15";
        
        Node = "18.871768327606805 5.79501044629421 0.01 0.15";
        
        Node = "19.89906333285619 5.798916510952954 0.01 0.15";
        
        Node = "20.940084919962562 5.806833024923344 0.01 0.15";
        
        Node = "20.951063273338 5.806906074737215 0.01 0.15";
        
        Node = "22.000318650896403 5.812890420997054 0.01 0.15";
        
        Node = "23.04955576464939 5.819872036772977 0.01 0.15";
        
        Node = "24.100537484866635 5.82687191502371 0.01 0.15";
        
        Node = "25.152574044573335 5.833872158407452 0.01 0.15";
        
        Node = "26.201829510165332 5.839859114110755 0.01 0.15";
        
        Node = "27.229090863666517 5.848647471697742 0.01 0.15";
        
        Node = "28.263586889748257 5.863411924971983 0.01 0.15";
        
        Node = "29.315665213275423 5.878413042283607 0.01 0.15";
        
        Node = "30.370370022580307 5.892451646182716 0.01 0.15";
        
        Node = "31.418586889748262 5.907411924971982 0.01 0.15";
        
        Node = "32.451459702309315 5.9221391994466375 0.01 0.15";
        
        Node = "33.47870808454563 5.943621580063747 0.01 0.15";
        
        Node = "34.52415996453163 5.967494886552485 0.01 0.15";
        
        Node = "35.57896528142538 5.990558947071467 0.01 0.15";
        
        Node = "36.62715996453163 6.014494886552485 0.01 0.15";
        
        Node = "37.66000906559598 6.038057985274635 0.01 0.15";
        
        Node = "38.680762337293096 6.068165836295198 0.01 0.15";
        
        Node = "39.72078970975095 6.102800430049742 0.01 0.15";
        
        Node = "39.73193411981016 6.103160786657895 0.01 0.15";
        
        Node = "40.775618833703874 6.135899945934028 0.01 0.15";
        
        Node = "41.79362901567346 6.170769942652302 0.01 0.15";
        
        Node = "42.81996182659634 6.214713783272216 0.01 0.15";
        
        Node = "43.872586961538524 6.258826182009036 0.01 0.15";
        
        Node = "44.89357512251319 6.302541184144012 0.01 0.15";
        
        Node = "45.91705746298492 6.356101154387538 0.01 0.15";
        
        Node = "46.942277137375406 6.409803137331802 0.01 0.15";
        
        Node = "47.953802583534845 6.4714580216691395 0.01 0.15";
        
        Node = "48.9889573257439 6.5395473231109165 0.01 0.15";
        
        Node = "48.9947818390276 6.539927485603162 0.01 0.15";
        
        Node = "50.025465533478254 6.606676524862823 0.01 0.15";
        
        Node = "51.01399293359729 6.677352935738827 0.01 0.15";
        
        Node = "52.020874087461046 6.763821737120256 0.01 0.15";
        
        Node = "52.05359807474525 6.766538305559273 0.01 0.15";
        
        Node = "53.06071311992753 6.8472612671960205 0.01 0.15";
        
        Node = "54.04286948113623 6.940041305134629 0.01 0.15";
        
        Node = "55.063881625160086 7.04546129706061 0.01 0.15";
        
        Node = "55.07475260636876 7.046573337153537 0.01 0.15";
        
        Node = "56.082434554396066 7.148690245844639 0.01 0.15";
        
        Node = "57.05060543384006 7.259867763101367 0.01 0.15";
        
        Node = "58.049700901224 7.388227104069197 0.01 0.15";
        
        Node = "59.07650898942552 7.522115790546097 0.01 0.15";
        
        Node = "60.064479609888046 7.6547292966484495 0.01 0.15";
        
        Node = "61.01345862628097 7.797076149107389 0.01 0.15";
        
        Node = "61.987687381768175 7.95960418642589 0.01 0.15";
        
        Node = "63.00289245860533 8.13484209264947 0.01 0.15";
        
        Node = "63.956181883969215 8.30139169302675 0.01 0.15";
        
        Node = "64.91065322231758 8.494878123399985 0.01 0.15";
        
        Node = "64.92120520217063 8.49700693991345 0.01 0.15";
        
        Node = "65.8946738656767 8.692456031422427 0.01 0.15";
        
        Node = "66.83908139057657 8.902120019423569 0.01 0.15";
        
        Node = "67.79496783582971 9.123355456459695 0.01 0.15";
        
        Node = "68.76780984708338 9.364186208756344 0.01 0.15";
        
        Node = "69.72059287116195 9.602381964775986 0.01 0.15";
        
        Node = "70.63632112171301 9.852536526317055 0.01 0.15";
        
        Node = "71.56868948012443 10.12090367992509 0.01 0.15";
        
        Node = "72.52336244174448 10.411002911559384 0.01 0.15";
        
        Node = "73.46120749588238 10.700288450646696 0.01 0.15";
        
        Node = "74.37429825398686 11.002212248416713 0.01 0.15";
        
        Node = "75.29046776560858 11.316195970490087 0.01 0.15";
        
        Node = "76.22236485828559 11.654468019298019 0.01 0.15";
        
        Node = "77.16873801529233 12.001216078849074 0.01 0.15";
        
        Node = "78.06216937608399 12.341138081835926 0.01 0.15";
        
        Node = "78.97662417329998 12.711051008019812 0.01 0.15";
        
        Node = "79.91715911526678 13.093052892141714 0.01 0.15";
        
        Node = "80.82369625320128 13.473424660326602 0.01 0.15";
        
        Node = "81.73347126304007 13.868446141282512 0.01 0.15";
        
        Node = "82.66645426012869 14.282997379322921 0.01 0.15";
        
        Node = "83.60736603707004 14.703467329643587 0.01 0.15";
        
        Node = "84.55190916961793 15.131371003470086 0.01 0.15";
        
        Node = "85.50990916961794 15.56537100347009 0.01 0.15";
        
        Node = "85.5388981028805 15.57840774622808 0.01 0.15";
        
        Node = "86.49887592240448 16.006951434652418 0.01 0.15";
        
        Node = "87.4420836867951 16.42844740436448 0.01 0.15";
        
        Node = "88.3843558940631 16.856305870086373 0.01 0.15";
        
        Node = "88.39346780792935 16.86043381063207 0.01 0.15";
        
        Node = "89.35146780792935 17.29343381063207 0.01 0.15";
        
        Node = "89.3738539189375 17.30349472685311 0.01 0.15";
        
        Node = "90.33385391893749 17.73249472685311 0.01 0.15";
        
        Node = "91.27678339745243 18.153428340787254 0.01 0.15";
        
        Node = "92.21373777780268 18.580295749180884 0.01 0.15";
        
        Node = "92.23608949926722 18.590421690284035 0.01 0.15";
        
        Node = "93.19508949926721 19.022421690284038 0.01 0.15";
        
        Node = "93.2062786104693 19.027447753370893 0.01 0.15";
        
        Node = "94.1662786104693 19.457447753370893 0.01 0.15";
        
        Node = "95.11176471369586 19.879964238260758 0.01 0.15";
        
        Node = "96.04973777780268 20.307295749180888 0.01 0.15";
        
        Node = "96.07208949926725 20.31742169028405 0.01 0.15";
        
        Node = "97.03108949926725 20.74942169028405 0.01 0.15";
        
        Node = "97.0468539189375 20.75649472685311 0.01 0.15";
        
        Node = "98.0068539189375 21.185494726853108 0.01 0.15";
        
        Node = "98.94978339745205 21.606428340787083 0.01 0.15";
        
        Node = "99.88673777780268 22.033295749180887 0.01 0.15";
        
        Node = "99.90908949926722 22.04342169028403 0.01 0.15";
        
        Node = "100.86808949926721 22.475421690284033 0.01 0.15";
        
    };
    
    new DecalRoad(road_0_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "105.61191050073278 11.944578309715968 0.01 0.15";
        
        Node = "104.66409711796578 11.517617536665549 0.01 0.15";
        
        Node = "103.71826222219732 11.086704250819112 0.01 0.15";
        
        Node = "103.6781018971195 11.068592253771914 0.01 0.15";
        
        Node = "102.71812407758024 10.64004856534076 0.01 0.15";
        
        Node = "101.76703358142669 10.215029999872135 0.01 0.15";
        
        Node = "100.82709711796512 9.791617536665258 0.01 0.15";
        
        Node = "99.88126222219732 9.360704250819113 0.01 0.15";
        
        Node = "99.8431460810625 9.343505273146892 0.01 0.15";
        
        Node = "98.88543417945735 8.915527767117087 0.01 0.15";
        
        Node = "97.93331861397584 8.489059336745166 0.01 0.15";
        
        Node = "96.99109711796507 8.06461753666523 0.01 0.15";
        
        Node = "96.04526222219732 7.633704250819113 0.01 0.15";
        
        Node = "96.0051018971195 7.615592253771916 0.01 0.15";
        
        Node = "95.04512407758406 7.187048565342465 0.01 0.15";
        
        Node = "94.09734982599659 6.763511946664312 0.01 0.15";
        
        Node = "93.15508993659189 6.337626213770539 0.01 0.15";
        
        Node = "92.2016441059369 5.904694129913627 0.01 0.15";
        
        Node = "92.1701460810625 5.890505273146892 0.01 0.15";
        
        Node = "91.2101460810625 5.461505273146892 0.01 0.15";
        
        Node = "90.26161430229286 5.038070736414338 0.01 0.15";
        
        Node = "89.31809083038206 4.61062899652991 0.01 0.15";
        
        Node = "88.36009083038208 4.176628996529913 0.01 0.15";
        
        Node = "88.33314608106248 4.164505273146878 0.01 0.15";
        
        Node = "87.37314608106247 3.7355052731468774 0.01 0.15";
        
        Node = "87.36194009478503 3.7305118709873337 0.01 0.15";
        
        Node = "86.40094009478503 3.303511870987334 0.01 0.15";
        
        Node = "86.3560336136569 3.2837865461123457 0.01 0.15";
        
        Node = "85.3910336136569 2.864786546112347 0.01 0.15";
        
        Node = "85.32540077213372 2.8367696585510798 0.01 0.15";
        
        Node = "84.35540077213372 2.429769658551079 0.01 0.15";
        
        Node = "84.29413584546377 2.4044761380626998 0.01 0.15";
        
        Node = "83.31913584546378 2.0084761380627 0.01 0.15";
        
        Node = "83.3116136652806 2.005427132022029 0.01 0.15";
        
        Node = "82.3376136652806 1.6114271320220288 0.01 0.15";
        
        Node = "82.22558949617208 1.5674639712910015 0.01 0.15";
        
        Node = "81.24258949617207 1.1934639712910018 0.01 0.15";
        
        Node = "81.1757804324296 1.1685163888385235 0.01 0.15";
        
        Node = "80.1877804324296 0.8065163888385234 0.01 0.15";
        
        Node = "80.17148092182227 0.8005720565955325 0.01 0.15";
        
        Node = "79.18248092182228 0.44157205659553256 0.01 0.15";
        
        Node = "79.08427109999828 0.4069215703862321 0.01 0.15";
        
        Node = "78.08927109999827 0.06592157038623192 0.01 0.15";
        
        Node = "78.03002442749269 0.045974610188750376 0.01 0.15";
        
        Node = "77.03202442749269 -0.2840253898112497 0.01 0.15";
        
        Node = "76.92120388875098 -0.3194351877249604 0.01 0.15";
        
        Node = "75.91620388875099 -0.62943518772496 0.01 0.15";
        
        Node = "75.89305637394976 -0.6365221195013504 0.01 0.15";
        
        Node = "74.88605637394976 -0.9425221195013505 0.01 0.15";
        
        Node = "74.80438650063086 -0.9666829970370667 0.01 0.15";
        
        Node = "73.79338650063086 -1.257682997037067 0.01 0.15";
        
        Node = "73.71782725442085 -1.2788766641976448 0.01 0.15";
        
        Node = "72.70382725442086 -1.555876664197645 0.01 0.15";
        
        Node = "72.58264323458484 -1.5875729383392914 0.01 0.15";
        
        Node = "71.56264323458484 -1.8425729383392913 0.01 0.15";
        
        Node = "71.54973337202068 -1.8457846095065147 0.01 0.15";
        
        Node = "70.52773337202069 -2.0987846095065144 0.01 0.15";
        
        Node = "70.44217487714049 -2.1192745746492103 0.01 0.15";
        
        Node = "69.41817487714049 -2.3562745746492104 0.01 0.15";
        
        Node = "69.36761088038219 -2.367738483125031 0.01 0.15";
        
        Node = "68.34061088038219 -2.5957384831250314 0.01 0.15";
        
        Node = "68.22579479782938 -2.6200069399134494 0.01 0.15";
        
        Node = "67.20007177978182 -2.8259474488715917 0.01 0.15";
        
        Node = "66.17434677768243 -3.0338781233999845 0.01 0.15";
        
        Node = "66.02089798266174 -3.062830442196439 0.01 0.15";
        
        Node = "64.98489798266174 -3.243830442196439 0.01 0.15";
        
        Node = "64.97331505268843 -3.2458419532843927 0.01 0.15";
        
        Node = "63.936315052688435 -3.4248419532843926 0.01 0.15";
        
        Node = "63.90429490237027 -3.430276380103855 0.01 0.15";
        
        Node = "62.86729490237027 -3.603276380103855 0.01 0.15";
        
        Node = "62.773666115672164 -3.6181074378144187 0.01 0.15";
        
        Node = "61.733666115672165 -3.7741074378144184 0.01 0.15";
        
        Node = "61.64527757444614 -3.786667929623727 0.01 0.15";
        
        Node = "60.60227757444614 -3.9266679296237275 0.01 0.15";
        
        Node = "60.58069906619451 -3.9295229855946845 0.01 0.15";
        
        Node = "59.537699066194506 -4.065522985594685 0.01 0.15";
        
        Node = "59.526897813029 -4.066921037233241 0.01 0.15";
        
        Node = "58.483897813029 -4.200921037233241 0.01 0.15";
        
        Node = "58.406828297666465 -4.2102964255121 0.01 0.15";
        
        Node = "57.36182829766647 -4.3302964255121 0.01 0.15";
        
        Node = "57.28524739363124 -4.338573337153536 0.01 0.15";
        
        Node = "56.24468341029926 -4.444022459747407 0.01 0.15";
        
        Node = "55.20411837483991 -4.5514612970606105 0.01 0.15";
        
        Node = "55.154121163342566 -4.556403830131384 0.01 0.15";
        
        Node = "54.10612116334257 -4.655403830131383 0.01 0.15";
        
        Node = "54.02440192525475 -4.662538305559273 0.01 0.15";
        
        Node = "52.99276778050287 -4.74522653853557 0.01 0.15";
        
        Node = "51.961125912538954 -4.833821737120256 0.01 0.15";
        
        Node = "51.878841952149195 -4.840296104060098 0.01 0.15";
        
        Node = "50.829841952149195 -4.915296104060098 0.01 0.15";
        
        Node = "50.7912181609724 -4.917927485603162 0.01 0.15";
        
        Node = "49.7441305136745 -4.985738876094835 0.01 0.15";
        
        Node = "48.69804267425611 -5.054547323110916 0.01 0.15";
        
        Node = "48.670347942405364 -5.0563021800880215 0.01 0.15";
        
        Node = "47.62034794240536 -5.1203021800880215 0.01 0.15";
        
        Node = "47.57108585770593 -5.123093647113255 0.01 0.15";
        
        Node = "46.521085857705934 -5.178093647113256 0.01 0.15";
        
        Node = "45.46979921598431 -5.233108654536626 0.01 0.15";
        
        Node = "45.41503817340366 -5.235713783272216 0.01 0.15";
        
        Node = "44.36403817340366 -5.2807137832722155 0.01 0.15";
        
        Node = "43.311413038461474 -5.324826182009036 0.01 0.15";
        
        Node = "42.26303817340366 -5.369713783272215 0.01 0.15";
        
        Node = "42.21369566636484 -5.3716151485958035 0.01 0.15";
        
        Node = "41.16269566636485 -5.407615148595804 0.01 0.15";
        
        Node = "41.14606588018984 -5.408160786657895 0.01 0.15";
        
        Node = "40.09963825916134 -5.440985987697761 0.01 0.15";
        
        Node = "39.054210290249046 -5.475800430049741 0.01 0.15";
        
        Node = "39.03226372515173 -5.4764895204666635 0.01 0.15";
        
        Node = "37.98126372515173 -5.507489520466664 0.01 0.15";
        
        Node = "37.94271477746408 -5.508497745509008 0.01 0.15";
        
        Node = "36.89077740644787 -5.5324963167108985 0.01 0.15";
        
        Node = "35.83984003546837 -5.5564948865524855 0.01 0.15";
        
        Node = "34.785034718574614 -5.579558947071467 0.01 0.15";
        
        Node = "33.73684003546837 -5.603494886552485 0.01 0.15";
        
        Node = "33.72574356219185 -5.603737610265054 0.01 0.15";
        
        Node = "32.67374356219185 -5.6257376102650545 0.01 0.15";
        
        Node = "32.63533478672457 -5.626413042283607 0.01 0.15";
        
        Node = "31.58337394847888 -5.641412483893574 0.01 0.15";
        
        Node = "30.53241311025174 -5.656411924971982 0.01 0.15";
        
        Node = "29.477590815130554 -5.670452167353864 0.01 0.15";
        
        Node = "28.428373948482616 -5.68541248389352 0.01 0.15";
        
        Node = "27.377413110251744 -5.7004119249719825 0.01 0.15";
        
        Node = "27.34440408561923 -5.700788674603093 0.01 0.15";
        
        Node = "26.292404085619225 -5.709788674603092 0.01 0.15";
        
        Node = "26.275936726661996 -5.709906074737215 0.01 0.15";
        
        Node = "25.2266813491036 -5.715890420997054 0.01 0.15";
        
        Node = "24.177444235350613 -5.722872036772977 0.01 0.15";
        
        Node = "23.12646251513337 -5.72987191502371 0.01 0.15";
        
        Node = "22.074425955426662 -5.736872158407452 0.01 0.15";
        
        Node = "21.02242593806772 -5.742874767447829 0.01 0.15";
        
        Node = "19.97591508003744 -5.750833024923344 0.01 0.15";
        
        Node = "19.95395801617822 -5.750958254872975 0.01 0.15";
        
        Node = "18.901958016178227 -5.754958254872975 0.01 0.15";
        
        Node = "18.874505235598534 -5.754997385935701 0.01 0.15";
        
        Node = "17.839976411399064 -5.754013057844169 0.01 0.15";
        
        Node = "16.807192074462343 -5.7589217286471 0.01 0.15";
        
        Node = "15.757936726661995 -5.764906074737216 0.01 0.15";
        
        Node = "15.725000000000001 -5.765000000000001 0.01 0.15";
        
        Node = "14.678494761914557 -5.765000000000001 0.01 0.15";
        
        Node = "13.646707874076007 -5.766963438416439 0.01 0.15";
        
        Node = "12.608425955426668 -5.7738721584074515 0.01 0.15";
        
        Node = "12.580979067611473 -5.773989563633374 0.01 0.15";
        
        Node = "11.528979067611473 -5.775989563633375 0.01 0.15";
        
        Node = "11.512510458753894 -5.77599739090304 0.01 0.15";
        
        Node = "10.463255228756552 -5.775 0.01 0.15";
        
        Node = "1.0 -5.775 0.01 0.15";
        
    };
    
    new DecalRoad(road_0_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "104.06144086605464 15.38647733669817 0.01 0.3";
        
        Node = "103.1063150192087 14.956222523520427 0.01 0.3";
        
        Node = "102.1531817219731 14.52198415612783 0.01 0.3";
        
        Node = "102.13927338428381 14.515711603037893 0.01 0.3";
        
        Node = "101.17862738617272 14.08686963301744 0.01 0.3";
        
        Node = "100.22171292863295 13.659248484804355 0.01 0.3";
        
        Node = "99.26931501920889 13.23022252352052 0.01 0.3";
        
        Node = "98.3161817219731 12.795984156127831 0.01 0.3";
        
        Node = "98.30298132677488 12.790027800224031 0.01 0.3";
        
        Node = "97.34377374180193 12.361381910689238 0.01 0.3";
        
        Node = "96.3865042818976 11.932604965107096 0.01 0.3";
        
        Node = "95.43331501920869 11.503222523520426 0.01 0.3";
        
        Node = "94.4801817219731 11.068984156127831 0.01 0.3";
        
        Node = "94.46627338428381 11.062711603037894 0.01 0.3";
        
        Node = "93.50562738617272 10.63386963301744 0.01 0.3";
        
        Node = "92.54986141160116 10.206761713130767 0.01 0.3";
        
        Node = "91.59731253215054 9.77622552857741 0.01 0.3";
        
        Node = "90.64088973365779 9.341941690013378 0.01 0.3";
        
        Node = "90.62998132677488 9.337027800224032 0.01 0.3";
        
        Node = "89.66998132677489 8.908027800224032 0.01 0.3";
        
        Node = "88.71329932546949 8.480955233390292 0.01 0.3";
        
        Node = "87.76031284169076 8.049226492304731 0.01 0.3";
        
        Node = "86.80231284169076 7.615226492304732 0.01 0.3";
        
        Node = "86.79298132677488 7.611027800224027 0.01 0.3";
        
        Node = "85.83298132677487 7.182027800224026 0.01 0.3";
        
        Node = "85.82910046572641 7.180298483458817 0.01 0.3";
        
        Node = "84.86810046572641 6.753298483458817 0.01 0.3";
        
        Node = "84.85254843763009 6.74646720211683 0.01 0.3";
        
        Node = "83.88754843763009 6.327467202116831 0.01 0.3";
        
        Node = "83.86481844922379 6.3177643839137945 0.01 0.3";
        
        Node = "82.89481844922379 5.9107643839137936 0.01 0.3";
        
        Node = "82.87360115860217 5.902004723138598 0.01 0.3";
        
        Node = "81.89860115860218 5.506004723138598 0.01 0.3";
        
        Node = "81.89599607455605 5.504948790310659 0.01 0.3";
        
        Node = "80.92199607455605 5.110948790310659 0.01 0.3";
        
        Node = "80.88319982551414 5.095723453260953 0.01 0.3";
        
        Node = "79.90019982551414 4.721723453260953 0.01 0.3";
        
        Node = "79.8770624874215 4.713083597866156 0.01 0.3";
        
        Node = "78.8890624874215 4.351083597866156 0.01 0.3";
        
        Node = "78.88341763526311 4.349024954665119 0.01 0.3";
        
        Node = "77.89441763526312 3.9900249546651194 0.01 0.3";
        
        Node = "77.86040557575699 3.9780247862809466 0.01 0.3";
        
        Node = "76.86540557575698 3.6370247862809464 0.01 0.3";
        
        Node = "76.84488724761651 3.630116748117316 0.01 0.3";
        
        Node = "75.84688724761651 3.300116748117316 0.01 0.3";
        
        Node = "75.80850784026008 3.2878536146407065 0.01 0.3";
        
        Node = "74.80350784026008 2.977853614640707 0.01 0.3";
        
        Node = "74.79549138491767 2.9753992659735586 0.01 0.3";
        
        Node = "73.78849138491766 2.6693992659735586 0.01 0.3";
        
        Node = "73.76020744610592 2.661031862497986 0.01 0.3";
        
        Node = "72.74920744610593 2.3700318624979855 0.01 0.3";
        
        Node = "72.72303974179077 2.362692064347136 0.01 0.3";
        
        Node = "71.70903974179078 2.085692064347136 0.01 0.3";
        
        Node = "71.66707125007267 2.0747149997093364 0.01 0.3";
        
        Node = "70.64707125007267 1.8197149997093365 0.01 0.3";
        
        Node = "70.64260030199851 1.8186027326384364 0.01 0.3";
        
        Node = "69.62060030199851 1.5656027326384367 0.01 0.3";
        
        Node = "69.59096965442095 1.5585066408141266 0.01 0.3";
        
        Node = "68.56696965442094 1.3215066408141265 0.01 0.3";
        
        Node = "68.54945831355228 1.3175364560605953 0.01 0.3";
        
        Node = "67.52245831355228 1.0895364560605951 0.01 0.3";
        
        Node = "67.48269516807945 1.0811317957009698 0.01 0.3";
        
        Node = "66.45352269429563 0.8744987190052848 0.01 0.3";
        
        Node = "65.42434953339651 0.6658690481731653 0.01 0.3";
        
        Node = "65.3712070935625 0.6558422711008003 0.01 0.3";
        
        Node = "64.3352070935625 0.47484227110080024 0.01 0.3";
        
        Node = "64.33119568924275 0.4741456438841929 0.01 0.3";
        
        Node = "63.29419568924275 0.29514564388419307 0.01 0.3";
        
        Node = "63.28310645969533 0.2932635913060242 0.01 0.3";
        
        Node = "62.24610645969533 0.12026359130602415 0.01 0.3";
        
        Node = "62.21368090586049 0.11512729426340496 0.01 0.3";
        
        Node = "61.17368090586049 -0.04087270573659496 0.01 0.3";
        
        Node = "61.143070155652346 -0.04522265960994876 0.01 0.3";
        
        Node = "60.10007015565235 -0.18522265960994888 0.01 0.3";
        
        Node = "60.09259707920157 -0.18621142358257448 0.01 0.3";
        
        Node = "59.04959707920156 -0.3222114235825744 0.01 0.3";
        
        Node = "59.04585638546459 -0.32269559731021324 0.01 0.3";
        
        Node = "58.00285638546459 -0.45669559731021336 0.01 0.3";
        
        Node = "57.976165644213495 -0.45994248502583535 0.01 0.3";
        
        Node = "56.9311656442135 -0.5799424850258352 0.01 0.3";
        
        Node = "56.90464411900649 -0.5828089479319607 0.01 0.3";
        
        Node = "55.86052672218146 -0.6886181678779004 0.01 0.3";
        
        Node = "54.816408960983516 -0.7964238258218561 0.01 0.3";
        
        Node = "54.799093909382705 -0.7981355255866263 0.01 0.3";
        
        Node = "53.75109390938271 -0.8971355255866262 0.01 0.3";
        
        Node = "53.7227928745471 -0.8996063395876266 0.01 0.3";
        
        Node = "52.680460703204474 -0.9831520479776844 0.01 0.3";
        
        Node = "51.638125857156346 -1.0726655366650237 0.01 0.3";
        
        Node = "51.60962924749756 -1.0749077416658346 0.01 0.3";
        
        Node = "50.56062924749756 -1.1499077416658348 0.01 0.3";
        
        Node = "50.547253042761 -1.1508190426331295 0.01 0.3";
        
        Node = "49.49826164975802 -1.218753723322846 0.01 0.3";
        
        Node = "48.45027019021857 -1.2876873846271573 0.01 0.3";
        
        Node = "48.44067894109277 -1.2882951273032108 0.01 0.3";
        
        Node = "47.390678941092766 -1.3522951273032109 0.01 0.3";
        
        Node = "47.37361847885919 -1.3532618691301317 0.01 0.3";
        
        Node = "46.323618478859196 -1.4082618691301316 0.01 0.3";
        
        Node = "45.272519208998894 -1.4632670665061909 0.01 0.3";
        
        Node = "45.253554345767505 -1.4641692755921094 0.01 0.3";
        
        Node = "44.2025543457675 -1.5091692755921096 0.01 0.3";
        
        Node = "43.15164520812569 -1.5532082015615494 0.01 0.3";
        
        Node = "42.101554345767504 -1.5981692755921095 0.01 0.3";
        
        Node = "42.084466031641504 -1.598827757089456 0.01 0.3";
        
        Node = "41.03346603164151 -1.634827757089456 0.01 0.3";
        
        Node = "41.027706798334144 -1.6350167226520846 0.01 0.3";
        
        Node = "39.97763662654948 -1.6679561862156715 0.01 0.3";
        
        Node = "38.928566334285385 -1.7028919238267501 0.01 0.3";
        
        Node = "38.92096579226034 -1.7031305698585848 0.01 0.3";
        
        Node = "37.86996579226034 -1.7341305698585847 0.01 0.3";
        
        Node = "37.856615507346866 -1.734479738704418 0.01 0.3";
        
        Node = "36.80463719704585 -1.758479243882388 0.01 0.3";
        
        Node = "35.75365888674229 -1.7824787485896052 0.01 0.3";
        
        Node = "34.700687348424374 -1.8055009340507187 0.01 0.3";
        
        Node = "33.65065888674229 -1.8294787485896054 0.01 0.3";
        
        Node = "33.64681595227423 -1.8295628087498026 0.01 0.3";
        
        Node = "32.59481595227423 -1.8515628087498026 0.01 0.3";
        
        Node = "32.581514211852664 -1.8517967246003835 0.01 0.3";
        
        Node = "31.52952777435231 -1.8667965312187345 0.01 0.3";
        
        Node = "30.478541336883723 -1.8817963376526343 0.01 0.3";
        
        Node = "29.425563918659776 -1.8958102744082665 0.01 0.3";
        
        Node = "28.37452777435231 -1.9107965312187345 0.01 0.3";
        
        Node = "27.32354133688372 -1.9257963376526344 0.01 0.3";
        
        Node = "27.312109640041292 -1.9259268137153565 0.01 0.3";
        
        Node = "26.260109640041293 -1.9349268137153566 0.01 0.3";
        
        Node = "26.254406658584244 -1.9349674717704641 0.01 0.3";
        
        Node = "25.203357177178823 -1.9409620505617498 0.01 0.3";
        
        Node = "24.152314020886394 -1.947955683730996 0.01 0.3";
        
        Node = "23.10132035156134 -1.954955641566653 0.01 0.3";
        
        Node = "22.049307690191057 -1.9619557258553946 0.01 0.3";
        
        Node = "20.99730768417922 -1.967956629419162 0.01 0.3";
        
        Node = "19.947208685727247 -1.9759421731336255 0.01 0.3";
        
        Node = "19.93960450776735 -1.9759855428131514 0.01 0.3";
        
        Node = "18.88760450776735 -1.9799855428131514 0.01 0.3";
        
        Node = "18.878097051289537 -1.9799990946963464 0.01 0.3";
        
        Node = "17.83280135459708 -1.9790045221971149 0.01 0.3";
        
        Node = "16.78745612968403 -1.983972893037956 0.01 0.3";
        
        Node = "15.736406658584244 -1.9899674717704645 0.01 0.3";
        
        Node = "15.725000000000001 -1.99 0.01 0.3";
        
        Node = "14.674902947849091 -1.99 0.01 0.3";
        
        Node = "13.630556839506923 -1.9919873379797186 0.01 0.3";
        
        Node = "12.583307690191056 -1.9989557258553947 0.01 0.3";
        
        Node = "12.573802274497481 -1.998996385673896 0.01 0.3";
        
        Node = "11.521802274497482 -2.0009963856738957 0.01 0.3";
        
        Node = "11.516098860174509 -2.0009990964166366 0.01 0.3";
        
        Node = "10.465049429872636 -2.0 0.01 0.3";
        
        Node = "1.0 -2.0 0.01 0.3";
        
    };
    
    new DecalRoad(road_0_separator_1) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_dashed_short";

        
        Node = "1.0 2.0 0.01 0.15";
        
        Node = "10.466 2.0 0.01 0.15";
        
        Node = "11.517049430731335 1.9990018071667264 0.01 0.15";
        
        Node = "12.561444969344125 2.0009873500157997 0.01 0.15";
        
        Node = "13.608692309808946 2.0079557258553944 0.01 0.15";
        
        Node = "13.618194107747302 2.007996378792762 0.01 0.15";
        
        Node = "14.669194107747302 2.0099963787927617 0.01 0.15";
        
        Node = "14.673 2.01 0.01 0.15";
        
        Node = "15.719296624327606 2.01 0.01 0.15";
        
        Node = "16.76559334141576 2.0159674717704643 0.01 0.15";
        
        Node = "17.819494403941146 2.020977410783323 0.01 0.15";
        
        Node = "17.830902948710463 2.0209990946963465 0.01 0.15";
        
        Node = "18.87714920436596 2.0200036177642287 0.01 0.15";
        
        Node = "19.920593362028157 2.023971086044313 0.01 0.15";
        
        Node = "20.96879131427275 2.0319421731336256 0.01 0.15";
        
        Node = "20.97259334141576 2.031967471770464 0.01 0.15";
        
        Node = "22.023642822821174 2.0379620505617497 0.01 0.15";
        
        Node = "23.07468597911361 2.044955683730996 0.01 0.15";
        
        Node = "24.125679648438663 2.0519556415666527 0.01 0.15";
        
        Node = "25.177692309808947 2.0589557258553945 0.01 0.15";
        
        Node = "26.22874182170233 2.0649512083500454 0.01 0.15";
        
        Node = "27.272174325079305 2.073877912276274 0.01 0.15";
        
        Node = "28.31745866311628 2.0887963376526346 0.01 0.15";
        
        Node = "29.369485788147333 2.1037967246003832 0.01 0.15";
        
        Node = "30.422422518642627 2.1178100939160935 0.01 0.15";
        
        Node = "31.47245866311628 2.1327963376526347 0.01 0.15";
        
        Node = "32.517834528938266 2.1477018872542466 0.01 0.15";
        
        Node = "33.56126254010255 2.169522625130306 0.01 0.15";
        
        Node = "34.610341113257704 2.1934787485896052 0.01 0.15";
        
        Node = "35.663312651575396 2.2165009340507136 0.01 0.15";
        
        Node = "36.713341113257705 2.2404787485896054 0.01 0.15";
        
        Node = "37.75870876730596 2.2643274407877527 0.01 0.15";
        
        Node = "38.79923370988507 2.2950184714442248 0.01 0.15";
        
        Node = "39.84643366571461 2.32989192382675 0.01 0.15";
        
        Node = "39.850293201665856 2.3300167226520845 0.01 0.15";
        
        Node = "40.89941344890163 2.362926388202256 0.01 0.15";
        
        Node = "41.9389884036964 2.398535045074389 0.01 0.15";
        
        Node = "42.981445654232495 2.4431692755921093 0.01 0.15";
        
        Node = "44.032354791874546 2.4872082015615598 0.01 0.15";
        
        Node = "45.07296108138991 2.5317631806559384 0.01 0.15";
        
        Node = "46.11443115601219 2.586264469051966 0.01 0.15";
        
        Node = "47.15584922506505 2.640814939335687 0.01 0.15";
        
        Node = "48.19252470425446 2.704002778067232 0.01 0.15";
        
        Node = "49.23672980978144 2.772687384627157 0.01 0.15";
        
        Node = "49.238746957239 2.7728190426331296 0.01 0.15";
        
        Node = "50.28205732761147 2.8403858094762993 0.01 0.15";
        
        Node = "51.31011443587788 2.9138884625935355 0.01 0.15";
        
        Node = "52.34387414284365 3.002665536665024 0.01 0.15";
        
        Node = "52.3552071254529 3.003606339587627 0.01 0.15";
        
        Node = "53.3890478337411 3.086471434526757 0.01 0.15";
        
        Node = "54.41424484195195 3.1833173351115605 0.01 0.15";
        
        Node = "55.45159103901648 3.290423825821856 0.01 0.15";
        
        Node = "55.45535588099351 3.2908089479319607 0.01 0.15";
        
        Node = "56.48808555996398 3.3954641544050665 0.01 0.15";
        
        Node = "57.506478072325564 3.5124087491260148 0.01 0.15";
        
        Node = "58.534273039384836 3.6444552741365066 0.01 0.15";
        
        Node = "59.571665450883295 3.7797240833060073 0.01 0.15";
        
        Node = "60.59560765710408 3.9171659901812803 0.01 0.15";
        
        Node = "61.60408523853886 4.068437627396497 0.01 0.15";
        
        Node = "62.61934627940024 4.23781097365399 0.01 0.15";
        
        Node = "63.648798254062605 4.415508084034474 0.01 0.15";
        
        Node = "64.65615389921012 4.591503616632641 0.01 0.15";
        
        Node = "65.6606504666035 4.795130951826835 0.01 0.15";
        
        Node = "65.66430483192056 4.79586820429903 0.01 0.15";
        
        Node = "66.67538055954174 4.9988678896701115 0.01 0.15";
        
        Node = "67.67377710496181 5.22051775564458 0.01 0.15";
        
        Node = "68.67418799509247 5.45205816673927 0.01 0.15";
        
        Node = "69.67916358340675 5.700843708660513 0.01 0.15";
        
        Node = "70.67588497702575 5.950024057065265 0.01 0.15";
        
        Node = "71.655851470723 6.217726935521023 0.01 0.15";
        
        Node = "72.63961973337646 6.500888720320391 0.01 0.15";
        
        Node = "73.62849781532275 6.801381960713201 0.01 0.15";
        
        Node = "74.61024069121477 7.104208121436115 0.01 0.15";
        
        Node = "75.57883489315537 7.4244847613563545 0.01 0.15";
        
        Node = "76.54653429111998 7.756128474628646 0.01 0.15";
        
        Node = "77.51575839248015 8.107949963393358 0.01 0.15";
        
        Node = "78.489342169798 8.464667906094835 0.01 0.15";
        
        Node = "79.44132272764818 8.826866002367442 0.01 0.15";
        
        Node = "80.3947010123963 9.212524158620784 0.01 0.15";
        
        Node = "81.35776506156442 9.603676326282915 0.01 0.15";
        
        Node = "82.30578658119518 10.001454427818706 0.01 0.15";
        
        Node = "83.251661043477 10.412150178799102 0.01 0.15";
        
        Node = "84.20295818532763 10.834838919246781 0.01 0.15";
        
        Node = "85.15634754530527 11.26088478948678 0.01 0.15";
        
        Node = "86.10968715830924 11.692773507695268 0.01 0.15";
        
        Node = "87.06768715830924 12.126773507695269 0.01 0.15";
        
        Node = "87.07772661571619 12.131288396962105 0.01 0.15";
        
        Node = "88.03837261382728 12.560130366982559 0.01 0.15";
        
        Node = "88.99255712096839 12.986531568611246 0.01 0.15";
        
        Node = "89.94511026634221 13.419058309986623 0.01 0.15";
        
        Node = "89.948265907508 13.420487899785998 0.01 0.15";
        
        Node = "90.906265907508 13.853487899785998 0.01 0.15";
        
        Node = "90.91401867322512 13.856972199775969 0.01 0.15";
        
        Node = "91.87401867322511 14.28597219977597 0.01 0.15";
        
        Node = "92.8287604839661 14.712178646160034 0.01 0.15";
        
        Node = "93.7788182780269 15.145015843872168 0.01 0.15";
        
        Node = "93.78655913394536 15.14852266330183 0.01 0.15";
        
        Node = "94.74555913394535 15.58052266330183 0.01 0.15";
        
        Node = "94.74943415081188 15.582263291210698 0.01 0.15";
        
        Node = "95.70943415081189 16.012263291210697 0.01 0.15";
        
        Node = "96.66440769305453 16.43901791801224 0.01 0.15";
        
        Node = "97.6148182780269 16.87201584387217 0.01 0.15";
        
        Node = "97.62255913394537 16.875522663301833 0.01 0.15";
        
        Node = "98.58155913394538 17.307522663301835 0.01 0.15";
        
        Node = "98.58701867322512 17.309972199775967 0.01 0.15";
        
        Node = "99.54701867322511 17.73897219977597 0.01 0.15";
        
        Node = "100.5017604839659 18.165178646159948 0.01 0.15";
        
        Node = "101.4518182780269 18.59801584387217 0.01 0.15";
        
        Node = "101.45955913394536 18.60152266330183 0.01 0.15";
        
        Node = "102.41855913394535 19.03352266330183 0.01 0.15";
        
    };
    
    new DecalRoad(road_1) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "103.24 17.21 0.01 11.999999999999998";
        
        Node = "103.432 16.748 0.01 12.000000000000002";
        
        Node = "103.621 16.286 0.01 11.999999999999998";
        
        Node = "103.81 15.822 0.01 11.999999999999998";
        
        Node = "103.998 15.359 0.01 12.0";
        
        Node = "104.185 14.895 0.01 12.000000000000002";
        
        Node = "104.372 14.432 0.01 12.0";
        
        Node = "104.56 13.968 0.01 12.0";
        
        Node = "104.747 13.505 0.01 12.000000000000002";
        
        Node = "104.936 13.041 0.01 12.000000000000002";
        
        Node = "105.125 12.578 0.01 11.999999999999998";
        
        Node = "105.314 12.116 0.01 12.0";
        
        Node = "105.504 11.653 0.01 11.999999999999996";
        
        Node = "105.694 11.191 0.01 11.999999999999998";
        
        Node = "105.884 10.728 0.01 12.0";
        
        Node = "106.073 10.265 0.01 12.000000000000002";
        
        Node = "106.262 9.802 0.01 11.999999999999998";
        
        Node = "106.452 9.339 0.01 12.0";
        
        Node = "106.641 8.877 0.01 12.0";
        
        Node = "106.83 8.414 0.01 11.999999999999998";
        
        Node = "107.02 7.951 0.01 11.999999999999998";
        
        Node = "107.209 7.488 0.01 12.0";
        
        Node = "107.399 7.026 0.01 11.999999999999996";
        
        Node = "107.59 6.563 0.01 12.0";
        
        Node = "107.78 6.101 0.01 11.999999999999998";
        
        Node = "107.971 5.639 0.01 12.0";
        
        Node = "108.161 5.176 0.01 11.999999999999998";
        
        Node = "108.351 4.714 0.01 11.999999999999998";
        
        Node = "108.54 4.251 0.01 11.999999999999996";
        
        Node = "108.728 3.788 0.01 11.999999999999998";
        
        Node = "108.916 3.324 0.01 11.999999999999996";
        
        Node = "109.103 2.861 0.01 11.999999999999998";
        
        Node = "109.29 2.397 0.01 12.0";
        
        Node = "109.478 1.933 0.01 12.000000000000002";
        
        Node = "109.666 1.47 0.01 12.0";
        
        Node = "109.855 1.007 0.01 12.0";
        
        Node = "110.045 0.545 0.01 12.000000000000004";
        
        Node = "110.235 0.082 0.01 12.0";
        
        Node = "110.425 -0.381 0.01 12.0";
        
        Node = "110.614 -0.843 0.01 11.999999999999996";
        
        Node = "110.804 -1.306 0.01 11.999999999999998";
        
        Node = "110.993 -1.769 0.01 11.999999999999998";
        
        Node = "111.182 -2.232 0.01 12.000000000000004";
        
        Node = "111.371 -2.695 0.01 12.000000000000004";
        
        Node = "111.56 -3.158 0.01 12.000000000000005";
        
        Node = "111.75 -3.62 0.01 12.000000000000007";
        
        Node = "111.94 -4.083 0.01 12.000000000000009";
        
        Node = "112.131 -4.545 0.01 12.000000000000002";
        
        Node = "112.321 -5.007 0.01 12.000000000000002";
        
        Node = "112.512 -5.47 0.01 12.000000000000002";
        
        Node = "112.701 -5.933 0.01 11.999999999999998";
        
        Node = "112.889 -6.396 0.01 11.999999999999998";
        
        Node = "113.076 -6.86 0.01 11.999999999999998";
        
        Node = "113.263 -7.323 0.01 12.0";
        
        Node = "113.45 -7.787 0.01 12.000000000000002";
        
        Node = "113.639 -8.25 0.01 11.999999999999996";
        
        Node = "113.828 -8.713 0.01 11.999999999999998";
        
        Node = "114.018 -9.176 0.01 11.999999999999998";
        
        Node = "114.208 -9.638 0.01 11.999999999999998";
        
        Node = "114.397 -10.101 0.01 12.000000000000002";
        
        Node = "114.587 -10.564 0.01 11.999999999999998";
        
        Node = "114.776 -11.026 0.01 12.000000000000002";
        
        Node = "114.966 -11.489 0.01 12.000000000000002";
        
        Node = "115.155 -11.952 0.01 12.0";
        
        Node = "115.344 -12.415 0.01 12.000000000000002";
        
        Node = "115.533 -12.878 0.01 11.999999999999998";
        
        Node = "115.723 -13.34 0.01 12.000000000000002";
        
        Node = "115.913 -13.803 0.01 11.999999999999998";
        
        Node = "116.103 -14.266 0.01 12.000000000000002";
        
        Node = "116.293 -14.728 0.01 12.000000000000002";
        
        Node = "116.482 -15.191 0.01 12.000000000000007";
        
        Node = "116.67 -15.654 0.01 12.000000000000002";
        
        Node = "116.857 -16.118 0.01 12.000000000000004";
        
        Node = "117.044 -16.582 0.01 12.0";
        
        Node = "117.231 -17.045 0.01 11.999999999999998";
        
        Node = "117.419 -17.509 0.01 11.999999999999996";
        
        Node = "117.609 -17.972 0.01 12.000000000000002";
        
        Node = "117.799 -18.434 0.01 11.999999999999996";
        
        Node = "117.99 -18.896 0.01 11.999999999999998";
        
        Node = "118.181 -19.358 0.01 11.999999999999998";
        
        Node = "118.371 -19.821 0.01 12.0";
        
        Node = "118.56 -20.284 0.01 11.999999999999998";
        
        Node = "118.749 -20.746 0.01 12.0";
        
        Node = "118.938 -21.209 0.01 12.0";
        
        Node = "119.128 -21.672 0.01 12.000000000000002";
        
        Node = "119.317 -22.135 0.01 12.0";
        
        Node = "119.506 -22.598 0.01 11.999999999999998";
        
        Node = "119.696 -23.061 0.01 12.0";
        
        Node = "119.886 -23.523 0.01 12.0";
        
        Node = "120.076 -23.986 0.01 12.000000000000002";
        
        Node = "120.265 -24.448 0.01 12.000000000000002";
        
        Node = "120.454 -24.911 0.01 12.000000000000002";
        
        Node = "120.643 -25.375 0.01 12.0";
        
        Node = "120.83 -25.838 0.01 12.0";
        
        Node = "121.018 -26.302 0.01 12.000000000000002";
        
        Node = "121.205 -26.765 0.01 12.000000000000002";
        
        Node = "121.392 -27.229 0.01 12.000000000000004";
        
        Node = "121.58 -27.692 0.01 12.000000000000004";
        
        Node = "121.769 -28.156 0.01 12.000000000000002";
        
        Node = "121.958 -28.618 0.01 12.0";
        
        Node = "122.15 -29.08 0.01 12.0";
        
    };
    
    new DecalRoad(road_1_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "108.57281599650786 19.426235219328028 0.01 0.15";
        
        Node = "108.76481599650786 18.964235219328025 0.01 0.15";
        
        Node = "108.77703367208781 18.934604684035843 0.01 0.15";
        
        Node = "108.9660336720878 18.472604684035844 0.01 0.15";
        
        Node = "108.96933253262563 18.464523380746293 0.01 0.15";
        
        Node = "109.15833253262564 18.00052338074629 0.01 0.15";
        
        Node = "109.16072219651439 17.99464745776397 0.01 0.15";
        
        Node = "109.34872219651439 17.531647457763974 0.01 0.15";
        
        Node = "109.35436188010613 17.51770618874964 0.01 0.15";
        
        Node = "109.4929757426553 17.173765909483205 0.01 0.15";
        
        Node = "109.54055388093406 17.055711063700645 0.01 0.15";
        
        Node = "109.72555050534997 16.597671293087974 0.01 0.15";
        
        Node = "109.91235336673506 16.136625933073717 0.01 0.15";
        
        Node = "109.91474438115418 16.130715333209114 0.01 0.15";
        
        Node = "110.09855013084022 15.675624092007835 0.01 0.15";
        
        Node = "110.28351086842781 15.221540588089102 0.01 0.15";
        
        Node = "110.47086144357493 14.762581242622888 0.01 0.15";
        
        Node = "110.65783890693854 14.305525221067391 0.01 0.15";
        
        Node = "110.84580784215491 13.847474605250676 0.01 0.15";
        
        Node = "111.03497319073918 13.387504126061541 0.01 0.15";
        
        Node = "111.22664095093128 12.920444450706112 0.01 0.15";
        
        Node = "111.23068768281787 12.910557175059486 0.01 0.15";
        
        Node = "111.41968768281787 12.447557175059487 0.01 0.15";
        
        Node = "111.60666888957584 11.989502684430157 0.01 0.15";
        
        Node = "111.79464095093128 11.531444450706122 0.01 0.15";
        
        Node = "111.79703367208775 11.525604684035985 0.01 0.15";
        
        Node = "111.98603367208776 11.063604684035985 0.01 0.15";
        
        Node = "112.17466888957593 10.601502684429947 0.01 0.15";
        
        Node = "112.36264095093128 10.143444450706117 0.01 0.15";
        
        Node = "112.36668768281781 10.133557175059627 0.01 0.15";
        
        Node = "112.55283953687294 9.677534379146836 0.01 0.15";
        
        Node = "112.73877922891408 9.22540733849939 0.01 0.15";
        
        Node = "112.86132727552776 8.928340607702914 0.01 0.15";
        
        Node = "112.92858211157504 8.76530925121133 0.01 0.15";
        
        Node = "112.93097319073918 8.759504126061541 0.01 0.15";
        
        Node = "113.11894146090212 8.302444437560084 0.01 0.15";
        
        Node = "113.3079005951384 7.845380981972832 0.01 0.15";
        
        Node = "113.31364095093129 7.831444450706117 0.01 0.15";
        
        Node = "113.50280784215374 7.370474605253494 0.01 0.15";
        
        Node = "113.69197319073918 6.910504126061541 0.01 0.15";
        
        Node = "113.69768768281781 6.896557175059624 0.01 0.15";
        
        Node = "113.88668768281782 6.433557175059624 0.01 0.15";
        
        Node = "113.89072219651445 6.423647457763827 0.01 0.15";
        
        Node = "114.07872219651443 5.960647457763827 0.01 0.15";
        
        Node = "114.26835336673506 5.492625933073716 0.01 0.15";
        
        Node = "114.27074438115417 5.486715333209111 0.01 0.15";
        
        Node = "114.45774438115417 5.023715333209111 0.01 0.15";
        
        Node = "114.55555735126394 4.781015900890202 0.01 0.15";
        
        Node = "114.64436221787112 4.5606679175038645 0.01 0.15";
        
        Node = "114.82953853714083 4.103637001859457 0.01 0.15";
        
        Node = "115.01470952968069 3.6476041851256937 0.01 0.15";
        
        Node = "115.19883953687254 3.1965343791477916 0.01 0.15";
        
        Node = "115.38597319073918 2.741504126061541 0.01 0.15";
        
        Node = "115.76764095093128 1.811444450706117 0.01 0.15";
        
        Node = "115.77003367208775 1.8056046840359825 0.01 0.15";
        
        Node = "115.95783890693954 1.3465252210649352 0.01 0.15";
        
        Node = "116.12316586750667 0.9436495224197752 0.01 0.15";
        
        Node = "116.14664095093129 0.8864444507061169 0.01 0.15";
        
        Node = "116.15068768281787 0.8765571750594834 0.01 0.15";
        
        Node = "116.3034107611205 0.5024260361488142 0.01 0.15";
        
        Node = "116.33968768281787 0.41355717505948353 0.01 0.15";
        
        Node = "116.52868768281782 -0.04944282494037777 0.01 0.15";
        
        Node = "116.71768768281787 -0.512442824940516 0.01 0.15";
        
        Node = "116.90383953687267 -0.9684656208525075 0.01 0.15";
        
        Node = "116.97090683104727 -1.1315450414244392 0.01 0.15";
        
        Node = "117.09097319073918 -1.4234958739384607 0.01 0.15";
        
        Node = "117.27977986644429 -1.8835835381492714 0.01 0.15";
        
        Node = "117.4679005951384 -2.338619018027168 0.01 0.15";
        
        Node = "117.47197319073918 -2.3484958739384587 0.01 0.15";
        
        Node = "117.66077922891449 -2.807592661501612 0.01 0.15";
        
        Node = "117.85058211157504 -3.26769074878867 0.01 0.15";
        
        Node = "117.85868768281787 -3.287442824940517 0.01 0.15";
        
        Node = "118.04768768281787 -3.7504428249405173 0.01 0.15";
        
        Node = "118.05172219651439 -3.7603525422360304 0.01 0.15";
        
        Node = "118.23972219651438 -4.2233525422360305 0.01 0.15";
        
        Node = "118.24536188010612 -4.237293811250362 0.01 0.15";
        
        Node = "118.43155388093476 -4.699288936301117 0.01 0.15";
        
        Node = "118.61774438115413 -5.16028466679075 0.01 0.15";
        
        Node = "118.69488046542841 -5.351679337326235 0.01 0.15";
        
        Node = "118.8015513565771 -5.616357538964422 0.01 0.15";
        
        Node = "118.98568768281787 -6.0674428249405175 0.01 0.15";
        
        Node = "119.17266888957695 -6.5254973155725375 0.01 0.15";
        
        Node = "119.3598078421529 -6.981525394744455 0.01 0.15";
        
        Node = "119.49224016438136 -7.3035450414262995 0.01 0.15";
        
        Node = "119.54897319073918 -7.441495873938459 0.01 0.15";
        
        Node = "119.55468768281781 -7.455442824940381 0.01 0.15";
        
        Node = "119.74166888957579 -7.913497315569679 0.01 0.15";
        
        Node = "119.92964095093129 -8.37155554929388 0.01 0.15";
        
        Node = "119.93203367208781 -8.377395315964158 0.01 0.15";
        
        Node = "120.11983890693998 -8.836474778936122 0.01 0.15";
        
        Node = "120.30864095093128 -9.296555549293888 0.01 0.15";
        
        Node = "120.31268768281781 -9.306442824940374 0.01 0.15";
        
        Node = "120.50168768281782 -9.769442824940374 0.01 0.15";
        
        Node = "120.69068768281787 -10.232442824940513 0.01 0.15";
        
        Node = "120.87683953687234 -10.688465620851733 0.01 0.15";
        
        Node = "121.06397319073918 -11.143495873938459 0.01 0.15";
        
        Node = "121.25564095093128 -11.610555549293888 0.01 0.15";
        
        Node = "121.44480784215415 -12.071525394747503 0.01 0.15";
        
        Node = "121.63397319073913 -12.531495873938319 0.01 0.15";
        
        Node = "121.63968768281788 -12.54544282494052 0.01 0.15";
        
        Node = "121.82868768281787 -13.008442824940522 0.01 0.15";
        
        Node = "121.83272219651438 -13.018352542236029 0.01 0.15";
        
        Node = "122.02072219651438 -13.481352542236028 0.01 0.15";
        
        Node = "122.02636188010612 -13.495293811250356 0.01 0.15";
        
        Node = "122.21336188010612 -13.959293811250355 0.01 0.15";
        
        Node = "122.3726390762699 -14.354505677667454 0.01 0.15";
        
        Node = "122.39955388093405 -14.421288936299362 0.01 0.15";
        
        Node = "122.58455050534837 -14.879328706908112 0.01 0.15";
        
        Node = "122.76652368160501 -15.328453992988289 0.01 0.15";
        
        Node = "122.95080784215213 -15.777525394742586 0.01 0.15";
        
        Node = "123.13794146090251 -16.232555562440858 0.01 0.15";
        
        Node = "123.29820157194949 -16.620200438376504 0.01 0.15";
        
        Node = "123.32690059513845 -16.689619018027308 0.01 0.15";
        
        Node = "123.5179005951384 -17.15161901802717 0.01 0.15";
        
        Node = "123.52364095093128 -17.165555549293888 0.01 0.15";
        
        Node = "123.71364095093128 -17.62855554929389 0.01 0.15";
        
        Node = "123.71768768281781 -17.638442824940366 0.01 0.15";
        
        Node = "123.90586144357812 -18.099418757384917 0.01 0.15";
        
        Node = "124.0940336720878 -18.559395315964156 0.01 0.15";
        
        Node = "124.28266888957654 -19.021497315571533 0.01 0.15";
        
        Node = "124.47064095093128 -19.479555549293888 0.01 0.15";
        
        Node = "124.47468768281787 -19.48944282494052 0.01 0.15";
        
        Node = "124.66368768281787 -19.952442824940523 0.01 0.15";
        
        Node = "124.85066888957763 -20.41049731557421 0.01 0.15";
        
        Node = "125.0378078421529 -20.866525394744457 0.01 0.15";
        
        Node = "125.22697319073917 -21.32649587393846 0.01 0.15";
        
        Node = "125.41864095093128 -21.793555549293888 0.01 0.15";
        
        Node = "125.42103367208775 -21.799395315964016 0.01 0.15";
        
        Node = "125.61003367208775 -22.261395315964016 0.01 0.15";
        
        Node = "125.80068768281787 -22.728442824940522 0.01 0.15";
        
        Node = "125.99133253262563 -23.196476619253694 0.01 0.15";
        
        Node = "125.99774438115418 -23.212284666790893 0.01 0.15";
        
        Node = "126.18355050534817 -23.67232870690755 0.01 0.15";
        
        Node = "126.37035336673506 -24.133374066926276 0.01 0.15";
        
        Node = "126.37274438115418 -24.139284666790893 0.01 0.15";
        
        Node = "126.55974438115418 -24.602284666790894 0.01 0.15";
        
        Node = "126.61620211003745 -24.742370978201564 0.01 0.15";
        
        Node = "126.74555111449565 -25.063319505136704 0.01 0.15";
        
        Node = "126.92952897810012 -25.516413924545578 0.01 0.15";
        
        Node = "127.11568615600203 -25.973434721087795 0.01 0.15";
        
        Node = "127.29696594597465 -26.416563096576418 0.01 0.15";
        
        Node = "127.48281599650787 -26.86376478067197 0.01 0.15";
        
    };
    
    new DecalRoad(road_1_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "116.81718400349214 -31.296235219328025 0.01 0.15";
        
        Node = "116.62518400349214 -30.834235219328022 0.01 0.15";
        
        Node = "116.61296632791219 -30.80460468403584 0.01 0.15";
        
        Node = "116.4239663279122 -30.34260468403584 0.01 0.15";
        
        Node = "116.42066746737437 -30.334523380746305 0.01 0.15";
        
        Node = "116.23166746737436 -29.870523380746306 0.01 0.15";
        
        Node = "116.2292778034856 -29.864647457763965 0.01 0.15";
        
        Node = "116.0412778034856 -29.401647457763964 0.01 0.15";
        
        Node = "116.03563811989387 -29.387706188749643 0.01 0.15";
        
        Node = "115.89702425734424 -29.04376590948212 0.01 0.15";
        
        Node = "115.84944611906329 -28.925711063694067 0.01 0.15";
        
        Node = "115.66444949465183 -28.46767129309245 0.01 0.15";
        
        Node = "115.47764663326494 -28.006625933073725 0.01 0.15";
        
        Node = "115.47525561884582 -28.000715333209108 0.01 0.15";
        
        Node = "115.29144986916054 -27.545624092009717 0.01 0.15";
        
        Node = "115.10648913157084 -27.091540588085813 0.01 0.15";
        
        Node = "114.9191385564257 -26.632581242624422 0.01 0.15";
        
        Node = "114.73216109305963 -26.175525221062937 0.01 0.15";
        
        Node = "114.54419215784709 -25.717474605255543 0.01 0.15";
        
        Node = "114.35502680926082 -25.25750412606154 0.01 0.15";
        
        Node = "114.16335904906872 -24.79044445070611 0.01 0.15";
        
        Node = "114.15931231718218 -24.780557175059634 0.01 0.15";
        
        Node = "113.97031231718218 -24.317557175059637 0.01 0.15";
        
        Node = "113.78333111042366 -23.859502684428936 0.01 0.15";
        
        Node = "113.59535904906872 -23.401444450706112 0.01 0.15";
        
        Node = "113.59131231718219 -23.39155717505962 0.01 0.15";
        
        Node = "113.40313855642455 -22.930581242621635 0.01 0.15";
        
        Node = "113.2149663279122 -22.47060468403584 0.01 0.15";
        
        Node = "113.02633111042236 -22.00850268442579 0.01 0.15";
        
        Node = "112.84122013355592 -21.557416461851265 0.01 0.15";
        
        Node = "112.65309940486159 -21.102380981972832 0.01 0.15";
        
        Node = "112.63434410776992 -21.057014765970994 0.01 0.15";
        
        Node = "112.46209940486155 -20.640380981972694 0.01 0.15";
        
        Node = "112.45802680926089 -20.630504126061684 0.01 0.15";
        
        Node = "112.26802680926087 -20.168504126061684 0.01 0.15";
        
        Node = "112.07635904906871 -19.701444450706113 0.01 0.15";
        
        Node = "112.06664663326494 -19.677625933073724 0.01 0.15";
        
        Node = "111.87864663326494 -19.213625933073725 0.01 0.15";
        
        Node = "111.87625561884582 -19.20771533320911 0.01 0.15";
        
        Node = "111.68925561884582 -18.744715333209108 0.01 0.15";
        
        Node = "111.6534760315579 -18.655936857570428 0.01 0.15";
        
        Node = "111.50063811989388 -18.27670618874963 0.01 0.15";
        
        Node = "111.31644888550284 -17.819680494859565 0.01 0.15";
        
        Node = "111.13329047032103 -17.36860418512992 0.01 0.15";
        
        Node = "110.94916046312794 -16.917534379148933 0.01 0.15";
        
        Node = "110.76202680926087 -16.46250412606168 0.01 0.15";
        
        Node = "110.57035904906871 -15.99544445070612 0.01 0.15";
        
        Node = "110.3811921578471 -15.534474605255545 0.01 0.15";
        
        Node = "110.19202680926082 -15.07450412606154 0.01 0.15";
        
        Node = "110.18631231718219 -15.06055717505962 0.01 0.15";
        
        Node = "109.99731231718218 -14.597557175059618 0.01 0.15";
        
        Node = "109.80831231718213 -14.134557175059486 0.01 0.15";
        
        Node = "109.62133111042304 -13.676502684427462 0.01 0.15";
        
        Node = "109.43335904906871 -13.218444450706112 0.01 0.15";
        
        Node = "109.43096632791219 -13.212604684035842 0.01 0.15";
        
        Node = "109.24316109306096 -12.75352522106617 0.01 0.15";
        
        Node = "109.05435904906872 -12.293444450706122 0.01 0.15";
        
        Node = "109.05031231718219 -12.28355717505962 0.01 0.15";
        
        Node = "108.86416046312766 -11.827534379148267 0.01 0.15";
        
        Node = "108.8393153911743 -11.767121625240627 0.01 0.15";
        
        Node = "108.67702680926082 -11.372504126061541 0.01 0.15";
        
        Node = "108.48535904906872 -10.905444450706112 0.01 0.15";
        
        Node = "108.48131231718219 -10.895557175059626 0.01 0.15";
        
        Node = "108.29231231718218 -10.432557175059626 0.01 0.15";
        
        Node = "108.10331231718213 -9.969557175059482 0.01 0.15";
        
        Node = "108.09363811989388 -9.945706188749641 0.01 0.15";
        
        Node = "107.97568759096089 -9.653037496637817 0.01 0.15";
        
        Node = "107.90744611906457 -9.48371106369724 0.01 0.15";
        
        Node = "107.72125561884587 -9.022715333209252 0.01 0.15";
        
        Node = "107.53544888550304 -8.561680494860095 0.01 0.15";
        
        Node = "107.35229047031919 -8.110604185125416 0.01 0.15";
        
        Node = "107.16934684661908 -7.662440704844175 0.01 0.15";
        
        Node = "106.98241788842496 -7.209309251211329 0.01 0.15";
        
        Node = "106.98002680926082 -7.2035041260615404 0.01 0.15";
        
        Node = "106.79205853909788 -6.746444437560083 0.01 0.15";
        
        Node = "106.6030994048616 -6.2893809819728315 0.01 0.15";
        
        Node = "106.59735904906871 -6.275444450706117 0.01 0.15";
        
        Node = "106.40819215784609 -5.814474605253081 0.01 0.15";
        
        Node = "106.31798205784104 -5.595121625240793 0.01 0.15";
        
        Node = "106.21902680926082 -5.354504126061539 0.01 0.15";
        
        Node = "106.21331231718219 -5.340557175059624 0.01 0.15";
        
        Node = "106.02431231718218 -4.877557175059623 0.01 0.15";
        
        Node = "105.83531231718213 -4.414557175059484 0.01 0.15";
        
        Node = "105.64631231718218 -3.951557175059622 0.01 0.15";
        
        Node = "105.45933111042366 -3.493502684428943 0.01 0.15";
        
        Node = "105.27135904906872 -3.035444450706117 0.01 0.15";
        
        Node = "105.26896632791225 -3.0296046840359825 0.01 0.15";
        
        Node = "105.08116109306046 -2.5705252210649356 0.01 0.15";
        
        Node = "104.70319215784635 -1.6494746052536997 0.01 0.15";
        
        Node = "104.51402680926083 -1.1895041260615413 0.01 0.15";
        
        Node = "104.50831231718219 -1.1755571750596239 0.01 0.15";
        
        Node = "104.31931231718218 -0.7125571750596238 0.01 0.15";
        
        Node = "104.3152778034856 -0.7026474577639694 0.01 0.15";
        
        Node = "104.12727780348561 -0.23964745776396934 0.01 0.15";
        
        Node = "103.93764663326489 0.22837406692642315 0.01 0.15";
        
        Node = "103.93363811989394 0.2382938112502213 0.01 0.15";
        
        Node = "103.83635092457688 0.4796909162080722 0.01 0.15";
        
        Node = "103.74744611906536 0.7002889363008004 0.01 0.15";
        
        Node = "103.56244949465042 1.1583287069110462 0.01 0.15";
        
        Node = "103.37646146285864 1.6173629981418214 0.01 0.15";
        
        Node = "103.19129047032217 2.0733958148673035 0.01 0.15";
        
        Node = "103.00716046312743 2.5244656208522676 0.01 0.15";
        
        Node = "102.82002680926082 2.979495873938459 0.01 0.15";
        
        Node = "102.63122013355571 3.439583538149271 0.01 0.15";
        
        Node = "102.4430994048616 3.8946190180271683 0.01 0.15";
        
        Node = "102.43902680926082 3.9044958739384588 0.01 0.15";
        
        Node = "102.25022077108544 4.363592661501754 0.01 0.15";
        
        Node = "102.20002457202028 4.48527245295289 0.01 0.15";
        
        Node = "102.06041788842496 4.82369074878867 0.01 0.15";
        
        Node = "102.05802680926082 4.829495873938463 0.01 0.15";
        
        Node = "101.86802680926083 5.291495873938462 0.01 0.15";
        
        Node = "101.86231231718219 5.305442824940373 0.01 0.15";
        
        Node = "101.67533111042333 5.76349731557186 0.01 0.15";
        
        Node = "101.48735904906871 6.221555549293883 0.01 0.15";
        
        Node = "101.48331231718213 6.231442824940521 0.01 0.15";
        
        Node = "101.2951385564257 6.69241875737558 0.01 0.15";
        
        Node = "101.10816109306069 7.14947477893449 0.01 0.15";
        
        Node = "100.91935904906872 7.609555549293879 0.01 0.15";
        
        Node = "100.91531231718218 7.61944282494038 0.01 0.15";
        
        Node = "100.72631231718218 8.082442824940381 0.01 0.15";
        
        Node = "100.5393311104231 8.540497315572404 0.01 0.15";
        
        Node = "100.3521921578471 8.996525394744456 0.01 0.15";
        
        Node = "100.16302680926083 9.45649587393846 0.01 0.15";
        
        Node = "99.97135904906877 9.923555549293738 0.01 0.15";
        
        Node = "99.96896632791218 9.929395315964157 0.01 0.15";
        
        Node = "99.77996632791219 10.391395315964157 0.01 0.15";
        
        Node = "99.58931231718213 10.858442824940521 0.01 0.15";
        
        Node = "99.39866746737437 11.326476619253704 0.01 0.15";
        
        Node = "99.39225561884582 11.342284666790887 0.01 0.15";
        
        Node = "99.2064494946498 11.802328706912585 0.01 0.15";
        
        Node = "99.01964663326494 12.263374066926286 0.01 0.15";
        
        Node = "99.01725561884582 12.269284666790886 0.01 0.15";
        
        Node = "98.83025561884583 12.732284666790886 0.01 0.15";
        
        Node = "98.77379788996232 12.872370978202127 0.01 0.15";
        
        Node = "98.64444888550322 13.193319505139495 0.01 0.15";
        
        Node = "98.46047102190141 13.646413924541822 0.01 0.15";
        
        Node = "98.27431384399948 14.103434721084112 0.01 0.15";
        
        Node = "98.09303405402541 14.546563096576316 0.01 0.15";
        
        Node = "97.90718400349213 14.993764780671976 0.01 0.15";
        
    };
    
    new DecalRoad(road_1_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "120.30313731722673 -29.847527348685027 0.01 0.3";
        
        Node = "120.11113731722672 -29.385527348685027 0.01 0.3";
        
        Node = "120.10690608758864 -29.375265691440983 0.01 0.3";
        
        Node = "119.91790608758865 -28.913265691440984 0.01 0.3";
        
        Node = "119.91676362506472 -28.91046697168703 0.01 0.3";
        
        Node = "119.72776362506471 -28.44646697168703 0.01 0.3";
        
        Node = "119.72693603583917 -28.444432020004836 0.01 0.3";
        
        Node = "119.53893603583917 -27.981432020004835 0.01 0.3";
        
        Node = "119.53698289866455 -27.97660387489165 0.01 0.3";
        
        Node = "119.40050800444772 -27.63797098228944 0.01 0.3";
        
        Node = "119.35026272521792 -27.51329820387967 0.01 0.3";
        
        Node = "119.16395653494405 -27.052016032239035 0.01 0.3";
        
        Node = "118.97637112840344 -26.589039284181375 0.01 0.3";
        
        Node = "118.97554307146176 -26.586992323189303 0.01 0.3";
        
        Node = "118.78964930533749 -26.126731287277334 0.01 0.3";
        
        Node = "118.60204818408947 -25.666165571620834 0.01 0.3";
        
        Node = "118.41361941348453 -25.204564932519816 0.01 0.3";
        
        Node = "118.2253198590704 -24.744277132840846 0.01 0.3";
        
        Node = "118.0360232581224 -24.282991205267564 0.01 0.3";
        
        Node = "117.84631231489553 -23.821694069631704 0.01 0.3";
        
        Node = "117.6557347356082 -23.357288121456662 0.01 0.3";
        
        Node = "117.6543332700198 -23.353863956730606 0.01 0.3";
        
        Node = "117.4653332700198 -22.890863956730612 0.01 0.3";
        
        Node = "117.27703241919714 -22.429576687254947 0.01 0.3";
        
        Node = "117.08773473560821 -21.968288121456663 0.01 0.3";
        
        Node = "117.08633327001981 -21.964863956730603 0.01 0.3";
        
        Node = "116.89761941347886 -21.502564932505972 0.01 0.3";
        
        Node = "116.70890608758864 -21.041265691440984 0.01 0.3";
        
        Node = "116.52003241919543 -20.578576687250813 0.01 0.3";
        
        Node = "116.33172558737758 -20.11970267076834 0.01 0.3";
        
        Node = "116.1417227376144 -19.660114625791458 0.01 0.3";
        
        Node = "116.11971743480758 -19.60688713942103 0.01 0.3";
        
        Node = "115.9507227376144 -19.19811462579141 0.01 0.3";
        
        Node = "115.94931231489555 -19.19469406963175 0.01 0.3";
        
        Node = "115.75931231489554 -18.73269406963175 0.01 0.3";
        
        Node = "115.5687347356082 -18.268288121456663 0.01 0.3";
        
        Node = "115.56537112840344 -18.260039284181374 0.01 0.3";
        
        Node = "115.37737112840344 -17.796039284181376 0.01 0.3";
        
        Node = "115.37654307146175 -17.793992323189304 0.01 0.3";
        
        Node = "115.18954307146176 -17.330992323189303 0.01 0.3";
        
        Node = "115.15689177248085 -17.249975457289644 0.01 0.3";
        
        Node = "115.00198289866455 -16.865603874891644 0.01 0.3";
        
        Node = "114.8159563239842 -16.404019219000283 0.01 0.3";
        
        Node = "114.62963306331633 -15.945148635546987 0.01 0.3";
        
        Node = "114.44231964090888 -15.486280304464143 0.01 0.3";
        
        Node = "114.25331231489554 -15.026694069631752 0.01 0.3";
        
        Node = "114.06273473560822 -14.562288121456666 0.01 0.3";
        
        Node = "113.87302325812206 -14.099991205266743 0.01 0.3";
        
        Node = "113.68331231489553 -13.638694069631702 0.01 0.3";
        
        Node = "113.6813332700198 -13.633863956730604 0.01 0.3";
        
        Node = "113.4923332700198 -13.170863956730603 0.01 0.3";
        
        Node = "113.30333327001979 -12.707863956730558 0.01 0.3";
        
        Node = "113.1150324191957 -12.246576687251482 0.01 0.3";
        
        Node = "112.9257347356082 -11.785288121456663 0.01 0.3";
        
        Node = "112.92490608758864 -11.783265691440985 0.01 0.3";
        
        Node = "112.73631985906805 -11.322277132835067 0.01 0.3";
        
        Node = "112.54673473560823 -10.860288121456666 0.01 0.3";
        
        Node = "112.54533327001981 -10.856863956730605 0.01 0.3";
        
        Node = "112.35731964090922 -10.396280304464996 0.01 0.3";
        
        Node = "112.32111547938719 -10.308247027500904 0.01 0.3";
        
        Node = "112.16831231489553 -9.936694069631702 0.01 0.3";
        
        Node = "111.97773473560821 -9.472288121456662 0.01 0.3";
        
        Node = "111.97633327001981 -9.468863956730607 0.01 0.3";
        
        Node = "111.7873332700198 -9.005863956730607 0.01 0.3";
        
        Node = "111.5983332700198 -8.542863956730557 0.01 0.3";
        
        Node = "111.59498289866455 -8.53460387489165 0.01 0.3";
        
        Node = "111.47917133806423 -8.247242569444852 0.01 0.3";
        
        Node = "111.40826272522065 -8.071298203886446 0.01 0.3";
        
        Node = "111.22154307146177 -7.6089923231893515 0.01 0.3";
        
        Node = "111.03495632398423 -7.146019219000396 0.01 0.3";
        
        Node = "110.84863306331386 -6.687148635540909 0.01 0.3";
        
        Node = "110.6617305096523 -6.229286824190095 0.01 0.3";
        
        Node = "110.47214039425972 -5.76970450258401 0.01 0.3";
        
        Node = "110.47131231489553 -5.767694069631702 0.01 0.3";
        
        Node = "110.28201594427759 -5.307405000023851 0.01 0.3";
        
        Node = "110.0917227376144 -4.847114625791457 0.01 0.3";
        
        Node = "110.0897347356082 -4.842288121456664 0.01 0.3";
        
        Node = "109.90002325812189 -4.379991205266333 0.01 0.3";
        
        Node = "109.79978214605393 -4.136247027501057 0.01 0.3";
        
        Node = "109.71031231489553 -3.9186940696317016 0.01 0.3";
        
        Node = "109.7083332700198 -3.9138639567306055 0.01 0.3";
        
        Node = "109.5193332700198 -3.4508639567306054 0.01 0.3";
        
        Node = "109.33033327001979 -2.9878639567305574 0.01 0.3";
        
        Node = "109.1413332700198 -2.524863956730605 0.01 0.3";
        
        Node = "108.95303241919696 -2.0635766872545296 0.01 0.3";
        
        Node = "108.76373473560821 -1.6022881214566638 0.01 0.3";
        
        Node = "108.76290608758866 -1.6002656914410327 0.01 0.3";
        
        Node = "108.57431985907068 -1.1392771328415578 0.01 0.3";
        
        Node = "108.195023258122 -0.2149912052665901 0.01 0.3";
        
        Node = "108.00531231489553 0.2463059303682974 0.01 0.3";
        
        Node = "108.00333327001981 0.2511360432693944 0.01 0.3";
        
        Node = "107.8143332700198 0.7141360432693945 0.01 0.3";
        
        Node = "107.81293603583917 0.7175679799951622 0.01 0.3";
        
        Node = "107.62493603583917 1.1805679799951623 0.01 0.3";
        
        Node = "107.43637112840342 1.6459607158186746 0.01 0.3";
        
        Node = "107.43498289866457 1.6493961251083018 0.01 0.3";
        
        Node = "107.3398346716793 1.8854858434032864 0.01 0.3";
        
        Node = "107.24826272521604 2.112701796124953 0.01 0.3";
        
        Node = "107.06195653494399 2.573983967761104 0.01 0.3";
        
        Node = "106.8746533204752 3.036264241769172 0.01 0.3";
        
        Node = "106.68763306331336 3.4968513644603303 0.01 0.3";
        
        Node = "106.50031964090915 3.9557196955351808 0.01 0.3";
        
        Node = "106.31131231489553 4.415305930368298 0.01 0.3";
        
        Node = "106.12172558737753 4.87729732923178 0.01 0.3";
        
        Node = "105.93172273761441 5.336885374208543 0.01 0.3";
        
        Node = "105.93031231489553 5.340305930368297 0.01 0.3";
        
        Node = "105.74072580817051 5.801300488825978 0.01 0.3";
        
        Node = "105.68456290152233 5.937444079287297 0.01 0.3";
        
        Node = "105.55014039425973 6.26329549741599 0.01 0.3";
        
        Node = "105.54931231489553 6.2653059303682985 0.01 0.3";
        
        Node = "105.35931231489553 6.727305930368299 0.01 0.3";
        
        Node = "105.35733327001981 6.732136043269394 0.01 0.3";
        
        Node = "105.16903241919584 7.193423312748182 0.01 0.3";
        
        Node = "104.9797347356082 7.654711878543336 0.01 0.3";
        
        Node = "104.97833327001979 7.658136043269444 0.01 0.3";
        
        Node = "104.78961941348385 8.120435067481829 0.01 0.3";
        
        Node = "104.60131985906631 8.580722867169149 0.01 0.3";
        
        Node = "104.41173473560822 9.042711878543335 0.01 0.3";
        
        Node = "104.4103332700198 9.046136043269396 0.01 0.3";
        
        Node = "104.2213332700198 9.509136043269397 0.01 0.3";
        
        Node = "104.03303241919686 9.970423312745723 0.01 0.3";
        
        Node = "103.84402325812206 10.431008794733257 0.01 0.3";
        
        Node = "103.65431231489553 10.892305930368298 0.01 0.3";
        
        Node = "103.46373473560823 11.356711878543287 0.01 0.3";
        
        Node = "103.46290608758864 11.358734308559015 0.01 0.3";
        
        Node = "103.27390608758864 11.820734308559015 0.01 0.3";
        
        Node = "103.08433327001978 12.285136043269445 0.01 0.3";
        
        Node = "102.89476362506471 12.750533028312972 0.01 0.3";
        
        Node = "102.89254307146176 12.756007676810697 0.01 0.3";
        
        Node = "102.70595653494382 13.217983967761523 0.01 0.3";
        
        Node = "102.51837112840344 13.680960715818628 0.01 0.3";
        
        Node = "102.51754307146176 13.683007676810696 0.01 0.3";
        
        Node = "102.33054307146176 14.146007676810695 0.01 0.3";
        
        Node = "102.27722342192814 14.278308410879823 0.01 0.3";
        
        Node = "102.14395632398438 14.608980780999246 0.01 0.3";
        
        Node = "101.95734927165535 15.068550276894715 0.01 0.3";
        
        Node = "101.76933379878591 15.530133236743463 0.01 0.3";
        
        Node = "101.58300746459734 15.985597609204408 0.01 0.3";
        
        Node = "101.39313731722672 16.442472651314972 0.01 0.3";
        
    };
    
    new DecalRoad(road_1_separator_1) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_dashed_short";

        
        Node = "105.08686268277327 17.97752734868503 0.01 0.15";
        
        Node = "105.27886268277328 17.51552734868503 0.01 0.15";
        
        Node = "105.28309391241136 17.505265691440986 0.01 0.15";
        
        Node = "105.47209391241135 17.043265691440986 0.01 0.15";
        
        Node = "105.47323637493528 17.040466971687028 0.01 0.15";
        
        Node = "105.66223637493529 16.576466971687026 0.01 0.15";
        
        Node = "105.66306396416083 16.57443202000484 0.01 0.15";
        
        Node = "105.85106396416083 16.111432020004838 0.01 0.15";
        
        Node = "105.85301710133545 16.10660387489165 0.01 0.15";
        
        Node = "105.98949199555211 15.76797098228985 0.01 0.15";
        
        Node = "106.03973727478109 15.643298203882136 0.01 0.15";
        
        Node = "106.2260434650564 15.18201603223792 0.01 0.15";
        
        Node = "106.41362887159656 14.719039284181374 0.01 0.15";
        
        Node = "106.41445692853824 14.716992323189304 0.01 0.15";
        
        Node = "106.60035069466268 14.256731287276917 0.01 0.15";
        
        Node = "106.78795181590363 13.79616557163781 0.01 0.15";
        
        Node = "106.97638058652524 13.33456493249594 0.01 0.15";
        
        Node = "107.16468014093019 12.874277132839376 0.01 0.15";
        
        Node = "107.35397674187422 12.412991205275787 0.01 0.15";
        
        Node = "107.54368768510447 11.951694069631703 0.01 0.15";
        
        Node = "107.7342652643918 11.487288121456663 0.01 0.15";
        
        Node = "107.73566672998021 11.483863956730557 0.01 0.15";
        
        Node = "107.9246667299802 11.020863956730558 0.01 0.15";
        
        Node = "108.11296758080655 10.55957668724591 0.01 0.15";
        
        Node = "108.30226526439178 10.098288121456665 0.01 0.15";
        
        Node = "108.30309391241134 10.096265691441033 0.01 0.15";
        
        Node = "108.49209391241135 9.634265691441033 0.01 0.15";
        
        Node = "108.680967580803 9.171576687254612 0.01 0.15";
        
        Node = "108.87026526439179 8.710288121456664 0.01 0.15";
        
        Node = "108.87166672998019 8.706863956730606 0.01 0.15";
        
        Node = "109.05968035909098 8.246280304464522 0.01 0.15";
        
        Node = "109.24827419182925 7.787699511174595 0.01 0.15";
        
        Node = "109.37678894602526 7.476168981369641 0.01 0.15";
        
        Node = "109.43885960574028 7.32570450258401 0.01 0.15";
        
        Node = "109.43968768510447 7.323694069631703 0.01 0.15";
        
        Node = "109.62898405572248 6.863405000023683 0.01 0.15";
        
        Node = "109.8192772623856 6.403114625791457 0.01 0.15";
        
        Node = "109.8212652643918 6.398288121456664 0.01 0.15";
        
        Node = "110.01097674187811 5.935991205266333 0.01 0.15";
        
        Node = "110.20068768510447 5.474694069631703 0.01 0.15";
        
        Node = "110.2026667299802 5.469863956730606 0.01 0.15";
        
        Node = "110.3916667299802 5.006863956730606 0.01 0.15";
        
        Node = "110.39306396416086 5.003432020004789 0.01 0.15";
        
        Node = "110.58106396416085 4.540432020004788 0.01 0.15";
        
        Node = "110.76962887159655 4.075039284181374 0.01 0.15";
        
        Node = "110.77045692853824 4.072992323189302 0.01 0.15";
        
        Node = "110.95745692853824 3.609992323189303 0.01 0.15";
        
        Node = "111.05211316329621 3.3751241364477598 0.01 0.15";
        
        Node = "111.14432457761659 3.146322222514945 0.01 0.15";
        
        Node = "111.33134667953269 2.6847357582113625 0.01 0.15";
        
        Node = "111.51836693668508 2.224148635543503 0.01 0.15";
        
        Node = "111.70568035909085 1.7652803044648195 0.01 0.15";
        
        Node = "111.89468768510447 1.3056940696317025 0.01 0.15";
        
        Node = "112.27526526439179 0.3782881214566638 0.01 0.15";
        
        Node = "112.27609391241134 0.37626569144103283 0.01 0.15";
        
        Node = "112.4646801409293 -0.08472286715840682 0.01 0.15";
        
        Node = "112.64613536536655 -0.5269005982870575 0.01 0.15";
        
        Node = "112.6542652643918 -0.5467118785433362 0.01 0.15";
        
        Node = "112.65566672998021 -0.550136043269443 0.01 0.15";
        
        Node = "112.70855783935343 -0.6797052688768564 0.01 0.15";
        
        Node = "112.8446667299802 -1.013136043269443 0.01 0.15";
        
        Node = "113.0336667299802 -1.476136043269395 0.01 0.15";
        
        Node = "113.2226667299802 -1.9391360432694427 0.01 0.15";
        
        Node = "113.4106803590909 -2.3997196955352997 0.01 0.15";
        
        Node = "113.48910674283454 -2.590419639164575 0.01 0.15";
        
        Node = "113.59968768510447 -2.859305930368298 0.01 0.15";
        
        Node = "113.78927441262248 -3.32129732923178 0.01 0.15";
        
        Node = "113.9792772623856 -3.780885374208543 0.01 0.15";
        
        Node = "113.98068768510447 -3.7843059303682973 0.01 0.15";
        
        Node = "114.17027419182936 -4.245300488825691 0.01 0.15";
        
        Node = "114.36085960574027 -4.7072954974159895 0.01 0.15";
        
        Node = "114.36366672998021 -4.714136043269443 0.01 0.15";
        
        Node = "114.5526667299802 -5.177136043269443 0.01 0.15";
        
        Node = "114.55406396416082 -5.180567979995162 0.01 0.15";
        
        Node = "114.74206396416082 -5.643567979995162 0.01 0.15";
        
        Node = "114.74401710133544 -5.64839612510835 0.01 0.15";
        
        Node = "114.93073727477902 -6.111701796112733 0.01 0.15";
        
        Node = "115.11745692853823 -6.574007676810649 0.01 0.15";
        
        Node = "115.19144495419826 -6.757592341651433 0.01 0.15";
        
        Node = "115.30335111916102 -7.035262351156817 0.01 0.15";
        
        Node = "115.4906667299802 -7.494136043269443 0.01 0.15";
        
        Node = "115.6789675808043 -7.955423312748519 0.01 0.15";
        
        Node = "115.86797674187794 -8.416008794733257 0.01 0.15";
        
        Node = "116.01044007616862 -8.762419639166378 0.01 0.15";
        
        Node = "116.05768768510447 -8.877305930368298 0.01 0.15";
        
        Node = "116.0596667299802 -8.882136043269396 0.01 0.15";
        
        Node = "116.24796758080656 -9.34342331275409 0.01 0.15";
        
        Node = "116.43726526439178 -9.804711878543335 0.01 0.15";
        
        Node = "116.43809391241136 -9.806734308559015 0.01 0.15";
        
        Node = "116.62668014092763 -10.26772286715437 0.01 0.15";
        
        Node = "116.81626526439179 -10.729711878543338 0.01 0.15";
        
        Node = "116.81766672998019 -10.733136043269393 0.01 0.15";
        
        Node = "117.0066667299802 -11.196136043269393 0.01 0.15";
        
        Node = "117.1956667299802 -11.659136043269442 0.01 0.15";
        
        Node = "117.38368035909077 -12.119719695535004 0.01 0.15";
        
        Node = "117.57268768510447 -12.579305930368298 0.01 0.15";
        
        Node = "117.76326526439179 -13.043711878543338 0.01 0.15";
        
        Node = "117.9529767418688 -13.506008794711024 0.01 0.15";
        
        Node = "118.14268768510446 -13.967305930368248 0.01 0.15";
        
        Node = "118.14466672998023 -13.972136043269444 0.01 0.15";
        
        Node = "118.33366672998022 -14.435136043269445 0.01 0.15";
        
        Node = "118.33506396416082 -14.438567979995161 0.01 0.15";
        
        Node = "118.52306396416083 -14.90156797999516 0.01 0.15";
        
        Node = "118.52501710133545 -14.906396125108348 0.01 0.15";
        
        Node = "118.71201710133545 -15.370396125108346 0.01 0.15";
        
        Node = "118.8691553291674 -15.76030060486251 0.01 0.15";
        
        Node = "118.89873727478142 -15.83370179611869 0.01 0.15";
        
        Node = "119.08504346505595 -16.294983967760963 0.01 0.15";
        
        Node = "119.27095625336888 -16.753832551682247 0.01 0.15";
        
        Node = "119.45897674187538 -17.212008794727026 0.01 0.15";
        
        Node = "119.64798405572468 -17.671594999981632 0.01 0.15";
        
        Node = "119.81282824491227 -18.070328064927555 0.01 0.15";
        
        Node = "119.8382772623856 -18.131885374208593 0.01 0.15";
        
        Node = "120.02927726238559 -18.593885374208543 0.01 0.15";
        
        Node = "120.03126526439179 -18.598711878543337 0.01 0.15";
        
        Node = "120.22126526439179 -19.06171187854334 0.01 0.15";
        
        Node = "120.22266672998019 -19.06513604326939 0.01 0.15";
        
        Node = "120.41138058652182 -19.527435067495666 0.01 0.15";
        
        Node = "120.60009391241135 -19.988734308559014 0.01 0.15";
        
        Node = "120.78896758080401 -20.45142331274785 0.01 0.15";
        
        Node = "120.9782652643918 -20.912711878543337 0.01 0.15";
        
        Node = "120.97966672998021 -20.916136043269447 0.01 0.15";
        
        Node = "121.1686667299802 -21.379136043269447 0.01 0.15";
        
        Node = "121.3569675808043 -21.84042331274852 0.01 0.15";
        
        Node = "121.5459767418776 -22.301008794732436 0.01 0.15";
        
        Node = "121.73568768510447 -22.762305930368296 0.01 0.15";
        
        Node = "121.92626526439179 -23.226711878543338 0.01 0.15";
        
        Node = "121.92709391241134 -23.228734308558966 0.01 0.15";
        
        Node = "122.11609391241134 -23.690734308558966 0.01 0.15";
        
        Node = "122.3056667299802 -24.155136043269447 0.01 0.15";
        
        Node = "122.49523637493529 -24.62053302831297 0.01 0.15";
        
        Node = "122.49745692853824 -24.626007676810698 0.01 0.15";
        
        Node = "122.68404346505595 -25.087983967760966 0.01 0.15";
        
        Node = "122.87162887159656 -25.550960715818626 0.01 0.15";
        
        Node = "122.87245692853824 -25.553007676810697 0.01 0.15";
        
        Node = "123.05945692853824 -26.0160076768107 0.01 0.15";
        
        Node = "123.11277657807177 -26.148308410879608 0.01 0.15";
        
        Node = "123.246043676016 -26.478980781000192 0.01 0.15";
        
        Node = "123.43265072834375 -26.938550276892457 0.01 0.15";
        
        Node = "123.62066620121442 -27.400133236744278 0.01 0.15";
        
        Node = "123.8069925354027 -27.85559760920452 0.01 0.15";
        
        Node = "123.99686268277328 -28.31247265131497 0.01 0.15";
        
    };
    
    new DecalRoad(road_2) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "103.24 17.21 0.01 12.0";
        
        Node = "103.12 18.749 0.01 11.999999999999995";
        
        Node = "103.006 20.288 0.01 12.0";
        
        Node = "102.897 21.827 0.01 12.0";
        
        Node = "102.785 23.367 0.01 12.000000000000002";
        
        Node = "102.667 24.906 0.01 12.000000000000004";
        
        Node = "102.552 26.445 0.01 12.000000000000002";
        
        Node = "102.443 27.984 0.01 11.999999999999998";
        
        Node = "102.331 29.524 0.01 11.999999999999995";
        
        Node = "102.213 31.062 0.01 11.999999999999998";
        
        Node = "102.097 32.601 0.01 12.0";
        
        Node = "101.988 34.141 0.01 12.000000000000002";
        
        Node = "101.877 35.68 0.01 12.0";
        
        Node = "101.759 37.219 0.01 11.999999999999998";
        
        Node = "101.643 38.758 0.01 11.999999999999998";
        
        Node = "101.533 40.298 0.01 12.0";
        
        Node = "101.423 41.837 0.01 11.999999999999998";
        
        Node = "101.304 43.376 0.01 12.000000000000002";
        
        Node = "101.189 44.915 0.01 12.000000000000002";
        
        Node = "101.078 46.454 0.01 11.999999999999998";
        
        Node = "100.959 47.993 0.01 12.000000000000004";
        
        Node = "100.845 49.532 0.01 12.0";
        
        Node = "100.736 51.072 0.01 11.999999999999996";
        
        Node = "100.624 52.611 0.01 12.000000000000004";
        
        Node = "100.505 54.15 0.01 12.000000000000005";
        
        Node = "100.39 55.689 0.01 12.000000000000004";
        
        Node = "100.282 57.229 0.01 11.999999999999998";
        
        Node = "100.169 58.768 0.01 12.0";
        
        Node = "100.047 60.304 0.01 12.000000000000002";
        
        Node = "99.949 61.855 0.01 12.000000000000002";
        
        Node = "99.805 63.369 0.01 12.000000000000002";
        
        Node = "99.706 64.918 0.01 12.0";
        
        Node = "99.775 66.597 0.01 11.999999999999996";
        
        Node = "98.718 67.43 0.01 11.999999999999998";
        
        Node = "97.21 67.894 0.01 12.0";
        
        Node = "95.739 68.354 0.01 11.999999999999998";
        
        Node = "94.251 68.76 0.01 11.999999999999996";
        
        Node = "92.748 69.115 0.01 12.0";
        
        Node = "91.233 69.407 0.01 12.000000000000002";
        
        Node = "89.708 69.645 0.01 11.999999999999995";
        
        Node = "88.174 69.817 0.01 12.000000000000004";
        
        Node = "86.634 69.917 0.01 12.0";
        
        Node = "85.091 69.95 0.01 12.0";
        
        Node = "83.549 69.918 0.01 12.0";
        
        Node = "82.008 69.82 0.01 12.0";
        
        Node = "80.474 69.65 0.01 11.999999999999996";
        
        Node = "78.95 69.411 0.01 12.0";
        
        Node = "77.434 69.12 0.01 12.000000000000002";
        
        Node = "75.932 68.765 0.01 12.000000000000002";
        
        Node = "74.44 68.369 0.01 11.999999999999998";
        
        Node = "72.96 67.934 0.01 12.000000000000002";
        
        Node = "71.489 67.465 0.01 12.0";
        
        Node = "70.027 66.971 0.01 12.0";
        
        Node = "68.571 66.461 0.01 11.999999999999996";
        
        Node = "67.121 65.931 0.01 12.000000000000007";
        
        Node = "65.667 65.414 0.01 12.0";
        
        Node = "64.212 64.899 0.01 11.999999999999998";
        
        Node = "62.751 64.4 0.01 11.999999999999996";
        
        Node = "61.284 63.921 0.01 12.000000000000005";
        
        Node = "59.81 63.466 0.01 12.000000000000004";
        
        Node = "58.33 63.028 0.01 12.0";
        
        Node = "56.841 62.619 0.01 12.000000000000004";
        
        Node = "55.346 62.236 0.01 12.000000000000002";
        
        Node = "53.845 61.877 0.01 12.0";
        
        Node = "52.34 61.537 0.01 12.0";
        
        Node = "50.827 61.23 0.01 12.000000000000002";
        
        Node = "49.311 60.943 0.01 12.000000000000004";
        
        Node = "47.791 60.674 0.01 11.999999999999995";
        
        Node = "46.267 60.428 0.01 12.000000000000002";
        
        Node = "44.742 60.196 0.01 12.0";
        
        Node = "43.213 59.981 0.01 11.999999999999998";
        
        Node = "41.683 59.781 0.01 11.999999999999996";
        
        Node = "40.15 59.602 0.01 12.000000000000004";
        
        Node = "38.616 59.431 0.01 11.999999999999998";
        
        Node = "37.081 59.275 0.01 12.000000000000002";
        
        Node = "35.544 59.126 0.01 12.0";
        
        Node = "34.007 58.991 0.01 12.000000000000005";
        
        Node = "32.469 58.859 0.01 12.000000000000002";
        
        Node = "30.93 58.749 0.01 11.999999999999996";
        
        Node = "29.391 58.635 0.01 12.000000000000004";
        
        Node = "27.85 58.534 0.01 12.000000000000002";
        
        Node = "26.31 58.445 0.01 12.0";
        
        Node = "24.769 58.354 0.01 12.000000000000004";
        
        Node = "23.228 58.269 0.01 11.999999999999998";
        
        Node = "21.686 58.2 0.01 12.0";
        
        Node = "20.144 58.127 0.01 11.999999999999996";
        
        Node = "18.603 58.058 0.01 12.000000000000002";
        
        Node = "17.06 58.002 0.01 12.000000000000002";
        
        Node = "15.518 57.947 0.01 12.0";
        
        Node = "13.975 57.891 0.01 12.0";
        
        Node = "12.433 57.831 0.01 12.000000000000004";
        
        Node = "10.891 57.77 0.01 12.000000000000005";
        
        Node = "9.349 57.714 0.01 11.999999999999998";
        
        Node = "7.806 57.659 0.01 11.999999999999998";
        
        Node = "6.264 57.603 0.01 12.0";
        
        Node = "4.722 57.548 0.01 11.999999999999998";
        
        Node = "3.179 57.493 0.01 12.000000000000002";
        
        Node = "1.637 57.425 0.01 12.000000000000004";
        
        Node = "0.095 57.371 0.01 12.0";
        
        Node = "-1.448 57.315 0.01 12.000000000000004";
        
        Node = "-2.99 57.26 0.01 12.0";
        
    };
    
    new DecalRoad(road_2_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "97.48247561398101 16.761070223312398 0.01 0.15";
        
        Node = "97.36247561398102 18.300070223312396 0.01 0.15";
        
        Node = "97.36077871801251 18.32239101614906 0.01 0.15";
        
        Node = "97.24677871801251 19.86139101614906 0.01 0.15";
        
        Node = "97.24543004246719 19.88000641626313 0.01 0.15";
        
        Node = "97.13681606818484 21.41355601645167 0.01 0.15";
        
        Node = "97.02603427542208 22.936805666939524 0.01 0.15";
        
        Node = "96.90890048113788 24.46450828900214 0.01 0.15";
        
        Node = "96.9080555933335 24.475669521269253 0.01 0.15";
        
        Node = "96.7930555933335 26.014669521269255 0.01 0.15";
        
        Node = "96.7914300424672 26.037006416263075 0.01 0.15";
        
        Node = "96.68281606818455 27.570556016455555 0.01 0.15";
        
        Node = "96.57204465584934 29.09366293606488 0.01 0.15";
        
        Node = "96.45492236896506 30.62022291257336 0.01 0.15";
        
        Node = "96.45433484632638 30.627948565415117 0.01 0.15";
        
        Node = "96.33833484632638 32.16694856541511 0.01 0.15";
        
        Node = "96.33641137830469 32.19327002612678 0.01 0.15";
        
        Node = "96.22768429256097 33.72941417333168 0.01 0.15";
        
        Node = "96.11790196586871 35.25153129747021 0.01 0.15";
        
        Node = "96.00090048113788 36.77750828900214 0.01 0.15";
        
        Node = "96.00033484632638 36.784948565415114 0.01 0.15";
        
        Node = "95.88433484632638 38.323948565415115 0.01 0.15";
        
        Node = "95.8826760084775 38.34654828631982 0.01 0.15";
        
        Node = "95.77268550818499 39.88641529041499 0.01 0.15";
        
        Node = "95.66389224015509 41.40853201312413 0.01 0.15";
        
        Node = "95.54618686084 42.93078897754383 0.01 0.15";
        
        Node = "95.5450555933335 42.9456695212692 0.01 0.15";
        
        Node = "95.43005559333349 44.484669521269204 0.01 0.15";
        
        Node = "95.42896236840448 44.49955868933915 0.01 0.15";
        
        Node = "95.31903614235166 46.02367095866629 0.01 0.15";
        
        Node = "95.20118686084001 47.54778897754384 0.01 0.15";
        
        Node = "95.19977871801251 47.56639101614906 0.01 0.15";
        
        Node = "95.0857787180125 49.105391016149056 0.01 0.15";
        
        Node = "95.0844113783047 49.12427002612678 0.01 0.15";
        
        Node = "94.97581606685077 50.65855240813653 0.01 0.15";
        
        Node = "94.86518003089053 52.17881008083997 0.01 0.15";
        
        Node = "94.74718686084 53.704788977543835 0.01 0.15";
        
        Node = "94.7460555933335 53.71966952126925 0.01 0.15";
        
        Node = "94.6310555933335 55.258669521269255 0.01 0.15";
        
        Node = "94.62914912886916 55.28499227657003 0.01 0.15";
        
        Node = "94.52181120574899 56.81555155069088 0.01 0.15";
        
        Node = "94.41076610004146 58.32792692842441 0.01 0.15";
        
        Node = "94.29013052074178 59.846748648131836 0.01 0.15";
        
        Node = "94.28349350609841 59.93983260064323 0.01 0.15";
        
        Node = "94.19127075423143 61.39939880621145 0.01 0.15";
        
        Node = "94.05594542507141 62.822194280852266 0.01 0.15";
        
        Node = "94.05554568358936 62.82722291714344 0.01 0.15";
        
        Node = "92.82676208310436 63.16249586189942 0.01 0.15";
        
        Node = "91.53725321559786 63.46707047797713 0.01 0.15";
        
        Node = "90.2409594866809 63.71691719008522 0.01 0.15";
        
        Node = "88.94064789804987 63.91985106424534 0.01 0.15";
        
        Node = "87.66486992644198 64.06289787722875 0.01 0.15";
        
        Node = "86.38503593421424 64.14600398062018 0.01 0.15";
        
        Node = "85.08916788705929 64.17371859212771 0.01 0.15";
        
        Node = "83.79228101926175 64.14680524597368 0.01 0.15";
        
        Node = "82.5095855260307 64.06523213868188 0.01 0.15";
        
        Node = "81.23980246141726 63.9245130246113 0.01 0.15";
        
        Node = "79.94197564587456 63.72098244133394 0.01 0.15";
        
        Node = "78.64303631193883 63.47164778026844 0.01 0.15";
        
        Node = "77.33716938272418 63.16300413188548 0.01 0.15";
        
        Node = "75.99526072646869 62.806840708375304 0.01 0.15";
        
        Node = "74.65158933462286 62.411910265501696 0.01 0.15";
        
        Node = "73.29058147309206 61.97797913901771 0.01 0.15";
        
        Node = "71.90593800420697 61.510117392349294 0.01 0.15";
        
        Node = "70.51692956653592 61.02358284343979 0.01 0.15";
        
        Node = "69.1035739280257 60.506976989363636 0.01 0.15";
        
        Node = "69.0557546587805 60.489736414184 0.01 0.15";
        
        Node = "67.60175465878051 59.972736414184006 0.01 0.15";
        
        Node = "67.59392827653362 59.96995991775454 0.01 0.15";
        
        Node = "66.13892827653362 59.454959917754536 0.01 0.15";
        
        Node = "66.07856428510803 59.433969097108495 0.01 0.15";
        
        Node = "64.61756428510802 58.9349690971085 0.01 0.15";
        
        Node = "64.54350127662605 58.910230954466854 0.01 0.15";
        
        Node = "63.07650127662605 58.43123095446685 0.01 0.15";
        
        Node = "62.98734330818405 58.40291640381693 0.01 0.15";
        
        Node = "61.513343308184055 57.94791640381693 0.01 0.15";
        
        Node = "61.44882650092749 57.928412736592065 0.01 0.15";
        
        Node = "59.968826500927484 57.49041273659206 0.01 0.15";
        
        Node = "59.859627059749236 57.45925992184202 0.01 0.15";
        
        Node = "58.37062705974924 57.05025992184202 0.01 0.15";
        
        Node = "58.274197222290105 57.024666194977286 0.01 0.15";
        
        Node = "56.7791972222901 56.64166619497728 0.01 0.15";
        
        Node = "56.68934114198085 56.61941210553404 0.01 0.15";
        
        Node = "55.18834114198085 56.260412105534044 0.01 0.15";
        
        Node = "55.11758092907895 56.243957946282976 0.01 0.15";
        
        Node = "53.61258092907895 55.90395794628297 0.01 0.15";
        
        Node = "53.488392259588416 55.877333912842786 0.01 0.15";
        
        Node = "51.97539225958841 55.570333912842784 0.01 0.15";
        
        Node = "51.90120801954603 55.55578621034218 0.01 0.15";
        
        Node = "50.385208019546035 55.26878621034218 0.01 0.15";
        
        Node = "50.31738470323255 55.25636524567477 0.01 0.15";
        
        Node = "48.797384703232545 54.98736524567477 0.01 0.15";
        
        Node = "48.71127302309912 54.97279639348356 0.01 0.15";
        
        Node = "47.187273023099124 54.72679639348356 0.01 0.15";
        
        Node = "47.13556389638018 54.71868990525957 0.01 0.15";
        
        Node = "45.61056389638017 54.486689905259574 0.01 0.15";
        
        Node = "45.54613934420016 54.47726019868806 0.01 0.15";
        
        Node = "44.01713934420016 54.26226019868806 0.01 0.15";
        
        Node = "43.96153378458303 54.254716547939864 0.01 0.15";
        
        Node = "42.43153378458303 54.05471654793986 0.01 0.15";
        
        Node = "42.352764755497574 54.04496999900687 0.01 0.15";
        
        Node = "40.81976475549757 53.865969999006865 0.01 0.15";
        
        Node = "40.789795280557584 53.86254993932552 0.01 0.15";
        
        Node = "39.255795280557585 53.69154993932552 0.01 0.15";
        
        Node = "39.19989792206211 53.68559416432472 0.01 0.15";
        
        Node = "37.66489792206211 53.52959416432472 0.01 0.15";
        
        Node = "37.638228369532406 53.52694628207179 0.01 0.15";
        
        Node = "36.1012283695324 53.37794628207179 0.01 0.15";
        
        Node = "36.04929277646508 53.37314816720853 0.01 0.15";
        
        Node = "34.51229277646508 53.23814816720853 0.01 0.15";
        
        Node = "34.500828246154605 53.23715270768333 0.01 0.15";
        
        Node = "32.96282824615461 53.10515270768333 0.01 0.15";
        
        Node = "32.880717705298466 53.09869501405145 0.01 0.15";
        
        Node = "31.349164045027027 52.989227241062586 0.01 0.15";
        
        Node = "29.81760898385094 52.875778718012505 0.01 0.15";
        
        Node = "29.768693851063087 52.87236411397795 0.01 0.15";
        
        Node = "28.22769385106309 52.77136411397795 0.01 0.15";
        
        Node = "28.183194039900158 52.768619983749986 0.01 0.15";
        
        Node = "26.646814895435934 52.6798292409855 0.01 0.15";
        
        Node = "25.10943548527273 52.58904304609591 0.01 0.15";
        
        Node = "25.087059670779894 52.58776526268455 0.01 0.15";
        
        Node = "23.546059670779897 52.50276526268455 0.01 0.15";
        
        Node = "23.486156073009937 52.49977297708193 0.01 0.15";
        
        Node = "21.951623027374687 52.43110710149903 0.01 0.15";
        
        Node = "20.417089091833823 52.35846055331842 0.01 0.15";
        
        Node = "20.40232326295055 52.35778046077127 0.01 0.15";
        
        Node = "18.861323262950553 52.288780460771264 0.01 0.15";
        
        Node = "18.812453805978055 52.286799595997266 0.01 0.15";
        
        Node = "17.269453805978053 52.23079959599727 0.01 0.15";
        
        Node = "15.725652717882262 52.17573422922256 0.01 0.15";
        
        Node = "14.191996402112323 52.120073338954825 0.01 0.15";
        
        Node = "12.659406533129562 52.0604394919127 0.01 0.15";
        
        Node = "11.119274761848796 51.99951339719926 0.01 0.15";
        
        Node = "11.100589459683263 51.99880452086488 0.01 0.15";
        
        Node = "9.558589459683263 51.942804520864875 0.01 0.15";
        
        Node = "8.01365392753802 51.887734229165694 0.01 0.15";
        
        Node = "6.473589459683238 51.83180452086488 0.01 0.15";
        
        Node = "4.927851589322374 51.7766699866345 0.01 0.15";
        
        Node = "3.409074269647364 51.722533398845556 0.01 0.15";
        
        Node = "1.8914219956419964 51.65560709882456 0.01 0.15";
        
        Node = "1.8391134599003969 51.65353786728812 0.01 0.15";
        
        Node = "0.3007837161606291 51.599666397663 0.01 0.15";
        
        Node = "-1.238546194021919 51.543799595997264 0.01 0.15";
        
        Node = "-2.784148410677626 51.48866998663449 0.01 0.15";
        
    };
    
    new DecalRoad(road_2_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-3.1958515893223742 63.031330013365505 0.01 0.15";
        
        Node = "-1.6556527178823124 63.08626577077743 0.01 0.15";
        
        Node = "-0.11445380597808094 63.142200404002736 0.01 0.15";
        
        Node = "-0.10711345990039689 63.14246213271188 0.01 0.15";
        
        Node = "1.408727582868139 63.19554606027964 0.01 0.15";
        
        Node = "2.924578004358003 63.26239290117544 0.01 0.15";
        
        Node = "2.9732816513068 63.26433476424744 0.01 0.15";
        
        Node = "4.516215030968186 63.31933238957561 0.01 0.15";
        
        Node = "6.0562794537207205 63.37426335147664 0.01 0.15";
        
        Node = "7.5964105403167625 63.43019547913512 0.01 0.15";
        
        Node = "9.14134607245007 63.48526577083387 0.01 0.15";
        
        Node = "10.672067315419637 63.540856166168695 0.01 0.15";
        
        Node = "12.204725238151203 63.60148660280075 0.01 0.15";
        
        Node = "13.750461743048328 63.661633203658425 0.01 0.15";
        
        Node = "13.765546194021919 63.66220040400273 0.01 0.15";
        
        Node = "15.30854619402192 63.71820040400274 0.01 0.15";
        
        Node = "16.852347282119297 63.77326577077749 0.01 0.15";
        
        Node = "18.369107271416453 63.828313443752634 0.01 0.15";
        
        Node = "19.878293387422463 63.895888941484245 0.01 0.15";
        
        Node = "21.412910908166175 63.968539446681575 0.01 0.15";
        
        Node = "21.427843926990064 63.969227022918076 0.01 0.15";
        
        Node = "22.93988435864243 64.03688641966515 0.01 0.15";
        
        Node = "24.439751182231674 64.11961755529468 0.01 0.15";
        
        Node = "25.969564514727267 64.2099569539041 0.01 0.15";
        
        Node = "25.976805960099842 64.21038001625001 0.01 0.15";
        
        Node = "27.49455075814862 64.29809383899439 0.01 0.15";
        
        Node = "28.988841334327883 64.3960324166674 0.01 0.15";
        
        Node = "30.50339101614906 64.50822128198749 0.01 0.15";
        
        Node = "30.518282294701535 64.50930498594856 0.01 0.15";
        
        Node = "32.01620399849181 64.61636891539426 0.01 0.15";
        
        Node = "33.50743899277905 64.74435527381162 0.01 0.15";
        
        Node = "35.01272859337811 64.87657004029234 0.01 0.15";
        
        Node = "36.51043378211578 65.02176071896632 0.01 0.15";
        
        Node = "38.004138905166236 65.17356397577146 0.01 0.15";
        
        Node = "39.4952155160425 65.33977916511947 0.01 0.15";
        
        Node = "40.97381724081311 65.51242737694852 0.01 0.15";
        
        Node = "42.43664511022209 65.70364670628302 0.01 0.15";
        
        Node = "43.90562180017011 65.91020654169101 0.01 0.15";
        
        Node = "45.372563172137816 66.1333740159838 0.01 0.15";
        
        Node = "46.827616054020964 66.36824475676023 0.01 0.15";
        
        Node = "48.270666562549785 66.62362672175644 0.01 0.15";
        
        Node = "49.71565225051138 66.89718271941143 0.01 0.15";
        
        Node = "51.12936701016733 67.18403693700189 0.01 0.15";
        
        Node = "52.53698721610974 67.50203751508856 0.01 0.15";
        
        Node = "53.9576416340617 67.84182095016168 0.01 0.15";
        
        Node = "55.35947731599977 68.20095343590232 0.01 0.15";
        
        Node = "56.74562006957631 68.58170050521919 0.01 0.15";
        
        Node = "58.138858187348795 68.99402367791131 0.01 0.15";
        
        Node = "59.535963040915824 69.42528738779802 0.01 0.15";
        
        Node = "60.92138359454428 69.87765033611979 0.01 0.15";
        
        Node = "62.31519564412787 70.35370250089885 0.01 0.15";
        
        Node = "63.7361575342176 70.8566546475629 0.01 0.15";
        
        Node = "65.16229776780396 71.36374852704307 0.01 0.15";
        
        Node = "66.5884260719743 71.88502301063636 0.01 0.15";
        
        Node = "66.66189242178211 71.91131496840238 0.01 0.15";
        
        Node = "68.11789242178212 72.42131496840238 0.01 0.15";
        
        Node = "68.17834670929297 72.44211560933948 0.01 0.15";
        
        Node = "69.64034670929297 72.93611560933948 0.01 0.15";
        
        Node = "69.73475704384273 72.96711383477047 0.01 0.15";
        
        Node = "71.20575704384272 73.43611383477047 0.01 0.15";
        
        Node = "71.33150292045426 73.47463374190272 0.01 0.15";
        
        Node = "72.81150292045426 73.90963374190272 0.01 0.15";
        
        Node = "72.95851899186232 73.9507415761147 0.01 0.15";
        
        Node = "74.45051899186232 74.3467415761147 0.01 0.15";
        
        Node = "74.60366743633466 74.38515636795866 0.01 0.15";
        
        Node = "76.10566743633466 74.74015636795866 0.01 0.15";
        
        Node = "76.345348946372 74.79146047182158 0.01 0.15";
        
        Node = "77.861348946372 75.08246047182158 0.01 0.15";
        
        Node = "78.05527605978142 75.11626897444808 0.01 0.15";
        
        Node = "79.57927605978142 75.35526897444808 0.01 0.15";
        
        Node = "79.83790068723124 75.3898608575727 0.01 0.15";
        
        Node = "81.37190068723123 75.55986085757269 0.01 0.15";
        
        Node = "81.64147890026878 75.58335729271158 0.01 0.15";
        
        Node = "83.18247890026879 75.6813572927116 0.01 0.15";
        
        Node = "83.42918143957917 75.69175688027984 0.01 0.15";
        
        Node = "84.97118143957915 75.72375688027984 0.01 0.15";
        
        Node = "85.2144811603738 75.72367971081118 0.01 0.15";
        
        Node = "86.7574811603738 75.6906797108112 0.01 0.15";
        
        Node = "87.00821188597683 75.67986304404275 0.01 0.15";
        
        Node = "88.54821188597684 75.57986304404274 0.01 0.15";
        
        Node = "88.81749045258194 75.55603694337611 0.01 0.15";
        
        Node = "90.35149045258193 75.38403694337612 0.01 0.15";
        
        Node = "90.59849922519035 75.35092990930798 0.01 0.15";
        
        Node = "92.12349922519036 75.11292990930798 0.01 0.15";
        
        Node = "92.32595366446884 75.07763288243245 0.01 0.15";
        
        Node = "93.84095366446884 74.78563288243245 0.01 0.15";
        
        Node = "94.07549549017848 74.73535414574168 0.01 0.15";
        
        Node = "95.57849549017848 74.38035414574169 0.01 0.15";
        
        Node = "95.77113663890066 74.33133822335998 0.01 0.15";
        
        Node = "97.25913663890066 73.92533822335997 0.01 0.15";
        
        Node = "97.46260480526446 73.86578840987835 0.01 0.15";
        
        Node = "98.92098426161239 73.40973501088443 0.01 0.15";
        
        Node = "100.41634577703668 72.94962377536928 0.01 0.15";
        
        Node = "100.91749569225104 72.76974191321727 0.01 0.15";
        
        Node = "101.39994802046587 72.54446769620449 0.01 0.15";
        
        Node = "101.85960150591983 72.27571614707284 0.01 0.15";
        
        Node = "102.29254870243594 71.96577188292287 0.01 0.15";
        
        Node = "103.34954870243594 71.13277188292285 0.01 0.15";
        
        Node = "103.76135819693366 70.7754654271323 0.01 0.15";
        
        Node = "104.13763718012116 70.38091620343587 0.01 0.15";
        
        Node = "104.47503186791597 69.95264083903125 0.01 0.15";
        
        Node = "104.77053505294272 69.4944565630602 0.01 0.15";
        
        Node = "105.02151290784845 69.01044718354882 0.01 0.15";
        
        Node = "105.22572846067231 68.50492668832344 0.01 0.15";
        
        Node = "105.38136153303326 67.98240079432816 0.01 0.15";
        
        Node = "105.4870249634258 67.44752678805588 0.01 0.15";
        
        Node = "105.54177697102564 66.90507201503618 0.01 0.15";
        
        Node = "105.54512954980594 66.35987138836413 0.01 0.15";
        
        Node = "105.4885781456374 64.98378722026311 0.01 0.15";
        
        Node = "105.56253118922304 63.826683538302056 0.01 0.15";
        
        Node = "105.69805457492859 62.40180571914773 0.01 0.15";
        
        Node = "105.71250649390159 62.21916739935677 0.01 0.15";
        
        Node = "105.80756404297927 60.71473618895396 0.01 0.15";
        
        Node = "105.92586947925821 59.22525135186817 0.01 0.15";
        
        Node = "105.92849577859991 59.19088695450409 0.01 0.15";
        
        Node = "106.04149577859991 57.651886954504086 0.01 0.15";
        
        Node = "106.04285087113084 57.63300772342997 0.01 0.15";
        
        Node = "106.14992771267303 56.10617127921725 0.01 0.15";
        
        Node = "106.26338838632164 54.58777148143278 0.01 0.15";
        
        Node = "106.38181313915999 53.05621102245616 0.01 0.15";
        
        Node = "106.38376789547571 53.03016439525233 0.01 0.15";
        
        Node = "106.49576789547572 51.49116439525233 0.01 0.15";
        
        Node = "106.49658862169531 51.47972997387322 0.01 0.15";
        
        Node = "106.60492042158543 49.94917059927874 0.01 0.15";
        
        Node = "106.71753223335789 48.42891114035059 0.01 0.15";
        
        Node = "106.83581313916 46.899211022456164 0.01 0.15";
        
        Node = "106.83803763159551 46.86944131066085 0.01 0.15";
        
        Node = "106.94850064182691 45.3378866012361 0.01 0.15";
        
        Node = "107.06238838632133 43.81377148143706 0.01 0.15";
        
        Node = "107.18081313916001 42.28221102245617 0.01 0.15";
        
        Node = "107.18330498594855 42.24871770529847 0.01 0.15";
        
        Node = "107.29330498594855 40.709717705298466 0.01 0.15";
        
        Node = "107.40251674239872 39.18075320141308 0.01 0.15";
        
        Node = "107.51738473962112 37.656771755505595 0.01 0.15";
        
        Node = "107.63509951886212 36.12149171099786 0.01 0.15";
        
        Node = "107.6370376315955 36.0954413106609 0.01 0.15";
        
        Node = "107.74803763159551 34.5564413106609 0.01 0.15";
        
        Node = "107.7485886216953 34.548729973873215 0.01 0.15";
        
        Node = "107.85665695991439 33.02189290178704 0.01 0.15";
        
        Node = "107.97137398361225 31.49991445807139 0.01 0.15";
        
        Node = "108.08907763103494 29.96577708742664 0.01 0.15";
        
        Node = "108.09078759293703 29.942893643122677 0.01 0.15";
        
        Node = "108.20278759293703 28.402893643122678 0.01 0.15";
        
        Node = "108.2035699575328 28.391993583736927 0.01 0.15";
        
        Node = "108.3117788382591 26.864163607243853 0.01 0.15";
        
        Node = "108.42552737097078 25.3419115042587 0.01 0.15";
        
        Node = "108.54309951886212 23.80849171099786 0.01 0.15";
        
        Node = "108.54478759293703 23.785893643122726 0.01 0.15";
        
        Node = "108.65678759293704 22.245893643122727 0.01 0.15";
        
        Node = "108.65756995753281 22.234993583736873 0.01 0.15";
        
        Node = "108.7659106605328 20.705302373489427 0.01 0.15";
        
        Node = "108.87839446414964 19.186771024662058 0.01 0.15";
        
        Node = "108.99752438601898 17.658929776687604 0.01 0.15";
        
    };
    
    new DecalRoad(road_2_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "-3.0612905937047183 59.25872900895775 0.01 0.3";
        
        Node = "-1.5199143611632995 59.31370676044269 0.01 0.3";
        
        Node = "0.022461885375556392 59.36968412259835 0.01 0.3";
        
        Node = "0.025003996571291126 59.369774764575546 0.01 0.3";
        
        Node = "1.5579446174435243 59.42345751005356 0.01 0.3";
        
        Node = "3.09088848635775 59.49105814759323 0.01 0.3";
        
        Node = "3.107755550236121 59.49173065428483 0.01 0.3";
        
        Node = "4.650732478256889 59.546729831887646 0.01 0.3";
        
        Node = "6.192062148482347 59.60170592258959 0.01 0.3";
        
        Node = "7.733414905737407 59.65768241701649 0.01 0.3";
        
        Node = "9.277085219907145 59.71270676046234 0.01 0.3";
        
        Node = "10.815179156853976 59.7685649060324 0.01 0.3";
        
        Node = "12.35394380542033 59.829436918718876 0.01 0.3";
        
        Node = "13.89723783309033 59.88948768957867 0.01 0.3";
        
        Node = "13.902461885375557 59.88968412259835 0.01 0.3";
        
        Node = "15.445461885375558 59.94568412259835 0.01 0.3";
        
        Node = "16.988085638837067 60.00070676044271 0.01 0.3";
        
        Node = "18.5219981892355 60.05637695021738 0.01 0.3";
        
        Node = "20.0519803939121 60.124883616098415 0.01 0.3";
        
        Node = "21.591423691139802 60.19776257893734 0.01 0.3";
        
        Node = "21.596595299390497 60.19800070057769 0.01 0.3";
        
        Node = "23.128219691304533 60.26653642239485 0.01 0.3";
        
        Node = "24.654974435405258 60.35075066850034 0.01 0.3";
        
        Node = "26.19210026484061 60.44152188879795 0.01 0.3";
        
        Node = "26.1946081247099 60.44166840389611 0.01 0.3";
        
        Node = "27.726900695462994 60.53022297454353 0.01 0.3";
        
        Node = "29.251724271628493 60.630162741702975 0.01 0.3";
        
        Node = "30.78225662896937 60.74353550891342 0.01 0.3";
        
        Node = "30.787413781714818 60.743910817644526 0.01 0.3";
        
        Node = "32.312187531945334 60.852893996673345 0.01 0.3";
        
        Node = "33.833991858971366 60.98350399093046 0.01 0.3";
        
        Node = "35.36000990246914 61.117539407893496 0.01 0.3";
        
        Node = "36.883401309823626 61.265220162412575 0.01 0.3";
        
        Node = "38.40410005373662 61.41976674485585 0.01 0.3";
        
        Node = "39.923234810751104 61.589109667573894 0.01 0.3";
        
        Node = "41.43739558123366 61.765909914094685 0.01 0.3";
        
        Node = "42.94413250570497 61.962868989188976 0.01 0.3";
        
        Node = "44.45234521218036 62.17494598846445 0.01 0.3";
        
        Node = "45.9572383280126 62.40388710510254 0.01 0.3";
        
        Node = "47.45736053818919 62.64603281619404 0.01 0.3";
        
        Node = "48.95071136365389 62.910316613595356 0.01 0.3";
        
        Node = "50.44211766251484 63.19266068204726 0.01 0.3";
        
        Node = "51.920733163694365 63.49268378770629 0.01 0.3";
        
        Node = "53.39200855969138 63.82506494029034 0.01 0.3";
        
        Node = "54.865183249891274 64.17740985286979 0.01 0.3";
        
        Node = "56.327918550995335 64.55214404706567 0.01 0.3";
        
        Node = "57.7812969937931 64.95135948232712 0.01 0.3";
        
        Node = "59.23124958869152 65.38046707460111 0.01 0.3";
        
        Node = "60.678619234949636 65.82724671438906 0.01 0.3";
        
        Node = "62.117366612829365 66.29702176142683 0.01 0.3";
        
        Node = "63.555098058572426 66.78807445918575 0.01 0.3";
        
        Node = "64.99830996856139 67.29890204244644 0.01 0.3";
        
        Node = "66.44266156460657 67.81247135135659 0.01 0.3";
        
        Node = "67.88439431064045 68.33944952749312 0.01 0.3";
        
        Node = "67.90983720234878 68.34855496741208 0.01 0.3";
        
        Node = "69.36583720234879 68.85855496741209 0.01 0.3";
        
        Node = "69.3867737521361 68.8657586525851 0.01 0.3";
        
        Node = "70.8487737521361 69.3597586525851 0.01 0.3";
        
        Node = "70.8814699718936 69.37049396875169 0.01 0.3";
        
        Node = "72.35246997189358 69.83949396875168 0.01 0.3";
        
        Node = "72.39601832743004 69.85283419632995 0.01 0.3";
        
        Node = "73.87601832743005 70.28783419632995 0.01 0.3";
        
        Node = "73.92693298419474 70.30207067571072 0.01 0.3";
        
        Node = "75.41893298419474 70.69807067571072 0.01 0.3";
        
        Node = "75.47197140652283 70.71137449972595 0.01 0.3";
        
        Node = "76.97397140652282 71.06637449972595 0.01 0.3";
        
        Node = "77.05697799008554 71.0841421547434 0.01 0.3";
        
        Node = "78.57297799008555 71.3751421547434 0.01 0.3";
        
        Node = "78.6401388951624 71.38685072708158 0.01 0.3";
        
        Node = "80.1641388951624 71.62585072708158 0.01 0.3";
        
        Node = "80.25370586570779 71.63783060002518 0.01 0.3";
        
        Node = "81.78770586570778 71.80783060002517 0.01 0.3";
        
        Node = "81.88106628580736 71.81596789357977 0.01 0.3";
        
        Node = "83.42206628580738 71.91396789357978 0.01 0.3";
        
        Node = "83.50750439465945 71.917569482348 0.01 0.3";
        
        Node = "85.04950439465944 71.949569482348 0.01 0.3";
        
        Node = "85.13376403822468 71.9495427569909 0.01 0.3";
        
        Node = "86.67676403822469 71.91654275699089 0.01 0.3";
        
        Node = "86.76359718994868 71.91279672520962 0.01 0.3";
        
        Node = "88.30359718994869 71.81279672520961 0.01 0.3";
        
        Node = "88.39685383639201 71.80454526177527 0.01 0.3";
        
        Node = "89.930853836392 71.63254526177528 0.01 0.3";
        
        Node = "90.01639800006592 71.62107962227115 0.01 0.3";
        
        Node = "91.54139800006593 71.38307962227115 0.01 0.3";
        
        Node = "91.61151209159094 71.37085554369955 0.01 0.3";
        
        Node = "93.12651209159094 71.07885554369955 0.01 0.3";
        
        Node = "93.20773869789731 71.06144299419626 0.01 0.3";
        
        Node = "94.71073869789731 70.70644299419627 0.01 0.3";
        
        Node = "94.77745424723832 70.68946778298181 0.01 0.3";
        
        Node = "96.26545424723832 70.2834677829818 0.01 0.3";
        
        Node = "96.3359194130786 70.26284447095354 0.01 0.3";
        
        Node = "97.80254866203146 69.80421125918039 0.01 0.3";
        
        Node = "99.30617169767504 69.3415580174439 0.01 0.3";
        
        Node = "99.47973010987049 69.27926126864668 0.01 0.3";
        
        Node = "99.64681316726092 69.20124422379376 0.01 0.3";
        
        Node = "99.80600052153068 69.10817009422436 0.01 0.3";
        
        Node = "99.95593894456657 69.00083008932394 0.01 0.3";
        
        Node = "101.01293894456657 68.16783008932393 0.01 0.3";
        
        Node = "101.15555695131903 68.04408759381204 0.01 0.3";
        
        Node = "101.28587001908959 67.90744717002107 0.01 0.3";
        
        Node = "101.40271666421333 67.7591266975 0.01 0.3";
        
        Node = "101.50505542959056 67.60044816036716 0.01 0.3";
        
        Node = "101.59197416722024 67.43282586443249 0.01 0.3";
        
        Node = "101.6626981681982 67.257753831454 0.01 0.3";
        
        Node = "101.71659706771715 67.0767924828842 0.01 0.3";
        
        Node = "101.75319046352409 66.89155473179424 0.01 0.3";
        
        Node = "101.7721521977578 66.70369160693893 0.01 0.3";
        
        Node = "101.77331326400206 66.5148775370958 0.01 0.3";
        
        Node = "101.7086244660216 64.94078345290502 0.01 0.3";
        
        Node = "101.79895019540193 63.52750512148975 0.01 0.3";
        
        Node = "101.94001457140384 62.044369946025185 0.01 0.3";
        
        Node = "101.94501956498756 61.98111857986381 0.01 0.3";
        
        Node = "102.0420005343651 60.44624629920498 0.01 0.3";
        
        Node = "102.16272103177774 58.92635544653443 0.01 0.3";
        
        Node = "102.16363057267529 58.914454356538215 0.01 0.3";
        
        Node = "102.27663057267529 57.375454356538214 0.01 0.3";
        
        Node = "102.2770998687899 57.36891609469436 0.01 0.3";
        
        Node = "102.38478016023318 55.833474901892146 0.01 0.3";
        
        Node = "102.4992470601978 54.30160917106108 0.01 0.3";
        
        Node = "102.61804784040173 52.76518563548265 0.01 0.3";
        
        Node = "102.61872481228596 52.756165158528944 0.01 0.3";
        
        Node = "102.73072481228597 51.21716515852895 0.01 0.3";
        
        Node = "102.73100904647457 51.21320518575696 0.01 0.3";
        
        Node = "102.83977763518114 49.676474666416304 0.01 0.3";
        
        Node = "102.95329687735321 48.14396489709337 0.01 0.3";
        
        Node = "103.07204784040174 46.608185635482656 0.01 0.3";
        
        Node = "103.07281822739239 46.59787577858384 0.01 0.3";
        
        Node = "103.18363225690982 45.06145423419333 0.01 0.3";
        
        Node = "103.29824706019785 43.52760917106068 0.01 0.3";
        
        Node = "103.41704784040174 41.99118563548266 0.01 0.3";
        
        Node = "103.41791081764453 41.979586218285185 0.01 0.3";
        
        Node = "103.52791081764452 40.44058621828518 0.01 0.3";
        
        Node = "103.63763783286541 38.9044080351207 0.01 0.3";
        
        Node = "103.7532457972717 37.37060926597172 0.01 0.3";
        
        Node = "103.87114701951934 35.83289756225034 0.01 0.3";
        
        Node = "103.87181822739238 35.82387577858386 0.01 0.3";
        
        Node = "103.98281822739239 34.28487577858386 0.01 0.3";
        
        Node = "103.98300904647456 34.28220518575696 0.01 0.3";
        
        Node = "104.09168639304391 32.746763775510914 0.01 0.3";
        
        Node = "104.20724207224696 31.213658686774085 0.01 0.3";
        
        Node = "104.32513943931946 29.67699639391399 0.01 0.3";
        
        Node = "104.32573163391758 29.669071391557637 0.01 0.3";
        
        Node = "104.43773163391758 28.129071391557638 0.01 0.3";
        
        Node = "104.43800258269535 28.125296479216253 0.01 0.3";
        
        Node = "104.54672860199459 26.59016488562442 0.01 0.3";
        
        Node = "104.66129519340996 25.056965023117815 0.01 0.3";
        
        Node = "104.77914701951934 23.519897562250343 0.01 0.3";
        
        Node = "104.77973163391758 23.512071391557654 0.01 0.3";
        
        Node = "104.89173163391759 21.972071391557655 0.01 0.3";
        
        Node = "104.89200258269535 21.968296479216235 0.01 0.3";
        
        Node = "105.00077425473012 20.432520302505193 0.01 0.3";
        
        Node = "105.11424916507346 18.900609012870028 0.01 0.3";
        
        Node = "105.23394783931393 17.365473515735967 0.01 0.3";
        
    };
    
    new DecalRoad(road_2_separator_1) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_dashed_short";

        
        Node = "101.24605216068606 17.054526484264034 0.01 0.15";
        
        Node = "101.12605216068607 18.593526484264032 0.01 0.15";
        
        Node = "101.12546449108659 18.60125662896937 0.01 0.15";
        
        Node = "101.01146449108658 20.14025662896937 0.01 0.15";
        
        Node = "101.01099741730465 20.146703520783767 0.01 0.15";
        
        Node = "100.90213110586454 21.683815936438307 0.01 0.15";
        
        Node = "100.79055299581718 23.2180149495893 0.01 0.15";
        
        Node = "100.67285298048066 24.753102437749657 0.01 0.15";
        
        Node = "100.67256037864364 24.756967799573765 0.01 0.15";
        
        Node = "100.55756037864364 26.295967799573766 0.01 0.15";
        
        Node = "100.55699741730466 26.30370352078375 0.01 0.15";
        
        Node = "100.44813110586443 27.84081593643965 0.01 0.15";
        
        Node = "100.33655659077036 29.374965518983334 0.01 0.15";
        
        Node = "100.21886056068054 30.909003606086014 0.01 0.15";
        
        Node = "100.21865708963684 30.91167915685372 0.01 0.15";
        
        Node = "100.10265708963684 32.45067915685372 0.01 0.15";
        
        Node = "100.10199095352543 32.45979481424304 0.01 0.15";
        
        Node = "99.99308546928532 33.998459453965864 0.01 0.15";
        
        Node = "99.88250717432672 35.531612570553946 0.01 0.15";
        
        Node = "99.76485298048065 37.06610243774966 0.01 0.15";
        
        Node = "99.76465708963684 37.06867915685372 0.01 0.15";
        
        Node = "99.64865708963684 38.60767915685372 0.01 0.15";
        
        Node = "99.64808260033853 38.61550590002418 0.01 0.15";
        
        Node = "99.5380858902806 40.15545984083518 0.01 0.15";
        
        Node = "99.42850380611428 41.68861281839857 0.01 0.15";
        
        Node = "99.30995215959827 43.22181436451734 0.01 0.15";
        
        Node = "99.30956037864364 43.22696779957375 0.01 0.15";
        
        Node = "99.19456037864363 44.76596779957375 0.01 0.15";
        
        Node = "99.1941817726076 44.77112422141616 0.01 0.15";
        
        Node = "99.08355364237292 46.304968297373 0.01 0.15";
        
        Node = "98.96495215959827 47.83881436451735 0.01 0.15";
        
        Node = "98.96446449108659 47.84525662896937 0.01 0.15";
        
        Node = "98.85046449108658 49.38425662896937 0.01 0.15";
        
        Node = "98.84999095352543 49.39079481424304 0.01 0.15";
        
        Node = "98.74113110540299 50.92881468679881 0.01 0.15";
        
        Node = "98.62960347390151 52.46132383751989 0.01 0.15";
        
        Node = "98.51095215959826 53.995814364517344 0.01 0.15";
        
        Node = "98.51056037864363 54.000967799573765 0.01 0.15";
        
        Node = "98.39556037864364 55.539967799573766 0.01 0.15";
        
        Node = "98.3949001312101 55.549083905305636 0.01 0.15";
        
        Node = "98.28712942190423 57.08581438985231 0.01 0.15";
        
        Node = "98.17480644157287 58.61559374144479 0.01 0.15";
        
        Node = "98.05327896822226 60.14564455346557 0.01 0.15";
        
        Node = "98.05098043501243 60.17788142013619 0.01 0.15";
        
        Node = "97.95498121358663 61.6972160367833 0.01 0.15";
        
        Node = "97.81398542859617 63.17963005397481 0.01 0.15";
        
        Node = "97.80907229792972 63.24143586668498 0.01 0.15";
        
        Node = "97.71007229792971 64.79043586668499 0.01 0.15";
        
        Node = "97.70768673599795 65.0001224629042 0.01 0.15";
        
        Node = "97.73399283387762 65.64023751130915 0.01 0.15";
        
        Node = "96.62182830232496 65.98244198255611 0.01 0.15";
        
        Node = "96.6130805869214 65.98515552904647 0.01 0.15";
        
        Node = "95.17712386462003 66.43419706015362 0.01 0.15";
        
        Node = "93.75775743137832 66.8214704283634 0.01 0.15";
        
        Node = "92.32869375431956 67.15900709194014 0.01 0.15";
        
        Node = "90.88943618586333 67.43640855067889 0.01 0.15";
        
        Node = "89.44225035430313 67.66226443783387 0.01 0.15";
        
        Node = "87.9976778966034 67.82423736007921 0.01 0.15";
        
        Node = "86.54777867851566 67.91838665995503 0.01 0.15";
        
        Node = "85.09036550201172 67.94955622238189 0.01 0.15";
        
        Node = "83.63325316684399 67.91931783410345 0.01 0.15";
        
        Node = "82.18170927308421 67.8270068012751 0.01 0.15";
        
        Node = "80.73921297365085 67.66714736783074 0.01 0.15";
        
        Node = "79.29354134922066 67.44043114851392 0.01 0.15";
        
        Node = "77.85271387426478 67.16386070312332 0.01 0.15";
        
        Node = "76.41863874726384 66.82491485086943 0.01 0.15";
        
        Node = "74.97861843340897 66.44271106783557 0.01 0.15";
        
        Node = "73.5458318041984 66.02158797073652 0.01 0.15";
        
        Node = "72.11292431968515 65.56473303515752 0.01 0.15";
        
        Node = "70.67771446033204 65.07978524410387 0.01 0.15";
        
        Node = "69.24491500139773 64.57791180725187 0.01 0.15";
        
        Node = "67.80760568935955 64.05255047250688 0.01 0.15";
        
        Node = "67.79104490347376 64.04657971053992 0.01 0.15";
        
        Node = "66.33704490347377 63.52957971053992 0.01 0.15";
        
        Node = "66.33433446806359 63.528618153334904 0.01 0.15";
        
        Node = "64.87933446806359 63.0136181533349 0.01 0.15";
        
        Node = "64.85842918964781 63.006348605059216 0.01 0.15";
        
        Node = "63.3974291896478 62.50734860505922 0.01 0.15";
        
        Node = "63.37177966290079 62.49878128293225 0.01 0.15";
        
        Node = "61.90477966290079 62.01978128293224 0.01 0.15";
        
        Node = "61.87390244439274 62.00997537794526 0.01 0.15";
        
        Node = "60.399902444392744 61.55497537794526 0.01 0.15";
        
        Node = "60.37755896136017 61.548220861157425 0.01 0.15";
        
        Node = "58.89755896136017 61.11022086115742 0.01 0.15";
        
        Node = "58.85974097307333 61.09943200756434 0.01 0.15";
        
        Node = "57.37074097307333 60.69043200756434 0.01 0.15";
        
        Node = "57.33734535836887 60.68156837921291 0.01 0.15";
        
        Node = "55.84234535836887 60.29856837921291 0.01 0.15";
        
        Node = "55.81122636951717 60.29086133524988 0.01 0.15";
        
        Node = "54.310226369517174 59.931861335249884 0.01 0.15";
        
        Node = "54.285720668079286 59.92616292511965 0.01 0.15";
        
        Node = "52.78072066807929 59.586162925119645 0.01 0.15";
        
        Node = "52.73771160505227 59.576942480638195 0.01 0.15";
        
        Node = "51.22471160505226 59.26994248063819 0.01 0.15";
        
        Node = "51.199020093349276 59.264904315270016 0.01 0.15";
        
        Node = "49.68302009334928 58.97790431527002 0.01 0.15";
        
        Node = "49.659531498955 58.97360268248477 0.01 0.15";
        
        Node = "48.139531498954995 58.70460268248477 0.01 0.15";
        
        Node = "48.109709272068955 58.69955719254842 0.01 0.15";
        
        Node = "46.58570927206896 58.453557192548416 0.01 0.15";
        
        Node = "46.56780134939574 58.45074975073925 0.01 0.15";
        
        Node = "45.04280134939573 58.21874975073925 0.01 0.15";
        
        Node = "45.02048981617321 58.215484051493696 0.01 0.15";
        
        Node = "43.491489816173214 58.0004840514937 0.01 0.15";
        
        Node = "43.47223247950928 57.997871531754065 0.01 0.15";
        
        Node = "41.94223247950928 57.79787153175406 0.01 0.15";
        
        Node = "41.91495316207708 57.79449610355216 0.01 0.15";
        
        Node = "40.38195316207708 57.61549610355216 0.01 0.15";
        
        Node = "40.371574123136824 57.61431166729888 0.01 0.15";
        
        Node = "38.837574123136825 57.44331166729888 0.01 0.15";
        
        Node = "38.81821573058428 57.441249061238 0.01 0.15";
        
        Node = "37.28321573058428 57.285249061238 0.01 0.15";
        
        Node = "37.27397952191599 57.28433204573915 0.01 0.15";
        
        Node = "35.736979521915984 57.13533204573915 0.01 0.15";
        
        Node = "35.71899316933855 57.13367036093801 0.01 0.15";
        
        Node = "34.181993169338554 56.998670360938014 0.01 0.15";
        
        Node = "34.178022769231035 56.998325613050504 0.01 0.15";
        
        Node = "32.64002276923104 56.866325613050506 0.01 0.15";
        
        Node = "32.61158621828518 56.86408918235548 0.01 0.15";
        
        Node = "31.075165037236527 56.75427350339813 0.01 0.15";
        
        Node = "29.538743371030627 56.64046449108658 0.01 0.15";
        
        Node = "29.52180306530323 56.63928194423479 0.01 0.15";
        
        Node = "27.980803065303235 56.53828194423479 0.01 0.15";
        
        Node = "27.9653918752901 56.53733159610389 0.01 0.15";
        
        Node = "26.426645851230514 56.448404066142004 0.01 0.15";
        
        Node = "24.886899735159385 56.35747811120205 0.01 0.15";
        
        Node = "24.87915053533503 56.3570355888085 0.01 0.15";
        
        Node = "23.338150535335032 56.2720355888085 0.01 0.15";
        
        Node = "23.317404700609504 56.270999299422314 0.01 0.15";
        
        Node = "21.77799065883225 56.202115013506216 0.01 0.15";
        
        Node = "20.238576308860196 56.12923742106266 0.01 0.15";
        
        Node = "20.233462601887634 56.1290018911762 0.01 0.15";
        
        Node = "18.692462601887637 56.0600018911762 0.01 0.15";
        
        Node = "18.675538114624437 56.05931587740165 0.01 0.15";
        
        Node = "17.132538114624435 56.003315877401654 0.01 0.15";
        
        Node = "15.589914361163249 55.94829323955731 0.01 0.15";
        
        Node = "14.050150269129478 55.892410680157504 0.01 0.15";
        
        Node = "12.511409188966846 55.832537486376864 0.01 0.15";
        
        Node = "10.97005619457967 55.77156308128113 0.01 0.15";
        
        Node = "10.963585094262601 55.771317582983514 0.01 0.15";
        
        Node = "9.421585094262602 55.71531758298351 0.01 0.15";
        
        Node = "7.877914780092372 55.66029323953764 0.01 0.15";
        
        Node = "6.336585094262594 55.60431758298351 0.01 0.15";
        
        Node = "4.793290593704719 55.54927099104225 0.01 0.15";
        
        Node = "3.25867940074375 55.4945700082582 0.01 0.15";
        
        Node = "1.72511151364225 55.42694185240677 0.01 0.15";
        
        Node = "1.7069960034287088 55.426225235424454 0.01 0.15";
        
        Node = "0.16626708784518057 55.3722697481083 0.01 0.15";
        
        Node = "-1.3754618853755562 55.31631587740165 0.01 0.15";
        
        Node = "-2.918709406295282 55.261270991042245 0.01 0.15";
        
    };
    
    new DecalRoad(road_3) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "-2.99 57.26 0.01 8.000000000000002";
        
        Node = "-3.026 57.759 0.01 8.000000000000005";
        
        Node = "-3.062 58.257 0.01 8.000000000000004";
        
        Node = "-3.098 58.756 0.01 8.000000000000004";
        
        Node = "-3.134 59.255 0.01 8.000000000000004";
        
        Node = "-3.17 59.753 0.01 8.000000000000004";
        
        Node = "-3.206 60.252 0.01 8.0";
        
        Node = "-3.242 60.751 0.01 7.999999999999999";
        
        Node = "-3.278 61.25 0.01 7.999999999999998";
        
        Node = "-3.314 61.748 0.01 7.999999999999999";
        
        Node = "-3.35 62.247 0.01 7.999999999999999";
        
        Node = "-3.386 62.746 0.01 7.999999999999999";
        
        Node = "-3.422 63.244 0.01 7.999999999999998";
        
        Node = "-3.459 63.743 0.01 8.0";
        
        Node = "-3.495 64.242 0.01 8.0";
        
        Node = "-3.531 64.74 0.01 8.0";
        
        Node = "-3.567 65.239 0.01 8.0";
        
        Node = "-3.602 65.738 0.01 7.999999999999999";
        
        Node = "-3.635 66.237 0.01 8.0";
        
        Node = "-3.668 66.736 0.01 7.999999999999998";
        
        Node = "-3.702 67.234 0.01 7.999999999999999";
        
        Node = "-3.736 67.733 0.01 7.999999999999999";
        
        Node = "-3.771 68.232 0.01 7.999999999999999";
        
        Node = "-3.807 68.731 0.01 7.999999999999998";
        
        Node = "-3.843 69.229 0.01 8.0";
        
        Node = "-3.88 69.728 0.01 8.000000000000004";
        
        Node = "-3.916 70.227 0.01 8.000000000000002";
        
        Node = "-3.952 70.725 0.01 8.000000000000002";
        
        Node = "-3.988 71.224 0.01 8.000000000000002";
        
        Node = "-4.024 71.723 0.01 8.000000000000002";
        
        Node = "-4.06 72.222 0.01 8.0";
        
        Node = "-4.096 72.72 0.01 7.999999999999999";
        
        Node = "-4.132 73.219 0.01 7.999999999999999";
        
        Node = "-4.168 73.718 0.01 7.999999999999999";
        
        Node = "-4.204 74.216 0.01 7.999999999999999";
        
        Node = "-4.24 74.715 0.01 8.0";
        
        Node = "-4.276 75.214 0.01 8.000000000000002";
        
        Node = "-4.312 75.712 0.01 8.000000000000002";
        
        Node = "-4.348 76.211 0.01 8.000000000000002";
        
        Node = "-4.384 76.71 0.01 8.000000000000002";
        
        Node = "-4.42 77.208 0.01 8.000000000000002";
        
        Node = "-4.456 77.707 0.01 8.0";
        
        Node = "-4.492 78.206 0.01 8.0";
        
        Node = "-4.528 78.705 0.01 8.000000000000002";
        
        Node = "-4.564 79.203 0.01 8.0";
        
        Node = "-4.6 79.702 0.01 8.000000000000002";
        
        Node = "-4.636 80.201 0.01 8.000000000000002";
        
        Node = "-4.672 80.699 0.01 8.0";
        
        Node = "-4.708 81.198 0.01 8.0";
        
        Node = "-4.744 81.697 0.01 7.999999999999999";
        
        Node = "-4.78 82.195 0.01 7.999999999999999";
        
        Node = "-4.816 82.694 0.01 7.999999999999998";
        
        Node = "-4.852 83.193 0.01 7.999999999999998";
        
        Node = "-4.888 83.691 0.01 7.999999999999997";
        
        Node = "-4.924 84.19 0.01 8.0";
        
        Node = "-4.96 84.689 0.01 7.999999999999998";
        
        Node = "-4.996 85.187 0.01 7.999999999999997";
        
        Node = "-5.032 85.686 0.01 7.999999999999998";
        
        Node = "-5.068 86.185 0.01 7.999999999999998";
        
        Node = "-5.104 86.684 0.01 7.999999999999998";
        
        Node = "-5.14 87.182 0.01 7.999999999999998";
        
        Node = "-5.176 87.681 0.01 7.999999999999997";
        
        Node = "-5.212 88.18 0.01 7.999999999999998";
        
        Node = "-5.248 88.678 0.01 7.999999999999998";
        
        Node = "-5.284 89.177 0.01 7.999999999999999";
        
        Node = "-5.32 89.676 0.01 7.999999999999999";
        
        Node = "-5.356 90.174 0.01 7.999999999999998";
        
        Node = "-5.392 90.673 0.01 8.000000000000002";
        
        Node = "-5.428 91.172 0.01 8.0";
        
        Node = "-5.464 91.671 0.01 8.0";
        
        Node = "-5.5 92.169 0.01 8.000000000000004";
        
        Node = "-5.536 92.668 0.01 8.000000000000002";
        
        Node = "-5.572 93.167 0.01 8.0";
        
        Node = "-5.608 93.665 0.01 8.000000000000002";
        
        Node = "-5.644 94.164 0.01 8.0";
        
        Node = "-5.68 94.663 0.01 8.000000000000002";
        
        Node = "-5.716 95.161 0.01 8.0";
        
        Node = "-5.752 95.66 0.01 8.0";
        
        Node = "-5.788 96.159 0.01 8.0";
        
        Node = "-5.824 96.657 0.01 8.000000000000004";
        
        Node = "-5.86 97.156 0.01 8.000000000000002";
        
        Node = "-5.896 97.655 0.01 8.000000000000002";
        
        Node = "-5.932 98.154 0.01 8.000000000000002";
        
        Node = "-5.968 98.652 0.01 8.0";
        
        Node = "-6.004 99.151 0.01 7.999999999999998";
        
        Node = "-6.04 99.65 0.01 7.999999999999998";
        
        Node = "-6.076 100.148 0.01 7.999999999999998";
        
        Node = "-6.112 100.647 0.01 7.999999999999999";
        
        Node = "-6.148 101.146 0.01 7.9999999999999964";
        
        Node = "-6.184 101.644 0.01 7.999999999999998";
        
        Node = "-6.22 102.143 0.01 7.999999999999997";
        
        Node = "-6.256 102.642 0.01 8.0";
        
        Node = "-6.292 103.14 0.01 8.0";
        
        Node = "-6.328 103.639 0.01 7.999999999999999";
        
        Node = "-6.364 104.138 0.01 8.0";
        
        Node = "-6.4 104.637 0.01 8.0";
        
        Node = "-6.436 105.135 0.01 8.0";
        
        Node = "-6.472 105.634 0.01 8.000000000000002";
        
        Node = "-6.508 106.133 0.01 8.0";
        
        Node = "-6.544 106.631 0.01 8.0";
        
        Node = "-6.58 107.13 0.01 8.0";
        
    };
    
    new DecalRoad(road_3_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-6.755214126666035 56.98836130549103 0.01 0.15";
        
        Node = "-6.791194552864585 57.48708999085429 0.01 0.15";
        
        Node = "-6.827174939962266 57.98481867903887 0.01 0.15";
        
        Node = "-6.899194552864841 58.98308999085782 0.01 0.15";
        
        Node = "-6.935174939962266 59.48081867903887 0.01 0.15";
        
        Node = "-6.971214126666034 59.98036130549103 0.01 0.15";
        
        Node = "-7.0072141266660335 60.479361305491025 0.01 0.15";
        
        Node = "-7.043194552864841 60.97808999085782 0.01 0.15";
        
        Node = "-7.079174939962266 61.475818679038866 0.01 0.15";
        
        Node = "-7.15119455286484 62.47408999085783 0.01 0.15";
        
        Node = "-7.186923277532832 62.96833734876504 0.01 0.15";
        
        Node = "-7.223665177771713 63.46385648982454 0.01 0.15";
        
        Node = "-7.224214126666034 63.47136130549103 0.01 0.15";
        
        Node = "-7.26019455286484 63.97008999085782 0.01 0.15";
        
        Node = "-7.296174939962266 64.46781867903886 0.01 0.15";
        
        Node = "-7.332214126666035 64.96736130549104 0.01 0.15";
        
        Node = "-7.3327482662885775 64.97486936007996 0.01 0.15";
        
        Node = "-7.367748266288578 65.47386936007996 0.01 0.15";
        
        Node = "-7.368772042043158 65.48889483489494 0.01 0.15";
        
        Node = "-7.387167304135167 65.76705349501349 0.01 0.15";
        
        Node = "-7.401772042043158 65.98789483489493 0.01 0.15";
        
        Node = "-7.434506595216438 66.4828809571212 0.01 0.15";
        
        Node = "-7.4682325946142285 66.97686765418295 0.01 0.15";
        
        Node = "-7.502011667166806 67.47262470402956 0.01 0.15";
        
        Node = "-7.536484939085531 67.96411506652794 0.01 0.15";
        
        Node = "-7.572194552864467 68.45908999085265 0.01 0.15";
        
        Node = "-7.607923277532847 68.95333734876523 0.01 0.15";
        
        Node = "-7.644665177771714 69.44885648982454 0.01 0.15";
        
        Node = "-7.645214126666033 69.45636130549103 0.01 0.15";
        
        Node = "-7.681194552864329 69.95508999085074 0.01 0.15";
        
        Node = "-7.717174939962266 70.45281867903886 0.01 0.15";
        
        Node = "-7.753214126666034 70.95236130549104 0.01 0.15";
        
        Node = "-7.7892141266660335 71.45136130549102 0.01 0.15";
        
        Node = "-7.825194552864398 71.9500899908517 0.01 0.15";
        
        Node = "-7.861174939962266 72.44781867903887 0.01 0.15";
        
        Node = "-7.897214126666033 72.94736130549103 0.01 0.15";
        
        Node = "-7.933194552864398 73.4460899908517 0.01 0.15";
        
        Node = "-7.969174939962266 73.94381867903887 0.01 0.15";
        
        Node = "-8.005214126666035 74.44336130549104 0.01 0.15";
        
        Node = "-8.041194552864841 74.94208999085782 0.01 0.15";
        
        Node = "-8.077174939962266 75.43981867903888 0.01 0.15";
        
        Node = "-8.113214126666033 75.93936130549103 0.01 0.15";
        
        Node = "-8.149194552864467 76.43808999085265 0.01 0.15";
        
        Node = "-8.185174939962266 76.93581867903887 0.01 0.15";
        
        Node = "-8.221214126666034 77.43536130549101 0.01 0.15";
        
        Node = "-8.257214126666033 77.93436130549104 0.01 0.15";
        
        Node = "-8.293194552863955 78.43308999084557 0.01 0.15";
        
        Node = "-8.329174939962266 78.93081867903888 0.01 0.15";
        
        Node = "-8.365214126666032 79.43036130549103 0.01 0.15";
        
        Node = "-8.401194552864467 79.92908999085263 0.01 0.15";
        
        Node = "-8.437174939962267 80.42681867903887 0.01 0.15";
        
        Node = "-8.473214126666033 80.92636130549101 0.01 0.15";
        
        Node = "-8.509194552865214 81.425089990863 0.01 0.15";
        
        Node = "-8.545174939962266 81.92281867903885 0.01 0.15";
        
        Node = "-8.581214126666033 82.42236130549104 0.01 0.15";
        
        Node = "-8.617194552864467 82.92108999085265 0.01 0.15";
        
        Node = "-8.653174939962266 83.41881867903888 0.01 0.15";
        
        Node = "-8.689214126666034 83.91836130549102 0.01 0.15";
        
        Node = "-8.72519455286484 84.41708999085782 0.01 0.15";
        
        Node = "-8.761174939962267 84.91481867903887 0.01 0.15";
        
        Node = "-8.797214126666034 85.41436130549104 0.01 0.15";
        
        Node = "-8.833214126666032 85.91336130549104 0.01 0.15";
        
        Node = "-8.869194552864467 86.41208999085264 0.01 0.15";
        
        Node = "-8.905174939962267 86.90981867903888 0.01 0.15";
        
        Node = "-8.941214126666033 87.40936130549102 0.01 0.15";
        
        Node = "-8.977194552865214 87.908089990863 0.01 0.15";
        
        Node = "-9.013174939962266 88.40581867903886 0.01 0.15";
        
        Node = "-9.049214126666033 88.90536130549104 0.01 0.15";
        
        Node = "-9.085194552864467 89.40408999085265 0.01 0.15";
        
        Node = "-9.121174939962266 89.90181867903888 0.01 0.15";
        
        Node = "-9.157214126666034 90.40136130549102 0.01 0.15";
        
        Node = "-9.193214126666033 90.90036130549103 0.01 0.15";
        
        Node = "-9.229194552864842 91.39908999085783 0.01 0.15";
        
        Node = "-9.265174939962266 91.89681867903887 0.01 0.15";
        
        Node = "-9.301214126666034 92.39636130549104 0.01 0.15";
        
        Node = "-9.337194552864467 92.89508999085264 0.01 0.15";
        
        Node = "-9.373174939962267 93.39281867903888 0.01 0.15";
        
        Node = "-9.409214126666033 93.89236130549102 0.01 0.15";
        
        Node = "-9.44519455286484 94.39108999085782 0.01 0.15";
        
        Node = "-9.481174939962266 94.88881867903888 0.01 0.15";
        
        Node = "-9.517214126666033 95.38836130549103 0.01 0.15";
        
        Node = "-9.553194552864841 95.88708999085783 0.01 0.15";
        
        Node = "-9.589174939962266 96.38481867903887 0.01 0.15";
        
        Node = "-9.625214126666034 96.88436130549104 0.01 0.15";
        
        Node = "-9.661214126666033 97.38336130549104 0.01 0.15";
        
        Node = "-9.697194552864467 97.88208999085263 0.01 0.15";
        
        Node = "-9.733174939962266 98.37981867903888 0.01 0.15";
        
        Node = "-9.769214126666032 98.87936130549103 0.01 0.15";
        
        Node = "-9.805194552863956 99.37808999084558 0.01 0.15";
        
        Node = "-9.841174939962265 99.87581867903887 0.01 0.15";
        
        Node = "-9.877214126666034 100.37536130549104 0.01 0.15";
        
        Node = "-9.91319455286484 100.87408999085783 0.01 0.15";
        
        Node = "-9.949174939962266 101.37181867903888 0.01 0.15";
        
        Node = "-9.985214126666033 101.87136130549104 0.01 0.15";
        
        Node = "-10.021194552864467 102.37008999085265 0.01 0.15";
        
        Node = "-10.057174939962266 102.86781867903888 0.01 0.15";
        
        Node = "-10.093214126666034 103.36736130549102 0.01 0.15";
        
        Node = "-10.129214126666033 103.86636130549104 0.01 0.15";
        
        Node = "-10.165194552864467 104.36508999085264 0.01 0.15";
        
        Node = "-10.201174939962266 104.86281867903888 0.01 0.15";
        
        Node = "-10.237214126666032 105.36236130549102 0.01 0.15";
        
        Node = "-10.273194552863956 105.86108999084557 0.01 0.15";
        
        Node = "-10.309174939962267 106.35881867903888 0.01 0.15";
        
        Node = "-10.345214126666033 106.85836130549102 0.01 0.15";
        
    };
    
    new DecalRoad(road_3_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-2.8147858733339675 107.40163869450897 0.01 0.15";
        
        Node = "-2.7788054471357544 106.90291000915042 0.01 0.15";
        
        Node = "-2.7428250600377333 106.40518132096112 0.01 0.15";
        
        Node = "-2.706785873333967 105.90563869450897 0.01 0.15";
        
        Node = "-2.6708054471357547 105.40691000915042 0.01 0.15";
        
        Node = "-2.6348250600377336 104.90918132096112 0.01 0.15";
        
        Node = "-2.5987858733339673 104.40963869450898 0.01 0.15";
        
        Node = "-2.5627858733339663 103.91063869450896 0.01 0.15";
        
        Node = "-2.5268054471357546 103.41191000915042 0.01 0.15";
        
        Node = "-2.4908250600377335 102.91418132096112 0.01 0.15";
        
        Node = "-2.454785873333967 102.41463869450898 0.01 0.15";
        
        Node = "-2.418805447135602 101.9159100091483 0.01 0.15";
        
        Node = "-2.3828250600377334 101.41818132096112 0.01 0.15";
        
        Node = "-2.3467858733339666 100.91863869450897 0.01 0.15";
        
        Node = "-2.31080544713538 100.41991000914523 0.01 0.15";
        
        Node = "-2.2748250600377338 99.92218132096113 0.01 0.15";
        
        Node = "-2.2387858733339656 99.42263869450896 0.01 0.15";
        
        Node = "-2.202805447135823 98.92391000915137 0.01 0.15";
        
        Node = "-2.1668250600377337 98.42618132096112 0.01 0.15";
        
        Node = "-2.1307858733339673 97.92663869450898 0.01 0.15";
        
        Node = "-2.094785873333967 97.42763869450897 0.01 0.15";
        
        Node = "-2.0588054471353803 96.92891000914523 0.01 0.15";
        
        Node = "-2.022825060037734 96.43118132096113 0.01 0.15";
        
        Node = "-1.9867858733339658 95.93163869450896 0.01 0.15";
        
        Node = "-1.9508054471356022 95.4329100091483 0.01 0.15";
        
        Node = "-1.9148250600377335 94.93518132096112 0.01 0.15";
        
        Node = "-1.8787858733339666 94.43563869450897 0.01 0.15";
        
        Node = "-1.8428054471357544 93.93691000915042 0.01 0.15";
        
        Node = "-1.8068250600377334 93.43918132096113 0.01 0.15";
        
        Node = "-1.770785873333967 92.93963869450899 0.01 0.15";
        
        Node = "-1.7348054471353802 92.44091000914523 0.01 0.15";
        
        Node = "-1.6988250600377341 91.94318132096113 0.01 0.15";
        
        Node = "-1.662785873333966 91.44363869450896 0.01 0.15";
        
        Node = "-1.6267858733339668 90.94463869450897 0.01 0.15";
        
        Node = "-1.5908054471357547 90.44591000915042 0.01 0.15";
        
        Node = "-1.5548250600377336 89.94818132096113 0.01 0.15";
        
        Node = "-1.5187858733339672 89.44863869450899 0.01 0.15";
        
        Node = "-1.48280544713545 88.9499100091462 0.01 0.15";
        
        Node = "-1.4468250600377344 88.45218132096115 0.01 0.15";
        
        Node = "-1.4107858733339662 87.95263869450896 0.01 0.15";
        
        Node = "-1.3748054471357545 87.45391000915042 0.01 0.15";
        
        Node = "-1.3388250600377334 86.95618132096112 0.01 0.15";
        
        Node = "-1.302785873333967 86.45663869450898 0.01 0.15";
        
        Node = "-1.2667858733339665 85.95763869450897 0.01 0.15";
        
        Node = "-1.2308054471353806 85.45891000914523 0.01 0.15";
        
        Node = "-1.1948250600377337 84.96118132096112 0.01 0.15";
        
        Node = "-1.1587858733339669 84.46163869450896 0.01 0.15";
        
        Node = "-1.1228054471357547 83.96291000915042 0.01 0.15";
        
        Node = "-1.0868250600377336 83.46518132096112 0.01 0.15";
        
        Node = "-1.0507858733339672 82.96563869450898 0.01 0.15";
        
        Node = "-1.01480544713545 82.46691000914619 0.01 0.15";
        
        Node = "-0.9788250600377344 81.96918132096114 0.01 0.15";
        
        Node = "-0.9427858733339662 81.46963869450896 0.01 0.15";
        
        Node = "-0.9068054471357545 80.97091000915042 0.01 0.15";
        
        Node = "-0.8708250600377334 80.47318132096112 0.01 0.15";
        
        Node = "-0.834785873333967 79.97363869450898 0.01 0.15";
        
        Node = "-0.7988054471356021 79.4749100091483 0.01 0.15";
        
        Node = "-0.7628250600377333 78.97718132096112 0.01 0.15";
        
        Node = "-0.7267858733339665 78.47763869450897 0.01 0.15";
        
        Node = "-0.6907858733339665 77.97863869450896 0.01 0.15";
        
        Node = "-0.6548054471357547 77.47991000915042 0.01 0.15";
        
        Node = "-0.6188250600377336 76.98218132096112 0.01 0.15";
        
        Node = "-0.5827858733339673 76.48263869450898 0.01 0.15";
        
        Node = "-0.5468054471356023 75.9839100091483 0.01 0.15";
        
        Node = "-0.5108250600377335 75.48618132096112 0.01 0.15";
        
        Node = "-0.4747858733339667 74.98663869450897 0.01 0.15";
        
        Node = "-0.43880544713538017 74.48791000914522 0.01 0.15";
        
        Node = "-0.4028250600377339 73.99018132096113 0.01 0.15";
        
        Node = "-0.36678587333396573 73.49063869450896 0.01 0.15";
        
        Node = "-0.3308054471356021 72.9919100091483 0.01 0.15";
        
        Node = "-0.29482506003773334 72.49418132096112 0.01 0.15";
        
        Node = "-0.2587858733339665 71.99463869450896 0.01 0.15";
        
        Node = "-0.2227858733339665 71.49563869450898 0.01 0.15";
        
        Node = "-0.18680544713567085 70.99691000914926 0.01 0.15";
        
        Node = "-0.1508250600377341 70.49918132096114 0.01 0.15";
        
        Node = "-0.11505660786341028 70.0033913759032 0.01 0.15";
        
        Node = "-0.0783348222282867 69.50814351017546 0.01 0.15";
        
        Node = "-0.07782506003773326 69.50118132096112 0.01 0.15";
        
        Node = "-0.04182506003773323 69.00318132096112 0.01 0.15";
        
        Node = "-0.005785873333966407 68.50363869450898 0.01 0.15";
        
        Node = "-0.00525173371142218 68.49613063992004 0.01 0.15";
        
        Node = "0.02974826628857752 67.99713063992004 0.01 0.15";
        
        Node = "0.030267577591818196 67.98961943414453 0.01 0.15";
        
        Node = "0.0642501035660321 67.49087589117003 0.01 0.15";
        
        Node = "0.0982325946142284 66.99313234581705 0.01 0.15";
        
        Node = "0.09877204204315815 66.98510516510505 0.01 0.15";
        
        Node = "0.1317720420431585 66.48610516510504 0.01 0.15";
        
        Node = "0.1449262608956369 66.28719743154788 0.01 0.15";
        
        Node = "0.16427514017880251 65.9946189235994 0.01 0.15";
        
        Node = "0.19848493908553497 65.506884933472 0.01 0.15";
        
        Node = "0.23419455286432897 65.01191000914926 0.01 0.15";
        
        Node = "0.2701749399622657 64.51418132096114 0.01 0.15";
        
        Node = "0.3059433921366272 64.0183913759027 0.01 0.15";
        
        Node = "0.3426651777717131 63.52314351017546 0.01 0.15";
        
        Node = "0.34317493996226567 63.51618132096113 0.01 0.15";
        
        Node = "0.3791749399622657 63.01818132096113 0.01 0.15";
        
        Node = "0.45119455286484067 62.01991000914217 0.01 0.15";
        
        Node = "0.4871749399622658 61.52218132096113 0.01 0.15";
        
        Node = "0.523214126666034 61.02263869450897 0.01 0.15";
        
        Node = "0.5592141266660335 60.523638694508975 0.01 0.15";
        
        Node = "0.5951945528648408 60.024910009142175 0.01 0.15";
        
        Node = "0.6311749399622659 59.527181320961134 0.01 0.15";
        
        Node = "0.7031945528648409 58.52891000914217 0.01 0.15";
        
        Node = "0.739174939962266 58.03118132096113 0.01 0.15";
        
        Node = "0.7752141266660337 57.53163869450896 0.01 0.15";
        
    };
    
    new DecalRoad(road_3_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "-2.99 57.26 0.01 0.3";
        
        Node = "-3.026 57.759 0.01 0.3";
        
        Node = "-3.062 58.257 0.01 0.3";
        
        Node = "-3.098 58.756 0.01 0.3";
        
        Node = "-3.134 59.255 0.01 0.3";
        
        Node = "-3.17 59.753 0.01 0.3";
        
        Node = "-3.206 60.252 0.01 0.3";
        
        Node = "-3.242 60.751 0.01 0.3";
        
        Node = "-3.278 61.25 0.01 0.3";
        
        Node = "-3.314 61.748 0.01 0.3";
        
        Node = "-3.35 62.247 0.01 0.3";
        
        Node = "-3.386 62.746 0.01 0.3";
        
        Node = "-3.422 63.244 0.01 0.3";
        
        Node = "-3.459 63.743 0.01 0.3";
        
        Node = "-3.495 64.242 0.01 0.3";
        
        Node = "-3.531 64.74 0.01 0.3";
        
        Node = "-3.567 65.239 0.01 0.3";
        
        Node = "-3.602 65.738 0.01 0.3";
        
        Node = "-3.635 66.237 0.01 0.3";
        
        Node = "-3.668 66.736 0.01 0.3";
        
        Node = "-3.702 67.234 0.01 0.3";
        
        Node = "-3.736 67.733 0.01 0.3";
        
        Node = "-3.771 68.232 0.01 0.3";
        
        Node = "-3.807 68.731 0.01 0.3";
        
        Node = "-3.843 69.229 0.01 0.3";
        
        Node = "-3.88 69.728 0.01 0.3";
        
        Node = "-3.916 70.227 0.01 0.3";
        
        Node = "-3.952 70.725 0.01 0.3";
        
        Node = "-3.988 71.224 0.01 0.3";
        
        Node = "-4.024 71.723 0.01 0.3";
        
        Node = "-4.06 72.222 0.01 0.3";
        
        Node = "-4.096 72.72 0.01 0.3";
        
        Node = "-4.132 73.219 0.01 0.3";
        
        Node = "-4.168 73.718 0.01 0.3";
        
        Node = "-4.204 74.216 0.01 0.3";
        
        Node = "-4.24 74.715 0.01 0.3";
        
        Node = "-4.276 75.214 0.01 0.3";
        
        Node = "-4.312 75.712 0.01 0.3";
        
        Node = "-4.348 76.211 0.01 0.3";
        
        Node = "-4.384 76.71 0.01 0.3";
        
        Node = "-4.42 77.208 0.01 0.3";
        
        Node = "-4.456 77.707 0.01 0.3";
        
        Node = "-4.492 78.206 0.01 0.3";
        
        Node = "-4.528 78.705 0.01 0.3";
        
        Node = "-4.564 79.203 0.01 0.3";
        
        Node = "-4.6 79.702 0.01 0.3";
        
        Node = "-4.636 80.201 0.01 0.3";
        
        Node = "-4.672 80.699 0.01 0.3";
        
        Node = "-4.708 81.198 0.01 0.3";
        
        Node = "-4.744 81.697 0.01 0.3";
        
        Node = "-4.78 82.195 0.01 0.3";
        
        Node = "-4.816 82.694 0.01 0.3";
        
        Node = "-4.852 83.193 0.01 0.3";
        
        Node = "-4.888 83.691 0.01 0.3";
        
        Node = "-4.924 84.19 0.01 0.3";
        
        Node = "-4.96 84.689 0.01 0.3";
        
        Node = "-4.996 85.187 0.01 0.3";
        
        Node = "-5.032 85.686 0.01 0.3";
        
        Node = "-5.068 86.185 0.01 0.3";
        
        Node = "-5.104 86.684 0.01 0.3";
        
        Node = "-5.14 87.182 0.01 0.3";
        
        Node = "-5.176 87.681 0.01 0.3";
        
        Node = "-5.212 88.18 0.01 0.3";
        
        Node = "-5.248 88.678 0.01 0.3";
        
        Node = "-5.284 89.177 0.01 0.3";
        
        Node = "-5.32 89.676 0.01 0.3";
        
        Node = "-5.356 90.174 0.01 0.3";
        
        Node = "-5.392 90.673 0.01 0.3";
        
        Node = "-5.428 91.172 0.01 0.3";
        
        Node = "-5.464 91.671 0.01 0.3";
        
        Node = "-5.5 92.169 0.01 0.3";
        
        Node = "-5.536 92.668 0.01 0.3";
        
        Node = "-5.572 93.167 0.01 0.3";
        
        Node = "-5.608 93.665 0.01 0.3";
        
        Node = "-5.644 94.164 0.01 0.3";
        
        Node = "-5.68 94.663 0.01 0.3";
        
        Node = "-5.716 95.161 0.01 0.3";
        
        Node = "-5.752 95.66 0.01 0.3";
        
        Node = "-5.788 96.159 0.01 0.3";
        
        Node = "-5.824 96.657 0.01 0.3";
        
        Node = "-5.86 97.156 0.01 0.3";
        
        Node = "-5.896 97.655 0.01 0.3";
        
        Node = "-5.932 98.154 0.01 0.3";
        
        Node = "-5.968 98.652 0.01 0.3";
        
        Node = "-6.004 99.151 0.01 0.3";
        
        Node = "-6.04 99.65 0.01 0.3";
        
        Node = "-6.076 100.148 0.01 0.3";
        
        Node = "-6.112 100.647 0.01 0.3";
        
        Node = "-6.148 101.146 0.01 0.3";
        
        Node = "-6.184 101.644 0.01 0.3";
        
        Node = "-6.22 102.143 0.01 0.3";
        
        Node = "-6.256 102.642 0.01 0.3";
        
        Node = "-6.292 103.14 0.01 0.3";
        
        Node = "-6.328 103.639 0.01 0.3";
        
        Node = "-6.364 104.138 0.01 0.3";
        
        Node = "-6.4 104.637 0.01 0.3";
        
        Node = "-6.436 105.135 0.01 0.3";
        
        Node = "-6.472 105.634 0.01 0.3";
        
        Node = "-6.508 106.133 0.01 0.3";
        
        Node = "-6.544 106.631 0.01 0.3";
        
        Node = "-6.58 107.13 0.01 0.3";
        
    };
    
    new DecalRoad(road_4) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "-2.99 57.26 0.01 7.999999999999998";
        
        Node = "-2.931 56.262 0.01 8.0";
        
        Node = "-2.875 55.265 0.01 8.0";
        
        Node = "-2.821 54.267 0.01 7.999999999999999";
        
        Node = "-2.769 53.269 0.01 7.999999999999998";
        
        Node = "-2.717 52.271 0.01 7.999999999999998";
        
        Node = "-2.664 51.273 0.01 8.0";
        
        Node = "-2.607 50.275 0.01 8.000000000000002";
        
        Node = "-2.549 49.277 0.01 8.000000000000004";
        
        Node = "-2.494 48.279 0.01 8.000000000000002";
        
        Node = "-2.442 47.281 0.01 7.999999999999999";
        
        Node = "-2.39 46.283 0.01 7.999999999999998";
        
        Node = "-2.338 45.285 0.01 7.999999999999999";
        
        Node = "-2.282 44.287 0.01 8.000000000000002";
        
        Node = "-2.224 43.29 0.01 8.000000000000002";
        
        Node = "-2.167 42.292 0.01 7.999999999999998";
        
        Node = "-2.115 41.294 0.01 7.999999999999998";
        
        Node = "-2.063 40.296 0.01 7.999999999999999";
        
        Node = "-2.011 39.298 0.01 7.999999999999998";
        
        Node = "-1.956 38.3 0.01 7.999999999999999";
        
        Node = "-1.898 37.302 0.01 7.999999999999999";
        
        Node = "-1.841 36.305 0.01 7.999999999999999";
        
        Node = "-1.788 35.307 0.01 8.0";
        
        Node = "-1.736 34.309 0.01 8.0";
        
        Node = "-1.685 33.311 0.01 8.000000000000002";
        
        Node = "-1.631 32.313 0.01 8.000000000000004";
        
        Node = "-1.573 31.315 0.01 8.000000000000002";
        
        Node = "-1.515 30.317 0.01 8.000000000000002";
        
        Node = "-1.462 29.319 0.01 8.0";
        
        Node = "-1.41 28.321 0.01 8.0";
        
        Node = "-1.353 27.323 0.01 8.0";
        
        Node = "-1.295 26.326 0.01 8.0";
        
        Node = "-1.24 25.328 0.01 8.0";
        
        Node = "-1.188 24.33 0.01 8.0";
        
        Node = "-1.137 23.332 0.01 8.0";
        
        Node = "-1.084 22.334 0.01 8.0";
        
        Node = "-1.028 21.336 0.01 8.0";
        
        Node = "-0.969 20.338 0.01 8.000000000000002";
        
        Node = "-0.914 19.341 0.01 8.000000000000004";
        
        Node = "-0.861 18.343 0.01 8.000000000000002";
        
        Node = "-0.809 17.344 0.01 8.000000000000002";
        
        Node = "-0.756 16.345 0.01 8.0";
        
        Node = "-0.705 15.35 0.01 8.0";
        
        Node = "-0.651 14.356 0.01 8.0";
        
        Node = "-0.584 13.349 0.01 8.0";
        
        Node = "-0.512 12.336 0.01 7.999999999999999";
        
        Node = "-0.492 11.365 0.01 8.0";
        
        Node = "-0.512 10.429 0.01 7.999999999999999";
        
        Node = "-0.365 9.351 0.01 7.999999999999999";
        
        Node = "-0.029 8.111 0.01 8.0";
        
        Node = "-0.231 7.339 0.01 8.0";
        
        Node = "-1.217 7.224 0.01 8.000000000000002";
        
        Node = "-2.211 7.116 0.01 8.0";
        
        Node = "-3.204 7.005 0.01 8.0";
        
        Node = "-4.197 6.89 0.01 8.000000000000002";
        
        Node = "-5.19 6.78 0.01 7.999999999999999";
        
        Node = "-6.183 6.671 0.01 8.0";
        
        Node = "-7.177 6.561 0.01 8.0";
        
        Node = "-8.169 6.446 0.01 8.0";
        
        Node = "-9.162 6.333 0.01 8.000000000000002";
        
        Node = "-10.156 6.226 0.01 8.000000000000002";
        
        Node = "-11.149 6.116 0.01 7.999999999999998";
        
        Node = "-12.142 6.002 0.01 7.999999999999999";
        
        Node = "-13.135 5.888 0.01 7.999999999999999";
        
        Node = "-14.128 5.78 0.01 8.0";
        
        Node = "-15.121 5.671 0.01 8.000000000000002";
        
        Node = "-16.114 5.558 0.01 8.000000000000002";
        
        Node = "-17.107 5.444 0.01 8.000000000000002";
        
        Node = "-18.1 5.334 0.01 7.999999999999999";
        
        Node = "-19.094 5.226 0.01 8.0";
        
        Node = "-20.087 5.114 0.01 7.9999999999999964";
        
        Node = "-21.08 5.0 0.01 8.0";
        
        Node = "-22.073 4.889 0.01 8.000000000000002";
        
        Node = "-23.066 4.781 0.01 8.000000000000002";
        
        Node = "-24.059 4.669 0.01 7.999999999999998";
        
        Node = "-25.052 4.556 0.01 8.0";
        
        Node = "-26.045 4.443 0.01 8.0";
        
        Node = "-27.038 4.336 0.01 8.0";
        
        Node = "-28.032 4.225 0.01 8.0";
        
        Node = "-29.024 4.111 0.01 8.0";
        
        Node = "-30.017 3.998 0.01 7.999999999999998";
        
        Node = "-31.011 3.889 0.01 8.0";
        
        Node = "-32.003 3.771 0.01 8.0";
        
        Node = "-32.997 3.664 0.01 7.999999999999999";
        
        Node = "-33.99 3.557 0.01 8.000000000000002";
        
        Node = "-34.983 3.439 0.01 8.0";
        
        Node = "-35.976 3.332 0.01 7.999999999999999";
        
        Node = "-36.969 3.219 0.01 8.0";
        
        Node = "-37.962 3.104 0.01 8.0";
        
        Node = "-38.956 2.997 0.01 8.0";
        
        Node = "-39.949 2.889 0.01 7.999999999999998";
        
        Node = "-40.942 2.77 0.01 8.000000000000002";
        
        Node = "-41.935 2.664 0.01 8.0";
        
        Node = "-42.928 2.549 0.01 7.999999999999998";
        
        Node = "-43.921 2.437 0.01 8.0";
        
        Node = "-44.915 2.33 0.01 8.0";
        
        Node = "-45.908 2.219 0.01 8.000000000000002";
        
        Node = "-46.9 2.102 0.01 8.0";
        
        Node = "-47.894 1.996 0.01 8.0";
        
        Node = "-48.887 1.88 0.01 8.0";
        
        Node = "-49.88 1.77 0.01 8.0";
        
    };
    
    new DecalRoad(road_4_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "0.778420493244107 57.4827823738491 0.01 0.15";
        
        Node = "0.8374204932441072 56.4847823738491 0.01 0.15";
        
        Node = "0.8380591776797894 56.47370242121371 0.01 0.15";
        
        Node = "0.8940591776797895 55.47670242121371 0.01 0.15";
        
        Node = "0.8944860723671271 55.468960168244315 0.01 0.15";
        
        Node = "0.9484860723671269 54.47096016824432 0.01 0.15";
        
        Node = "0.9488861335677505 54.463426932811146 0.01 0.15";
        
        Node = "1.0008861335677506 53.46542693281114 0.01 0.15";
        
        Node = "1.0527879948607346 52.46931044107272 0.01 0.15";
        
        Node = "1.1052879988225357 51.48072546081088 0.01 0.15";
        
        Node = "1.1617504448277045 50.49213737110634 0.01 0.15";
        
        Node = "1.2196410788010952 49.49601922101249 0.01 0.15";
        
        Node = "1.2202804300936312 49.484725875405964 0.01 0.15";
        
        Node = "1.275280430093631 48.486725875405966 0.01 0.15";
        
        Node = "1.2758861335677505 48.475426932811146 0.01 0.15";
        
        Node = "1.3278861335677505 47.47742693281114 0.01 0.15";
        
        Node = "1.3798861335677506 46.479426932811144 0.01 0.15";
        
        Node = "1.431493641513856 45.48895976107627 0.01 0.15";
        
        Node = "1.4868536801289203 44.50236478718638 0.01 0.15";
        
        Node = "1.544628348586845 43.50923815869412 0.01 0.15";
        
        Node = "1.5448579314176971 43.50525541291665 0.01 0.15";
        
        Node = "1.6018579314176975 42.50725541291665 0.01 0.15";
        
        Node = "1.602886133567751 42.488426932811144 0.01 0.15";
        
        Node = "1.6548861335677505 41.49042693281114 0.01 0.15";
        
        Node = "1.758591748688575 39.50007685799225 0.01 0.15";
        
        Node = "1.81296921431623 38.51337302714861 0.01 0.15";
        
        Node = "1.8706410788010952 37.52101922101249 0.01 0.15";
        
        Node = "1.927845634267442 36.52047061299222 0.01 0.15";
        
        Node = "1.9286879741286624 36.505193850329476 0.01 0.15";
        
        Node = "1.9816879741286624 35.50719385032948 0.01 0.15";
        
        Node = "2.0338861335677505 34.50542693281114 0.01 0.15";
        
        Node = "2.0847917797416144 33.50931024306397 0.01 0.15";
        
        Node = "2.1380786174549717 32.52449053865785 0.01 0.15";
        
        Node = "2.2536410788010954 30.536019221012488 0.01 0.15";
        
        Node = "2.2546879741286627 30.517193850329477 0.01 0.15";
        
        Node = "2.3076879741286627 29.519193850329476 0.01 0.15";
        
        Node = "2.3593955451401887 28.52684245686321 0.01 0.15";
        
        Node = "2.415744192227319 27.540246846460462 0.01 0.15";
        
        Node = "2.4736283485868453 26.54523815869412 0.01 0.15";
        
        Node = "2.474280430093631 26.533725875405963 0.01 0.15";
        
        Node = "2.529280430093631 25.535725875405962 0.01 0.15";
        
        Node = "2.529886133567751 25.524426932811146 0.01 0.15";
        
        Node = "2.5818861335677505 24.526426932811145 0.01 0.15";
        
        Node = "2.632888026058934 23.528426834736816 0.01 0.15";
        
        Node = "2.685387976209848 22.539842867744127 0.01 0.15";
        
        Node = "2.74075422865424 21.553137154538717 0.01 0.15";
        
        Node = "2.7994204932441074 20.5607823738491 0.01 0.15";
        
        Node = "2.8002689769068922 20.54593359451342 0.01 0.15";
        
        Node = "2.855268976906892 19.54893359451342 0.01 0.15";
        
        Node = "2.8556879741286623 19.541193850329478 0.01 0.15";
        
        Node = "2.9086879741286626 18.543193850329477 0.01 0.15";
        
        Node = "2.9088963456722174 18.539230840815772 0.01 0.15";
        
        Node = "2.9607984025346292 17.542112479170587 0.01 0.15";
        
        Node = "3.013698581111907 16.544994018817746 0.01 0.15";
        
        Node = "3.014050897553779 16.538238789723863 0.01 0.15";
        
        Node = "3.064755131746293 15.549009122634622 0.01 0.15";
        
        Node = "3.117196252241008 14.583704052787455 0.01 0.15";
        
        Node = "3.1821056109859063 13.608126078815626 0.01 0.15";
        
        Node = "3.2535007048064952 12.603636772700956 0.01 0.15";
        
        Node = "3.2621994834192463 12.413738403365999 0.01 0.15";
        
        Node = "3.2821994834192463 11.442738403365999 0.01 0.15";
        
        Node = "3.282138517280053 11.284356014588033 0.01 0.15";
        
        Node = "3.268477723411571 10.645030861543082 0.01 0.15";
        
        Node = "3.3424178150093766 10.102803523159174 0.01 0.15";
        
        Node = "3.614605953754178 9.098299677791456 0.01 0.15";
        
        Node = "3.6974777216578767 8.714314834881028 0.01 0.15";
        
        Node = "3.739997535615287 8.323797031290134 0.01 0.15";
        
        Node = "3.7417049722178257 7.9309749670413465 0.01 0.15";
        
        Node = "3.702581542584492 7.540102293713887 0.01 0.15";
        
        Node = "3.6230508925676688 7.1554115540172685 0.01 0.15";
        
        Node = "3.421050892567669 6.383411554017268 0.01 0.15";
        
        Node = "3.3075412670296203 6.023952205610607 0.01 0.15";
        
        Node = "3.158748231615617 5.677605427281407 0.01 0.15";
        
        Node = "2.976155427537961 5.347824702942055 0.01 0.15";
        
        Node = "2.7615835193757836 5.037898333501875 0.01 0.15";
        
        Node = "2.5171720409121408 4.750916648647344 0.01 0.15";
        
        Node = "2.2453580614708737 4.489741192627772 0.01 0.15";
        
        Node = "1.9488518854748806 4.256976191300333 0.01 0.15";
        
        Node = "1.6306100275297424 4.054942584941502 0.01 0.15";
        
        Node = "1.293805732502823 3.8856548857482363 0.01 0.15";
        
        Node = "0.94179733454728 3.750801090786801 0.01 0.15";
        
        Node = "0.5780947705686296 3.651725850680683 0.01 0.15";
        
        Node = "0.20632458203393558 3.5894170618655683 0.01 0.15";
        
        Node = "-0.7796754179660645 3.474417061865568 0.01 0.15";
        
        Node = "-0.809238831236682 3.4710870208265194 0.01 0.15";
        
        Node = "-1.797434964800717 3.363717622008696 0.01 0.15";
        
        Node = "-2.7771735141991054 3.254200019810085 0.01 0.15";
        
        Node = "-3.7627173267667278 3.14006352590749 0.01 0.15";
        
        Node = "-3.7813651517769697 3.1379508701320793 0.01 0.15";
        
        Node = "-4.77436515177697 3.02795087013208 0.01 0.15";
        
        Node = "-5.769438266638202 2.9187214279647935 0.01 0.15";
        
        Node = "-6.752028920072704 2.8099840317094658 0.01 0.15";
        
        Node = "-7.734285344373975 2.696113579295508 0.01 0.15";
        
        Node = "-7.742172670462821 2.69520762627946 0.01 0.15";
        
        Node = "-8.735172670462822 2.5822076262794607 0.01 0.15";
        
        Node = "-8.757970949121123 2.5796833965083747 0.01 0.15";
        
        Node = "-9.746167070480611 2.473308160104486 0.01 0.15";
        
        Node = "-10.725903082698869 2.3647774840279414 0.01 0.15";
        
        Node = "-12.704444360574033 2.1376337723685572 0.01 0.15";
        
        Node = "-12.726832993864889 2.1351311380355025 0.01 0.15";
        
        Node = "-13.717965625941728 2.027334235453128 0.01 0.15";
        
        Node = "-14.701633906299806 1.919358563188243 0.01 0.15";
        
        Node = "-15.685308409614214 1.8074197727808627 0.01 0.15";
        
        Node = "-16.676444360574035 1.6936337723685573 0.01 0.15";
        
        Node = "-16.691365151776967 1.69195087013208 0.01 0.15";
        
        Node = "-17.68436515177697 1.5819508701320797 0.01 0.15";
        
        Node = "-17.692238831236686 1.5810870208265184 0.01 0.15";
        
        Node = "-18.678568803378855 1.473920384014291 0.01 0.15";
        
        Node = "-19.660172881397344 1.3632057246607454 0.01 0.15";
        
        Node = "-20.649444360574034 1.2496337723685573 0.01 0.15";
        
        Node = "-20.66063307656678 1.248366171448744 0.01 0.15";
        
        Node = "-21.65363307656678 1.1373661714487442 0.01 0.15";
        
        Node = "-21.664832993864888 1.1361311380355033 0.01 0.15";
        
        Node = "-22.650365974490107 1.028943260988651 0.01 0.15";
        
        Node = "-23.634037353180233 0.9179954317708322 0.01 0.15";
        
        Node = "-24.62517267046282 0.8052076262794605 0.01 0.15";
        
        Node = "-25.61817267046282 0.6922076262794605 0.01 0.15";
        
        Node = "-25.640568739629096 0.6897267145017532 0.01 0.15";
        
        Node = "-26.626307716985366 0.5835091207685 0.01 0.15";
        
        Node = "-27.607031788081766 0.47399164401628546 0.01 0.15";
        
        Node = "-28.593015987158672 0.3606829759772059 0.01 0.15";
        
        Node = "-28.59717267046282 0.36020762627946024 0.01 0.15";
        
        Node = "-29.59017267046282 0.2472076262794607 0.01 0.15";
        
        Node = "-29.60550792272443 0.24549426778060335 0.01 0.15";
        
        Node = "-30.58229554171994 0.138381742156347 0.01 0.15";
        
        Node = "-31.557101199947056 0.022427036843041037 0.01 0.15";
        
        Node = "-31.598970949121124 0.01768339650837447 0.01 0.15";
        
        Node = "-32.59276984321332 -0.08929495527016144 0.01 0.15";
        
        Node = "-33.56504365485883 -0.19406161976771424 0.01 0.15";
        
        Node = "-34.53754398630322 -0.30962560678728934 0.01 0.15";
        
        Node = "-34.57856873962909 -0.31427328549824596 0.01 0.15";
        
        Node = "-35.560367002874635 -0.4200662504199715 0.01 0.15";
        
        Node = "-36.538444573254665 -0.5313681290231368 0.01 0.15";
        
        Node = "-37.527717326766734 -0.6459364740925095 0.01 0.15";
        
        Node = "-37.55797094912113 -0.6493166034916253 0.01 0.15";
        
        Node = "-38.54990184807844 -0.7560938732989019 0.01 0.15";
        
        Node = "-39.5203147637128 -0.8616372719781676 0.01 0.15";
        
        Node = "-40.492822161197246 -0.978181461606213 0.01 0.15";
        
        Node = "-40.541305687768116 -0.9836740759081644 0.01 0.15";
        
        Node = "-41.51750314196651 -1.087880450676572 0.01 0.15";
        
        Node = "-42.49371732676672 -1.2009364740925093 0.01 0.15";
        
        Node = "-42.50490224595818 -1.202214908602914 0.01 0.15";
        
        Node = "-43.49790224595818 -1.314214908602914 0.01 0.15";
        
        Node = "-43.516970949121124 -1.3163166034916256 0.01 0.15";
        
        Node = "-44.503300293299596 -1.4224908890319639 0.01 0.15";
        
        Node = "-45.47722652633406 -1.5313587761083238 0.01 0.15";
        
        Node = "-46.45782794031062 -1.6470143864261253 0.01 0.15";
        
        Node = "-46.49970426582431 -1.6517166016097629 0.01 0.15";
        
        Node = "-47.474837333751395 -1.7557046350104373 0.01 0.15";
        
        Node = "-48.44899157949723 -1.8695031168901122 0.01 0.15";
        
        Node = "-48.47136515177697 -1.8720491298679205 0.01 0.15";
        
        Node = "-49.464365151776974 -1.9820491298679204 0.01 0.15";
        
    };
    
    new DecalRoad(road_4_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-50.29563484822303 5.52204912986792 0.01 0.15";
        
        Node = "-49.31382543113732 5.630809488256065 0.01 0.15";
        
        Node = "-48.33200842050277 5.745503116890112 0.01 0.15";
        
        Node = "-48.294295734175684 5.749716601609762 0.01 0.15";
        
        Node = "-47.32124701958715 5.853482359905923 0.01 0.15";
        
        Node = "-46.35017205968937 5.968014386426125 0.01 0.15";
        
        Node = "-46.327366923433225 5.9706338285512555 0.01 0.15";
        
        Node = "-45.33436692343322 6.081633828551256 0.01 0.15";
        
        Node = "-45.319029050878875 6.0833166034916255 0.01 0.15";
        
        Node = "-44.33456607262016 6.189289982438992 0.01 0.15";
        
        Node = "-43.35669116677011 6.299584030228726 0.01 0.15";
        
        Node = "-42.36928267323328 6.413936474092509 0.01 0.15";
        
        Node = "-42.33569431223189 6.417674075908165 0.01 0.15";
        
        Node = "-41.36695382454691 6.521084440152483 0.01 0.15";
        
        Node = "-40.39817783880275 6.637181461606213 0.01 0.15";
        
        Node = "-40.357167006135114 6.641868861964497 0.01 0.15";
        
        Node = "-39.36416700613512 6.749868861964497 0.01 0.15";
        
        Node = "-39.36002905087888 6.750316603491625 0.01 0.15";
        
        Node = "-38.38116267651098 6.855687531114729 0.01 0.15";
        
        Node = "-37.40328267323327 6.9689364740925095 0.01 0.15";
        
        Node = "-37.395827329537184 6.969792373720539 0.01 0.15";
        
        Node = "-36.40282732953718 7.082792373720539 0.01 0.15";
        
        Node = "-36.380431260370905 7.085273285498246 0.01 0.15";
        
        Node = "-35.4079563451412 7.190061619767709 0.01 0.15";
        
        Node = "-34.43545601369678 7.30562560678729 0.01 0.15";
        
        Node = "-34.39443126037091 7.310273285498246 0.01 0.15";
        
        Node = "-33.401431260370906 7.417273285498246 0.01 0.15";
        
        Node = "-32.42797716313287 7.522061625613177 0.01 0.15";
        
        Node = "-31.456898800052944 7.637572963156959 0.01 0.15";
        
        Node = "-31.422492077275567 7.641505732219397 0.01 0.15";
        
        Node = "-30.43616145428902 7.74966472407607 0.01 0.15";
        
        Node = "-29.452905802895412 7.861555850568998 0.01 0.15";
        
        Node = "-28.46298401284133 7.975317024022793 0.01 0.15";
        
        Node = "-28.450950224058165 7.976680384809134 0.01 0.15";
        
        Node = "-27.456950224058165 8.087680384809135 0.01 0.15";
        
        Node = "-27.442431260370906 8.089273285498248 0.01 0.15";
        
        Node = "-26.460632997125142 8.195066250419996 0.01 0.15";
        
        Node = "-25.478827329537182 8.306792373720539 0.01 0.15";
        
        Node = "-24.48582732953718 8.41979237372054 0.01 0.15";
        
        Node = "-23.48909775404182 8.532214908602914 0.01 0.15";
        
        Node = "-23.47416700613511 8.533868861964496 0.01 0.15";
        
        Node = "-22.486767886382186 8.641259702783547 0.01 0.15";
        
        Node = "-21.504962226699153 8.751008371690714 0.01 0.15";
        
        Node = "-20.517555639425964 8.864366227631443 0.01 0.15";
        
        Node = "-20.51009775404182 8.865214908602914 0.01 0.15";
        
        Node = "-19.51709775404182 8.977214908602914 0.01 0.15";
        
        Node = "-19.501761168763316 8.978912979173481 0.01 0.15";
        
        Node = "-18.51169846163877 9.08648518477655 0.01 0.15";
        
        Node = "-17.530096917301346 9.195222515972034 0.01 0.15";
        
        Node = "-16.544555639425965 9.308366227631442 0.01 0.15";
        
        Node = "-15.547827329537183 9.421792373720539 0.01 0.15";
        
        Node = "-15.532901538941054 9.423460808885016 0.01 0.15";
        
        Node = "-14.539901538941054 9.532460808885016 0.01 0.15";
        
        Node = "-13.55436505654073 9.639650947116756 0.01 0.15";
        
        Node = "-11.579555639425966 9.866366227631442 0.01 0.15";
        
        Node = "-11.564634848223033 9.86804912986792 0.01 0.15";
        
        Node = "-10.571634848223034 9.97804912986792 0.01 0.15";
        
        Node = "-10.560029050878878 9.979316603491625 0.01 0.15";
        
        Node = "-9.57743202464703 10.085089120399882 0.01 0.15";
        
        Node = "-8.599771468908255 10.196343544164717 0.01 0.15";
        
        Node = "-7.611714655626025 10.310886420704492 0.01 0.15";
        
        Node = "-7.592221765879849 10.31309486622335 0.01 0.15";
        
        Node = "-6.598221765879849 10.42309486622335 0.01 0.15";
        
        Node = "-5.6037682959833175 10.532255897991153 0.01 0.15";
        
        Node = "-4.6219613864619316 10.641015978602786 0.01 0.15";
        
        Node = "-4.282491375309313 10.680330229642616 0.01 0.15";
        
        Node = "-4.26783062315143 11.366453430631529 0.01 0.15";
        
        Node = "-4.284241528107314 12.163202866239732 0.01 0.15";
        
        Node = "-4.349500704806495 13.081363227299045 0.01 0.15";
        
        Node = "-4.350672039851492 13.098387262492503 0.01 0.15";
        
        Node = "-4.417672039851492 14.105387262492503 0.01 0.15";
        
        Node = "-4.42044170355034 14.151221476869498 0.01 0.15";
        
        Node = "-4.474441703550339 15.145221476869498 0.01 0.15";
        
        Node = "-4.475050897553779 15.156761210276137 0.01 0.15";
        
        Node = "-4.525877765502368 16.148383437900545 0.01 0.15";
        
        Node = "-4.578698581111907 17.144005981182254 0.01 0.15";
        
        Node = "-4.63079320143297 18.14478759966484 0.01 0.15";
        
        Node = "-4.6834824484572835 19.136936062500034 0.01 0.15";
        
        Node = "-4.7378593606612736 20.12264118008874 0.01 0.15";
        
        Node = "-4.796420493244107 21.1132176261509 0.01 0.15";
        
        Node = "-4.797071049151668 21.124509039326156 0.01 0.15";
        
        Node = "-4.8530710491516675 22.122509039326157 0.01 0.15";
        
        Node = "-4.853687974128663 22.133806149670523 0.01 0.15";
        
        Node = "-4.906687974128662 23.131806149670524 0.01 0.15";
        
        Node = "-4.907080548906962 23.13934057315205 0.01 0.15";
        
        Node = "-4.957984282494928 24.135456771598903 0.01 0.15";
        
        Node = "-5.009591748688563 25.125923142007522 0.01 0.15";
        
        Node = "-5.063963180416815 26.11251748500381 0.01 0.15";
        
        Node = "-5.121628348586845 27.103761841305882 0.01 0.15";
        
        Node = "-5.121857931417698 27.10774458708336 0.01 0.15";
        
        Node = "-5.1788579314176975 28.10574458708336 0.01 0.15";
        
        Node = "-5.17988613356775 28.124573067188855 0.01 0.15";
        
        Node = "-5.231787994860768 29.120689558927907 0.01 0.15";
        
        Node = "-5.28418803264104 30.10739215713003 0.01 0.15";
        
        Node = "-5.399641078801095 32.093980778987515 0.01 0.15";
        
        Node = "-5.400486072367127 32.10903983175569 0.01 0.15";
        
        Node = "-5.454486072367127 33.107039831755685 0.01 0.15";
        
        Node = "-5.455080548906962 33.11834057315205 0.01 0.15";
        
        Node = "-5.505984282494947 34.114456771599265 0.01 0.15";
        
        Node = "-5.557787994860711 35.10868955892684 0.01 0.15";
        
        Node = "-5.610282283301124 36.097166914842525 0.01 0.15";
        
        Node = "-5.666744191867015 37.08475503484594 0.01 0.15";
        
        Node = "-5.7246410788010955 38.08098077898751 0.01 0.15";
        
        Node = "-5.725280430093631 38.092274124594034 0.01 0.15";
        
        Node = "-5.780280430093631 39.09027412459404 0.01 0.15";
        
        Node = "-5.780886133567751 39.10157306718886 0.01 0.15";
        
        Node = "-5.8848861335677505 41.097573067188854 0.01 0.15";
        
        Node = "-5.936395545140181 42.08615754313667 0.01 0.15";
        
        Node = "-5.992744192227341 43.072753153539914 0.01 0.15";
        
        Node = "-6.050628348586845 44.06776184130588 0.01 0.15";
        
        Node = "-6.051071049151668 44.07550903932616 0.01 0.15";
        
        Node = "-6.107071049151668 45.073509039326154 0.01 0.15";
        
        Node = "-6.107886133567751 45.088573067188854 0.01 0.15";
        
        Node = "-6.159886133567751 46.08657306718886 0.01 0.15";
        
        Node = "-6.21188613356775 47.084573067188856 0.01 0.15";
        
        Node = "-6.26359174868856 48.076923142007466 0.01 0.15";
        
        Node = "-6.317969214316239 49.06362697285154 0.01 0.15";
        
        Node = "-6.375641078801095 50.05598077898751 0.01 0.15";
        
        Node = "-6.432857931417698 51.05774458708336 0.01 0.15";
        
        Node = "-6.433687974128663 51.07280614967053 0.01 0.15";
        
        Node = "-6.486687974128662 52.070806149670524 0.01 0.15";
        
        Node = "-6.53888613356775 53.072573067188856 0.01 0.15";
        
        Node = "-6.590689866519251 54.066806249604184 0.01 0.15";
        
        Node = "-6.64427660075612 55.057168486055964 0.01 0.15";
        
        Node = "-6.699747979122414 56.04475713304158 0.01 0.15";
        
        Node = "-6.758420493244108 57.0372176261509 0.01 0.15";
        
    };
    
    new DecalRoad(road_4_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "-2.99 57.26 0.01 0.3";
        
        Node = "-2.931 56.262 0.01 0.3";
        
        Node = "-2.875 55.265 0.01 0.3";
        
        Node = "-2.821 54.267 0.01 0.3";
        
        Node = "-2.769 53.269 0.01 0.3";
        
        Node = "-2.717 52.271 0.01 0.3";
        
        Node = "-2.664 51.273 0.01 0.3";
        
        Node = "-2.607 50.275 0.01 0.3";
        
        Node = "-2.549 49.277 0.01 0.3";
        
        Node = "-2.494 48.279 0.01 0.3";
        
        Node = "-2.442 47.281 0.01 0.3";
        
        Node = "-2.39 46.283 0.01 0.3";
        
        Node = "-2.338 45.285 0.01 0.3";
        
        Node = "-2.282 44.287 0.01 0.3";
        
        Node = "-2.224 43.29 0.01 0.3";
        
        Node = "-2.167 42.292 0.01 0.3";
        
        Node = "-2.115 41.294 0.01 0.3";
        
        Node = "-2.063 40.296 0.01 0.3";
        
        Node = "-2.011 39.298 0.01 0.3";
        
        Node = "-1.956 38.3 0.01 0.3";
        
        Node = "-1.898 37.302 0.01 0.3";
        
        Node = "-1.841 36.305 0.01 0.3";
        
        Node = "-1.788 35.307 0.01 0.3";
        
        Node = "-1.736 34.309 0.01 0.3";
        
        Node = "-1.685 33.311 0.01 0.3";
        
        Node = "-1.631 32.313 0.01 0.3";
        
        Node = "-1.573 31.315 0.01 0.3";
        
        Node = "-1.515 30.317 0.01 0.3";
        
        Node = "-1.462 29.319 0.01 0.3";
        
        Node = "-1.41 28.321 0.01 0.3";
        
        Node = "-1.353 27.323 0.01 0.3";
        
        Node = "-1.295 26.326 0.01 0.3";
        
        Node = "-1.24 25.328 0.01 0.3";
        
        Node = "-1.188 24.33 0.01 0.3";
        
        Node = "-1.137 23.332 0.01 0.3";
        
        Node = "-1.084 22.334 0.01 0.3";
        
        Node = "-1.028 21.336 0.01 0.3";
        
        Node = "-0.969 20.338 0.01 0.3";
        
        Node = "-0.914 19.341 0.01 0.3";
        
        Node = "-0.861 18.343 0.01 0.3";
        
        Node = "-0.809 17.344 0.01 0.3";
        
        Node = "-0.756 16.345 0.01 0.3";
        
        Node = "-0.705 15.35 0.01 0.3";
        
        Node = "-0.651 14.356 0.01 0.3";
        
        Node = "-0.584 13.349 0.01 0.3";
        
        Node = "-0.512 12.336 0.01 0.3";
        
        Node = "-0.492 11.365 0.01 0.3";
        
        Node = "-0.512 10.429 0.01 0.3";
        
        Node = "-0.365 9.351 0.01 0.3";
        
        Node = "-0.029 8.111 0.01 0.3";
        
        Node = "-0.231 7.339 0.01 0.3";
        
        Node = "-1.217 7.224 0.01 0.3";
        
        Node = "-2.211 7.116 0.01 0.3";
        
        Node = "-3.204 7.005 0.01 0.3";
        
        Node = "-4.197 6.89 0.01 0.3";
        
        Node = "-5.19 6.78 0.01 0.3";
        
        Node = "-6.183 6.671 0.01 0.3";
        
        Node = "-7.177 6.561 0.01 0.3";
        
        Node = "-8.169 6.446 0.01 0.3";
        
        Node = "-9.162 6.333 0.01 0.3";
        
        Node = "-10.156 6.226 0.01 0.3";
        
        Node = "-11.149 6.116 0.01 0.3";
        
        Node = "-12.142 6.002 0.01 0.3";
        
        Node = "-13.135 5.888 0.01 0.3";
        
        Node = "-14.128 5.78 0.01 0.3";
        
        Node = "-15.121 5.671 0.01 0.3";
        
        Node = "-16.114 5.558 0.01 0.3";
        
        Node = "-17.107 5.444 0.01 0.3";
        
        Node = "-18.1 5.334 0.01 0.3";
        
        Node = "-19.094 5.226 0.01 0.3";
        
        Node = "-20.087 5.114 0.01 0.3";
        
        Node = "-21.08 5.0 0.01 0.3";
        
        Node = "-22.073 4.889 0.01 0.3";
        
        Node = "-23.066 4.781 0.01 0.3";
        
        Node = "-24.059 4.669 0.01 0.3";
        
        Node = "-25.052 4.556 0.01 0.3";
        
        Node = "-26.045 4.443 0.01 0.3";
        
        Node = "-27.038 4.336 0.01 0.3";
        
        Node = "-28.032 4.225 0.01 0.3";
        
        Node = "-29.024 4.111 0.01 0.3";
        
        Node = "-30.017 3.998 0.01 0.3";
        
        Node = "-31.011 3.889 0.01 0.3";
        
        Node = "-32.003 3.771 0.01 0.3";
        
        Node = "-32.997 3.664 0.01 0.3";
        
        Node = "-33.99 3.557 0.01 0.3";
        
        Node = "-34.983 3.439 0.01 0.3";
        
        Node = "-35.976 3.332 0.01 0.3";
        
        Node = "-36.969 3.219 0.01 0.3";
        
        Node = "-37.962 3.104 0.01 0.3";
        
        Node = "-38.956 2.997 0.01 0.3";
        
        Node = "-39.949 2.889 0.01 0.3";
        
        Node = "-40.942 2.77 0.01 0.3";
        
        Node = "-41.935 2.664 0.01 0.3";
        
        Node = "-42.928 2.549 0.01 0.3";
        
        Node = "-43.921 2.437 0.01 0.3";
        
        Node = "-44.915 2.33 0.01 0.3";
        
        Node = "-45.908 2.219 0.01 0.3";
        
        Node = "-46.9 2.102 0.01 0.3";
        
        Node = "-47.894 1.996 0.01 0.3";
        
        Node = "-48.887 1.88 0.01 0.3";
        
        Node = "-49.88 1.77 0.01 0.3";
        
    };
    
    new DecalRoad(road_5) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "-59.08 -47.37 0.01 11.999999999999998";
        
        Node = "-58.985 -46.879 0.01 11.999999999999998";
        
        Node = "-58.89 -46.388 0.01 11.999999999999995";
        
        Node = "-58.797 -45.897 0.01 11.999999999999996";
        
        Node = "-58.704 -45.406 0.01 11.999999999999998";
        
        Node = "-58.612 -44.914 0.01 11.999999999999998";
        
        Node = "-58.521 -44.423 0.01 11.999999999999998";
        
        Node = "-58.43 -43.931 0.01 12.0";
        
        Node = "-58.339 -43.44 0.01 12.000000000000002";
        
        Node = "-58.249 -42.948 0.01 11.999999999999998";
        
        Node = "-58.158 -42.456 0.01 12.0";
        
        Node = "-58.067 -41.965 0.01 11.999999999999998";
        
        Node = "-57.976 -41.473 0.01 12.0";
        
        Node = "-57.883 -40.982 0.01 12.000000000000005";
        
        Node = "-57.79 -40.491 0.01 12.000000000000005";
        
        Node = "-57.696 -40.0 0.01 12.000000000000004";
        
        Node = "-57.602 -39.509 0.01 12.000000000000004";
        
        Node = "-57.509 -39.017 0.01 12.000000000000004";
        
        Node = "-57.417 -38.526 0.01 12.000000000000005";
        
        Node = "-57.325 -38.035 0.01 12.000000000000005";
        
        Node = "-57.234 -37.543 0.01 12.000000000000005";
        
        Node = "-57.144 -37.051 0.01 12.000000000000004";
        
        Node = "-57.053 -36.56 0.01 12.000000000000004";
        
        Node = "-56.962 -36.068 0.01 12.0";
        
        Node = "-56.871 -35.577 0.01 12.000000000000002";
        
        Node = "-56.779 -35.085 0.01 12.000000000000002";
        
        Node = "-56.686 -34.594 0.01 11.999999999999998";
        
        Node = "-56.592 -34.103 0.01 12.000000000000002";
        
        Node = "-56.499 -33.612 0.01 12.000000000000002";
        
        Node = "-56.405 -33.121 0.01 11.999999999999996";
        
        Node = "-56.313 -32.629 0.01 11.999999999999995";
        
        Node = "-56.221 -32.138 0.01 11.999999999999998";
        
        Node = "-56.131 -31.646 0.01 11.999999999999998";
        
        Node = "-56.04 -31.155 0.01 11.999999999999998";
        
        Node = "-55.95 -30.663 0.01 12.0";
        
        Node = "-55.859 -30.171 0.01 12.0";
        
        Node = "-55.769 -29.679 0.01 12.0";
        
        Node = "-55.677 -29.188 0.01 12.0";
        
        Node = "-55.584 -28.697 0.01 12.000000000000004";
        
        Node = "-55.49 -28.206 0.01 12.000000000000002";
        
        Node = "-55.396 -27.715 0.01 12.0";
        
        Node = "-55.302 -27.224 0.01 12.000000000000002";
        
        Node = "-55.208 -26.733 0.01 12.000000000000004";
        
        Node = "-55.116 -26.241 0.01 12.000000000000004";
        
        Node = "-55.025 -25.75 0.01 12.0";
        
        Node = "-54.935 -25.258 0.01 11.999999999999996";
        
        Node = "-54.845 -24.766 0.01 11.999999999999996";
        
        Node = "-54.754 -24.275 0.01 12.0";
        
        Node = "-54.663 -23.783 0.01 12.0";
        
        Node = "-54.572 -23.291 0.01 11.999999999999998";
        
        Node = "-54.48 -22.8 0.01 11.999999999999998";
        
        Node = "-54.387 -22.309 0.01 11.999999999999996";
        
        Node = "-54.293 -21.818 0.01 11.999999999999998";
        
        Node = "-54.2 -21.327 0.01 11.999999999999996";
        
        Node = "-54.106 -20.835 0.01 11.999999999999996";
        
        Node = "-54.014 -20.344 0.01 11.999999999999995";
        
        Node = "-53.922 -19.853 0.01 11.999999999999995";
        
        Node = "-53.83 -19.361 0.01 12.0";
        
        Node = "-53.739 -18.87 0.01 12.0";
        
        Node = "-53.649 -18.378 0.01 12.0";
        
        Node = "-53.558 -17.886 0.01 12.000000000000005";
        
        Node = "-53.467 -17.395 0.01 12.000000000000004";
        
        Node = "-53.376 -16.903 0.01 12.000000000000004";
        
        Node = "-53.283 -16.412 0.01 12.000000000000005";
        
        Node = "-53.19 -15.921 0.01 12.000000000000005";
        
        Node = "-53.096 -15.43 0.01 12.000000000000005";
        
        Node = "-53.002 -14.939 0.01 12.000000000000007";
        
        Node = "-52.909 -14.447 0.01 12.000000000000002";
        
        Node = "-52.818 -13.956 0.01 12.000000000000004";
        
        Node = "-52.726 -13.464 0.01 11.999999999999998";
        
        Node = "-52.636 -12.973 0.01 12.0";
        
        Node = "-52.546 -12.481 0.01 12.0";
        
        Node = "-52.455 -11.989 0.01 12.0";
        
        Node = "-52.365 -11.498 0.01 12.000000000000002";
        
        Node = "-52.273 -11.006 0.01 12.0";
        
        Node = "-52.181 -10.515 0.01 12.0";
        
        Node = "-52.087 -10.024 0.01 12.000000000000002";
        
        Node = "-51.993 -9.533 0.01 12.000000000000004";
        
        Node = "-51.899 -9.042 0.01 12.0";
        
        Node = "-51.805 -8.551 0.01 12.000000000000005";
        
        Node = "-51.713 -8.059 0.01 12.000000000000005";
        
        Node = "-51.621 -7.568 0.01 12.000000000000004";
        
        Node = "-51.531 -7.076 0.01 12.0";
        
        Node = "-51.44 -6.585 0.01 12.0";
        
        Node = "-51.35 -6.093 0.01 12.0";
        
        Node = "-51.259 -5.601 0.01 11.999999999999998";
        
        Node = "-51.168 -5.11 0.01 12.0";
        
        Node = "-51.077 -4.618 0.01 12.000000000000002";
        
        Node = "-50.984 -4.127 0.01 12.0";
        
        Node = "-50.891 -3.636 0.01 12.000000000000002";
        
        Node = "-50.797 -3.145 0.01 12.000000000000002";
        
        Node = "-50.703 -2.653 0.01 12.0";
        
        Node = "-50.61 -2.162 0.01 12.0";
        
        Node = "-50.518 -1.671 0.01 11.999999999999998";
        
        Node = "-50.426 -1.179 0.01 12.0";
        
        Node = "-50.335 -0.688 0.01 12.000000000000002";
        
        Node = "-50.245 -0.196 0.01 12.000000000000002";
        
        Node = "-50.154 0.295 0.01 12.000000000000002";
        
        Node = "-50.063 0.787 0.01 12.000000000000004";
        
        Node = "-49.972 1.279 0.01 12.000000000000002";
        
        Node = "-49.88 1.77 0.01 12.0";
        
    };
    
    new DecalRoad(road_5_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-64.74984811958447 -46.27298254305393 0.01 0.15";
        
        Node = "-64.56200337772067 -45.302121824578904 0.01 0.15";
        
        Node = "-64.47111484975184 -44.8222694887435 0.01 0.15";
        
        Node = "-64.37936949090232 -44.33789345438744 0.01 0.15";
        
        Node = "-64.28945803646052 -43.857062632807356 0.01 0.15";
        
        Node = "-64.19949178786521 -43.37164034643054 0.01 0.15";
        
        Node = "-64.10868305956745 -42.88067447475479 0.01 0.15";
        
        Node = "-64.01852629143677 -42.39422211844851 0.01 0.15";
        
        Node = "-63.92973702373424 -41.90884078834134 0.01 0.15";
        
        Node = "-63.92768305956746 -41.89767447475478 0.01 0.15";
        
        Node = "-63.836683059567456 -41.40567447475478 0.01 0.15";
        
        Node = "-63.74549178785825 -40.91364034639293 0.01 0.15";
        
        Node = "-63.66434081176377 -40.474890014101916 0.01 0.15";
        
        Node = "-63.65468305956745 -40.42267447475479 0.01 0.15";
        
        Node = "-63.65011484975186 -40.39826948874358 0.01 0.15";
        
        Node = "-63.639848188437774 -40.34406593277353 0.01 0.15";
        
        Node = "-63.557114849751855 -39.90726948874358 0.01 0.15";
        
        Node = "-63.46411484975184 -39.4162694887435 0.01 0.15";
        
        Node = "-63.46199162877205 -39.405119728911245 0.01 0.15";
        
        Node = "-63.27526051323576 -38.429747625418514 0.01 0.15";
        
        Node = "-63.18436941786762 -37.94890441121288 0.01 0.15";
        
        Node = "-63.09321771049565 -37.46243171208637 0.01 0.15";
        
        Node = "-63.00245810728187 -36.97805165580412 0.01 0.15";
        
        Node = "-62.91371552989539 -36.49825662202231 0.01 0.15";
        
        Node = "-62.82473702373422 -36.01184078834126 0.01 0.15";
        
        Node = "-62.82230013952194 -35.99860628778716 0.01 0.15";
        
        Node = "-62.73149178786096 -35.50864034640762 0.01 0.15";
        
        Node = "-62.64068305956747 -35.01767447475488 0.01 0.15";
        
        Node = "-62.54930013952195 -34.52460628778716 0.01 0.15";
        
        Node = "-62.54760866300927 -34.515520331307215 0.01 0.15";
        
        Node = "-62.45560866300927 -34.02352033130722 0.01 0.15";
        
        Node = "-62.45311484975184 -34.0102694887435 0.01 0.15";
        
        Node = "-62.36011484975184 -33.519269488743504 0.01 0.15";
        
        Node = "-62.35799162877205 -33.50811972891125 0.01 0.15";
        
        Node = "-62.265058717668055 -33.022693565591446 0.01 0.15";
        
        Node = "-62.173114849751855 -32.53726948874358 0.01 0.15";
        
        Node = "-62.17099162877205 -32.52611972891125 0.01 0.15";
        
        Node = "-62.07932637773348 -32.04731506657149 0.01 0.15";
        
        Node = "-61.98960866300927 -31.567520331307232 0.01 0.15";
        
        Node = "-61.89950359787025 -31.086631393618234 0.01 0.15";
        
        Node = "-61.81173702373424 -30.606840788341337 0.01 0.15";
        
        Node = "-61.80930013952194 -30.593606287787164 0.01 0.15";
        
        Node = "-61.719526291436196 -30.109222118445384 0.01 0.15";
        
        Node = "-61.63073702373424 -29.623840788341344 0.01 0.15";
        
        Node = "-61.62868305956746 -29.61267447475479 0.01 0.15";
        
        Node = "-61.53871552989551 -29.126256622022964 0.01 0.15";
        
        Node = "-61.4979286864954 -28.903288544769026 0.01 0.15";
        
        Node = "-61.44973702373422 -28.63984078834126 0.01 0.15";
        
        Node = "-61.44521771049565 -28.615431712086366 0.01 0.15";
        
        Node = "-61.35321771049565 -28.124431712086366 0.01 0.15";
        
        Node = "-61.35111484975185 -28.11326948874358 0.01 0.15";
        
        Node = "-61.25811484975186 -27.62226948874358 0.01 0.15";
        
        Node = "-61.257165919335186 -27.617286330445815 0.01 0.15";
        
        Node = "-61.25599162877205 -27.61111972891124 0.01 0.15";
        
        Node = "-60.88232637773348 -25.659315066571487 0.01 0.15";
        
        Node = "-60.793458036459874 -25.184062632803954 0.01 0.15";
        
        Node = "-60.704526291436196 -24.704222118445383 0.01 0.15";
        
        Node = "-60.61573702373424 -24.218840788341343 0.01 0.15";
        
        Node = "-60.52573702373422 -23.72684078834126 0.01 0.15";
        
        Node = "-60.523300139521936 -23.71360628778716 0.01 0.15";
        
        Node = "-60.43249178785954 -23.2236403463999 0.01 0.15";
        
        Node = "-60.34168305956745 -22.732674474754784 0.01 0.15";
        
        Node = "-60.26015582597652 -22.291889871164212 0.01 0.15";
        
        Node = "-60.25068305956747 -22.24067447475487 0.01 0.15";
        
        Node = "-60.24821771049564 -22.22743171208629 0.01 0.15";
        
        Node = "-60.15621771049563 -21.73643171208629 0.01 0.15";
        
        Node = "-60.15411484975185 -21.72526948874358 0.01 0.15";
        
        Node = "-60.150609021456134 -21.706760223225345 0.01 0.15";
        
        Node = "-60.06111484975186 -21.234269488743582 0.01 0.15";
        
        Node = "-60.05899162877205 -21.223119728911243 0.01 0.15";
        
        Node = "-59.96605871766734 -20.737693565587705 0.01 0.15";
        
        Node = "-59.87411484975186 -20.252269488743583 0.01 0.15";
        
        Node = "-59.87239885484384 -20.243248999277796 0.01 0.15";
        
        Node = "-59.780326229434095 -19.761336959899154 0.01 0.15";
        
        Node = "-59.69021771049565 -19.28043171208637 0.01 0.15";
        
        Node = "-59.59841337887706 -18.790475985730673 0.01 0.15";
        
        Node = "-59.50745803645987 -18.304062632803955 0.01 0.15";
        
        Node = "-59.418526291436194 -17.824222118445384 0.01 0.15";
        
        Node = "-59.32973702373424 -17.338840788341344 0.01 0.15";
        
        Node = "-59.327683059567455 -17.32767447475479 0.01 0.15";
        
        Node = "-59.236683059567454 -16.83567447475479 0.01 0.15";
        
        Node = "-59.14549178786237 -16.3436403464152 0.01 0.15";
        
        Node = "-59.0599472820412 -15.881135985272184 0.01 0.15";
        
        Node = "-59.05468305956745 -15.852674474754789 0.01 0.15";
        
        Node = "-59.05011484975185 -15.828269488743578 0.01 0.15";
        
        Node = "-59.044485579352155 -15.79854936222477 0.01 0.15";
        
        Node = "-58.95711484975186 -15.337269488743578 0.01 0.15";
        
        Node = "-58.864114849751836 -14.846269488743498 0.01 0.15";
        
        Node = "-58.861991628772046 -14.835119728911241 0.01 0.15";
        
        Node = "-58.767991628772045 -14.344119728911242 0.01 0.15";
        
        Node = "-58.675260513235735 -13.85974762541837 0.01 0.15";
        
        Node = "-58.58542504239414 -13.384489005482232 0.01 0.15";
        
        Node = "-58.496300139521935 -12.903606287787163 0.01 0.15";
        
        Node = "-58.49460866300927 -12.894520331307222 0.01 0.15";
        
        Node = "-58.40450345842296 -12.412653367649993 0.01 0.15";
        
        Node = "-58.316549729351784 -11.932816912383915 0.01 0.15";
        
        Node = "-58.22673702373422 -11.441840788341263 0.01 0.15";
        
        Node = "-58.224683059567454 -11.430674474754786 0.01 0.15";
        
        Node = "-58.1345262227868 -10.943233115457227 0.01 0.15";
        
        Node = "-58.08977309852438 -10.699079959758881 0.01 0.15";
        
        Node = "-58.04536206590235 -10.456793104009797 0.01 0.15";
        
        Node = "-58.04160866300927 -10.436520331307221 0.01 0.15";
        
        Node = "-57.94960866300927 -9.944520331307222 0.01 0.15";
        
        Node = "-57.85721771049563 -9.45143171208629 0.01 0.15";
        
        Node = "-57.85299162877206 -9.429119728911326 0.01 0.15";
        
        Node = "-57.80870983997016 -9.197818044850356 0.01 0.15";
        
        Node = "-57.758991628772065 -8.938119728911325 0.01 0.15";
        
        Node = "-57.4793263777335 -7.4773150665716 0.01 0.15";
        
        Node = "-57.38960866300927 -6.997520331307225 0.01 0.15";
        
        Node = "-57.29950359787027 -6.5166313936183204 0.01 0.15";
        
        Node = "-57.21173702373422 -6.0368407883412605 0.01 0.15";
        
        Node = "-57.20930013952194 -6.023606287787162 0.01 0.15";
        
        Node = "-57.119526291436756 -5.539222118448454 0.01 0.15";
        
        Node = "-57.03073702373424 -5.05384078834134 0.01 0.15";
        
        Node = "-57.028683059567456 -5.042674474754788 0.01 0.15";
        
        Node = "-56.937683059567455 -4.550674474754787 0.01 0.15";
        
        Node = "-56.84649178785905 -4.058640346397288 0.01 0.15";
        
        Node = "-56.84063970915287 -4.02700053624956 0.01 0.15";
        
        Node = "-56.75568305956745 -3.567674474754788 0.01 0.15";
        
        Node = "-56.75111484975185 -3.5432694887435816 0.01 0.15";
        
        Node = "-56.66136985447331 -3.0694545136708307 0.01 0.15";
        
        Node = "-56.658114849751854 -3.052269488743581 0.01 0.15";
        
        Node = "-56.565114849751836 -2.5612694887435 0.01 0.15";
        
        Node = "-56.562991628772046 -2.550119728911244 0.01 0.15";
        
        Node = "-56.469195441635016 -2.0601843258869907 0.01 0.15";
        
        Node = "-56.376260437946385 -1.5737585618996515 0.01 0.15";
        
        Node = "-56.28517176873975 -1.0928495664108844 0.01 0.15";
        
        Node = "-56.194413378877755 -0.6084759857343609 0.01 0.15";
        
        Node = "-56.1034580364598 -0.12206263280352743 0.01 0.15";
        
        Node = "-56.01452629143627 0.35777788155423196 0.01 0.15";
        
        Node = "-55.92573702373422 0.8431592116587394 0.01 0.15";
        
        Node = "-55.923300139521956 0.8563937122127572 0.01 0.15";
        
        Node = "-55.83249178785933 1.346359653601216 0.01 0.15";
        
        Node = "-55.74168305956746 1.837325525245212 0.01 0.15";
        
        Node = "-55.655762296253975 2.301864157665354 0.01 0.15";
        
        Node = "-55.650683059567456 2.3293255252452125 0.01 0.15";
        
        Node = "-55.64821771049565 2.3425682879136303 0.01 0.15";
        
        Node = "-55.55621771049565 2.8335682879136304 0.01 0.15";
        
    };
    
    new DecalRoad(road_5_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-44.20378228950435 0.7064317120863697 0.01 0.15";
        
        Node = "-44.29454189271843 0.22205165580255937 0.01 0.15";
        
        Node = "-44.300493736442164 0.1898724567687249 0.01 0.15";
        
        Node = "-44.38431694043255 -0.26332552524521236 0.01 0.15";
        
        Node = "-44.47531694043255 -0.755325525245212 0.01 0.15";
        
        Node = "-44.565473708563694 -1.2417778815540497 0.01 0.15";
        
        Node = "-44.65426297626578 -1.7271592116587393 0.01 0.15";
        
        Node = "-44.65669986047806 -1.7403937122128361 0.01 0.15";
        
        Node = "-44.747699860478065 -2.231393712212836 0.01 0.15";
        
        Node = "-44.74939133699073 -2.240479668692776 0.01 0.15";
        
        Node = "-44.84139133699073 -2.732479668692776 0.01 0.15";
        
        Node = "-44.93378228950435 -3.2255682879136307 0.01 0.15";
        
        Node = "-44.93588515024816 -3.236730511256499 0.01 0.15";
        
        Node = "-45.028885150248165 -3.727730511256499 0.01 0.15";
        
        Node = "-45.030601145156155 -3.7367510007221303 0.01 0.15";
        
        Node = "-45.12460114515615 -4.228751000722131 0.01 0.15";
        
        Node = "-45.21794128233254 -4.71630643441167 0.01 0.15";
        
        Node = "-45.309885150248164 -5.2017305112565 0.01 0.15";
        
        Node = "-45.31311217629753 -5.218767820828974 0.01 0.15";
        
        Node = "-45.40057481377387 -5.680532928365353 0.01 0.15";
        
        Node = "-45.483113635941415 -6.126786780084367 0.01 0.15";
        
        Node = "-45.489316940432545 -6.160325525245213 0.01 0.15";
        
        Node = "-45.580508212137474 -6.65235965358393 0.01 0.15";
        
        Node = "-45.67028447010452 -7.1377433779772 0.01 0.15";
        
        Node = "-45.75926297626576 -7.62415921165866 0.01 0.15";
        
        Node = "-45.76169986047806 -7.6373937122128375 0.01 0.15";
        
        Node = "-45.85147370856375 -8.121777881554351 0.01 0.15";
        
        Node = "-45.94026297626578 -8.60715921165874 0.01 0.15";
        
        Node = "-45.94478228950435 -8.63156828791363 0.01 0.15";
        
        Node = "-46.03658662112239 -9.1215240142664 0.01 0.15";
        
        Node = "-46.12839133699073 -9.612479668692774 0.01 0.15";
        
        Node = "-46.13300837122795 -9.636880271088756 0.01 0.15";
        
        Node = "-46.415008371227955 -11.109880271088755 0.01 0.15";
        
        Node = "-46.462684598575585 -11.358912479893942 0.01 0.15";
        
        Node = "-46.50687339630666 -11.589728433999873 0.01 0.15";
        
        Node = "-46.59658662112245 -12.068524014266712 0.01 0.15";
        
        Node = "-46.68649654157708 -12.549346632350181 0.01 0.15";
        
        Node = "-46.730232681968914 -12.787951576043424 0.01 0.15";
        
        Node = "-46.77463793409765 -13.030206895990203 0.01 0.15";
        
        Node = "-46.776316940432544 -13.039325525245214 0.01 0.15";
        
        Node = "-46.866284470104574 -13.525743377977518 0.01 0.15";
        
        Node = "-46.95526297626578 -14.012159211658737 0.01 0.15";
        
        Node = "-47.04563793409765 -14.505206895990206 0.01 0.15";
        
        Node = "-47.04939133699073 -14.525479668692778 0.01 0.15";
        
        Node = "-47.14054196354024 -15.012937367196649 0.01 0.15";
        
        Node = "-47.230699860478055 -15.499393712212836 0.01 0.15";
        
        Node = "-47.2344860955465 -15.519621530719906 0.01 0.15";
        
        Node = "-47.327486095546504 -16.011621530719907 0.01 0.15";
        
        Node = "-47.33000837122794 -16.024880271088676 0.01 0.15";
        
        Node = "-47.424008371227934 -16.515880271088676 0.01 0.15";
        
        Node = "-47.51694128233255 -17.001306434411756 0.01 0.15";
        
        Node = "-47.60888515024816 -17.4867305112565 0.01 0.15";
        
        Node = "-47.69957481377389 -17.965532928365466 0.01 0.15";
        
        Node = "-47.788316940432544 -18.44532552524521 0.01 0.15";
        
        Node = "-47.879508212141104 -18.937359653603583 0.01 0.15";
        
        Node = "-47.96928447010455 -19.422743377977355 0.01 0.15";
        
        Node = "-48.05826297626576 -19.909159211658658 0.01 0.15";
        
        Node = "-48.06069986047805 -19.922393712212838 0.01 0.15";
        
        Node = "-48.15169986047806 -20.413393712212837 0.01 0.15";
        
        Node = "-48.15339133699073 -20.422479668692773 0.01 0.15";
        
        Node = "-48.24539133699073 -20.914479668692774 0.01 0.15";
        
        Node = "-48.33778228950437 -21.407568287913712 0.01 0.15";
        
        Node = "-48.42978228950435 -21.898568287913633 0.01 0.15";
        
        Node = "-48.43360114515617 -21.918751000722207 0.01 0.15";
        
        Node = "-48.52673956205293 -22.40624143809677 0.01 0.15";
        
        Node = "-48.61888515024815 -22.89273051125642 0.01 0.15";
        
        Node = "-48.62100837122795 -22.90388027108876 0.01 0.15";
        
        Node = "-48.71394128233201 -23.38930643440889 0.01 0.15";
        
        Node = "-48.804828231260096 -23.869150433588324 0.01 0.15";
        
        Node = "-48.870559002039634 -24.219952699379096 0.01 0.15";
        
        Node = "-48.89454189271855 -24.34794834419808 0.01 0.15";
        
        Node = "-48.89611464548873 -24.356451578955543 0.01 0.15";
        
        Node = "-48.98431694043253 -24.833325525245133 0.01 0.15";
        
        Node = "-49.07531694043254 -25.325325525245216 0.01 0.15";
        
        Node = "-49.165473708563226 -25.81177788155148 0.01 0.15";
        
        Node = "-49.25426297626578 -26.297159211658737 0.01 0.15";
        
        Node = "-49.34426297626576 -26.789159211658657 0.01 0.15";
        
        Node = "-49.346699860478054 -26.802393712212837 0.01 0.15";
        
        Node = "-49.43769986047806 -27.293393712212836 0.01 0.15";
        
        Node = "-49.43939133699073 -27.302479668692772 0.01 0.15";
        
        Node = "-49.53139133699073 -27.794479668692773 0.01 0.15";
        
        Node = "-49.53600837122795 -27.81888027108876 0.01 0.15";
        
        Node = "-49.91094128233201 -29.77730643440889 0.01 0.15";
        
        Node = "-49.91775249989975 -29.81326673361061 0.01 0.15";
        
        Node = "-50.00182823126013 -30.257150433588496 0.01 0.15";
        
        Node = "-50.090496402129745 -30.730368606381788 0.01 0.15";
        
        Node = "-50.13486680002867 -30.972926781562535 0.01 0.15";
        
        Node = "-50.17826297626578 -31.210159211658738 0.01 0.15";
        
        Node = "-50.18031694043255 -31.22132552524521 0.01 0.15";
        
        Node = "-50.27028447010455 -31.707743377977355 0.01 0.15";
        
        Node = "-50.35926297626576 -32.19415921165866 0.01 0.15";
        
        Node = "-50.361699860478055 -32.20739371221284 0.01 0.15";
        
        Node = "-50.45147370856323 -32.69177788155149 0.01 0.15";
        
        Node = "-50.54026297626576 -33.17715921165866 0.01 0.15";
        
        Node = "-50.54478228950436 -33.20156828791371 0.01 0.15";
        
        Node = "-50.636586621123264 -33.69152401427107 0.01 0.15";
        
        Node = "-50.72839133699073 -34.18247966869277 0.01 0.15";
        
        Node = "-50.73300837122795 -34.20688027108876 0.01 0.15";
        
        Node = "-50.8259412823326 -34.69230643441197 0.01 0.15";
        
        Node = "-50.91788515024814 -35.17773051125642 0.01 0.15";
        
        Node = "-50.92000837122795 -35.188880271088756 0.01 0.15";
        
        Node = "-51.012941282332555 -35.674306434411754 0.01 0.15";
        
        Node = "-51.10363050909773 -36.1531065456128 0.01 0.15";
        
        Node = "-51.19354196353949 -36.633937367192644 0.01 0.15";
        
        Node = "-51.28350821213904 -37.11935965359238 0.01 0.15";
        
        Node = "-51.37431694043253 -37.61032552524512 0.01 0.15";
        
        Node = "-51.46447370856375 -38.09677788155436 0.01 0.15";
        
        Node = "-51.55326297626578 -38.58215921165874 0.01 0.15";
        
        Node = "-51.55531694043255 -38.59332552524522 0.01 0.15";
        
        Node = "-51.64631694043255 -39.08532552524522 0.01 0.15";
        
        Node = "-51.648782289504354 -39.098568287913615 0.01 0.15";
        
        Node = "-51.74078228950435 -39.58956828791362 0.01 0.15";
        
        Node = "-51.83278228950435 -40.080568287913636 0.01 0.15";
        
        Node = "-51.83448609554649 -40.08962153071984 0.01 0.15";
        
        Node = "-51.927486095546485 -40.581621530719836 0.01 0.15";
        
        Node = "-51.93000837122795 -40.594880271088755 0.01 0.15";
        
        Node = "-52.116941282332554 -41.57130643441175 0.01 0.15";
        
        Node = "-52.208885150248165 -42.0567305112565 0.01 0.15";
        
        Node = "-52.2995748137742 -42.53553292836713 0.01 0.15";
        
        Node = "-52.388316940432546 -43.01532552524521 0.01 0.15";
        
        Node = "-52.479508212136984 -43.50735965358132 0.01 0.15";
        
        Node = "-52.56928447010461 -43.992743377977696 0.01 0.15";
        
        Node = "-52.65826297626576 -44.47915921165866 0.01 0.15";
        
        Node = "-52.66069986047806 -44.49239371221284 0.01 0.15";
        
        Node = "-52.75150821214175 -44.98235965360707 0.01 0.15";
        
        Node = "-52.842316940432546 -45.47332552524521 0.01 0.15";
        
        Node = "-52.93369986047806 -45.96639371221284 0.01 0.15";
        
        Node = "-52.93539133699073 -45.975479668692785 0.01 0.15";
        
        Node = "-53.02739133699073 -46.46747966869278 0.01 0.15";
        
        Node = "-53.02988515024815 -46.48073051125642 0.01 0.15";
        
        Node = "-53.12288515024814 -46.97173051125642 0.01 0.15";
        
        Node = "-53.21588515024816 -47.462730511256495 0.01 0.15";
        
        Node = "-53.22015188041553 -47.48501745694607 0.01 0.15";
        
        Node = "-53.410151880415526 -48.46701745694607 0.01 0.15";
        
    };
    
    new DecalRoad(road_5_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "-47.91421031671147 1.4016646621944138 0.01 0.3";
        
        Node = "-48.005780742066975 0.9129572833949302 0.01 0.3";
        
        Node = "-48.01184650119463 0.8801621900893507 0.01 0.3";
        
        Node = "-48.09635651616712 0.4232509003479784 0.01 0.3";
        
        Node = "-48.18735651616712 -0.06874909965202147 0.01 0.3";
        
        Node = "-48.2780644878139 -0.5581741581119639 0.01 0.3";
        
        Node = "-48.36764518658555 -1.0478819780636326 0.01 0.3";
        
        Node = "-48.368489129169895 -1.0524653548789042 0.01 0.3";
        
        Node = "-48.459489129169896 -1.5434653548789043 0.01 0.3";
        
        Node = "-48.46007492190155 -1.5466120064736886 0.01 0.3";
        
        Node = "-48.55207492190155 -2.038612006473689 0.01 0.3";
        
        Node = "-48.644210316711465 -2.530335337805586 0.01 0.3";
        
        Node = "-48.64493858017252 -2.5342010428593937 0.01 0.3";
        
        Node = "-48.737938580172525 -3.0252010428593934 0.01 0.3";
        
        Node = "-48.73853286412334 -3.02832502189511 0.01 0.3";
        
        Node = "-48.83253286412334 -3.52032502189511 0.01 0.3";
        
        Node = "-48.926304340201376 -4.010132098495628 0.01 0.3";
        
        Node = "-49.018938580172524 -4.499201042859394 0.01 0.3";
        
        Node = "-49.02217357712196 -4.516280435355871 0.01 0.3";
        
        Node = "-49.111138463644885 -4.985976771729618 0.01 0.3";
        
        Node = "-49.19520261192609 -5.4404774415577 0.01 0.3";
        
        Node = "-49.20135651616712 -5.4737490996520215 0.01 0.3";
        
        Node = "-49.29242275745036 -5.965107239337249 0.01 0.3";
        
        Node = "-49.382998950685575 -6.4548158884770706 0.01 0.3";
        
        Node = "-49.472645186585545 -6.944881978063605 0.01 0.3";
        
        Node = "-49.47348912916989 -6.949465354878905 0.01 0.3";
        
        Node = "-49.56406448781376 -7.438174158111206 0.01 0.3";
        
        Node = "-49.65364518658555 -7.927881978063632 0.01 0.3";
        
        Node = "-49.65521031671147 -7.936335337805586 0.01 0.3";
        
        Node = "-49.74714255276712 -8.426973684580876 0.01 0.3";
        
        Node = "-49.83907492190155 -8.918612006473689 0.01 0.3";
        
        Node = "-49.84067389479756 -8.92706243154589 0.01 0.3";
        
        Node = "-50.122673894797565 -10.400062431545889 0.01 0.3";
        
        Node = "-50.1710167601519 -10.65257676015208 0.01 0.3";
        
        Node = "-50.215934509543295 -10.887200323462473 0.01 0.3";
        
        Node = "-50.30714255276974 -11.373973684594874 0.01 0.3";
        
        Node = "-50.39841871569768 -11.862102729818217 0.01 0.3";
        
        Node = "-50.44298036218817 -12.105211267894115 0.01 0.3";
        
        Node = "-50.487775042111736 -12.34959113281046 0.01 0.3";
        
        Node = "-50.488356516167116 -12.352749099652023 0.01 0.3";
        
        Node = "-50.57899895068515 -12.842815888474767 0.01 0.3";
        
        Node = "-50.66864518658555 -13.332881978063632 0.01 0.3";
        
        Node = "-50.758775042111736 -13.824591132810461 0.01 0.3";
        
        Node = "-50.76007492190155 -13.831612006473689 0.01 0.3";
        
        Node = "-50.85178076659453 -14.322038915049212 0.01 0.3";
        
        Node = "-50.94248912916989 -14.811465354878903 0.01 0.3";
        
        Node = "-50.94380037941004 -14.818470659989577 0.01 0.3";
        
        Node = "-51.036800379410046 -15.310470659989578 0.01 0.3";
        
        Node = "-51.03767389479756 -15.315062431545863 0.01 0.3";
        
        Node = "-51.13167389479755 -15.806062431545863 0.01 0.3";
        
        Node = "-51.22530434020136 -16.295132098495547 0.01 0.3";
        
        Node = "-51.31793858017252 -16.784201042859394 0.01 0.3";
        
        Node = "-51.40852743742465 -17.262471246201304 0.01 0.3";
        
        Node = "-51.41013846364488 -17.27097677172958 0.01 0.3";
        
        Node = "-51.411660744539674 -17.279207125578363 0.01 0.3";
        
        Node = "-51.500356516167116 -17.75874909965202 0.01 0.3";
        
        Node = "-51.59142275745036 -18.25010723933725 0.01 0.3";
        
        Node = "-51.68199895068559 -18.73981588847715 0.01 0.3";
        
        Node = "-51.771645186585545 -19.229881978063606 0.01 0.3";
        
        Node = "-51.77248912916989 -19.234465354878907 0.01 0.3";
        
        Node = "-51.86348912916989 -19.725465354878907 0.01 0.3";
        
        Node = "-51.86407492190155 -19.72861200647369 0.01 0.3";
        
        Node = "-51.956074921901546 -20.22061200647369 0.01 0.3";
        
        Node = "-52.04821031671147 -20.712335337805616 0.01 0.3";
        
        Node = "-52.14021031671147 -21.203335337805587 0.01 0.3";
        
        Node = "-52.14153286412335 -21.210325021895137 0.01 0.3";
        
        Node = "-52.23523448036455 -21.700763268604366 0.01 0.3";
        
        Node = "-52.327938580172514 -22.190201042859368 0.01 0.3";
        
        Node = "-52.32867389479756 -22.19406243154589 0.01 0.3";
        
        Node = "-52.4223043402012 -22.68313209849469 0.01 0.3";
        
        Node = "-52.51457254762265 -23.17026854842944 0.01 0.3";
        
        Node = "-52.53712948099893 -23.29065392112239 0.01 0.3";
        
        Node = "-52.60578074206723 -23.657042716606476 0.01 0.3";
        
        Node = "-52.610328302175795 -23.681629525105524 0.01 0.3";
        
        Node = "-52.69635651616711 -24.146749099651995 0.01 0.3";
        
        Node = "-52.787356516167115 -24.63874909965202 0.01 0.3";
        
        Node = "-52.87806448781376 -25.128174158111204 0.01 0.3";
        
        Node = "-52.96764518658555 -25.617881978063632 0.01 0.3";
        
        Node = "-53.057645186585546 -26.109881978063605 0.01 0.3";
        
        Node = "-53.05848912916989 -26.114465354878906 0.01 0.3";
        
        Node = "-53.14948912916989 -26.605465354878906 0.01 0.3";
        
        Node = "-53.15007492190155 -26.608612006473688 0.01 0.3";
        
        Node = "-53.24207492190155 -27.10061200647369 0.01 0.3";
        
        Node = "-53.24367389479756 -27.10906243154589 0.01 0.3";
        
        Node = "-53.619304340201204 -29.071132098494687 0.01 0.3";
        
        Node = "-53.62378028350246 -29.094763153988417 0.01 0.3";
        
        Node = "-53.71157254762314 -29.55826854843204 0.01 0.3";
        
        Node = "-53.80241866740402 -30.04311033987129 0.01 0.3";
        
        Node = "-53.84876386265873 -30.29646407393037 0.01 0.3";
        
        Node = "-53.89164518658555 -30.530881978063633 0.01 0.3";
        
        Node = "-53.89235651616712 -30.53474909965202 0.01 0.3";
        
        Node = "-53.98299895068559 -31.02481588847715 0.01 0.3";
        
        Node = "-54.07264518658555 -31.514881978063606 0.01 0.3";
        
        Node = "-54.07348912916989 -31.519465354878907 0.01 0.3";
        
        Node = "-54.16406448781411 -32.00817415811308 0.01 0.3";
        
        Node = "-54.253645186585544 -32.4978819780636 0.01 0.3";
        
        Node = "-54.25521031671146 -32.50633533780561 0.01 0.3";
        
        Node = "-54.34714255276974 -32.99697368459487 0.01 0.3";
        
        Node = "-54.43907492190155 -33.48861200647369 0.01 0.3";
        
        Node = "-54.44067389479756 -33.49706243154589 0.01 0.3";
        
        Node = "-54.5343043402012 -33.986132098494686 0.01 0.3";
        
        Node = "-54.626938580172514 -34.47520104285937 0.01 0.3";
        
        Node = "-54.62767389479756 -34.47906243154589 0.01 0.3";
        
        Node = "-54.721304340201364 -34.968132098495545 0.01 0.3";
        
        Node = "-54.81350407241473 -35.45490702878328 0.01 0.3";
        
        Node = "-54.90478076659465 -35.94303891504981 0.01 0.3";
        
        Node = "-54.995422757449454 -36.432107239332325 0.01 0.3";
        
        Node = "-55.08635651616711 -36.92374909965199 0.01 0.3";
        
        Node = "-55.17706448781371 -37.413174158110934 0.01 0.3";
        
        Node = "-55.26664518658555 -37.90288197806363 0.01 0.3";
        
        Node = "-55.26735651616712 -37.906749099652025 0.01 0.3";
        
        Node = "-55.35835651616712 -38.39874909965202 0.01 0.3";
        
        Node = "-55.35921031671147 -38.40333533780558 0.01 0.3";
        
        Node = "-55.45121031671147 -38.894335337805586 0.01 0.3";
        
        Node = "-55.543210316711466 -39.38533533780559 0.01 0.3";
        
        Node = "-55.54380037941004 -39.38847065998956 0.01 0.3";
        
        Node = "-55.63680037941003 -39.880470659989555 0.01 0.3";
        
        Node = "-55.63767389479756 -39.88506243154589 0.01 0.3";
        
        Node = "-55.82530434020136 -40.86513209849554 0.01 0.3";
        
        Node = "-55.917938580172525 -41.354201042859394 0.01 0.3";
        
        Node = "-56.01013414380493 -41.84095396483268 0.01 0.3";
        
        Node = "-56.01013846364491 -41.84097677172973 0.01 0.3";
        
        Node = "-56.01014254552126 -41.840998840775526 0.01 0.3";
        
        Node = "-56.10035651616712 -42.32874909965202 0.01 0.3";
        
        Node = "-56.191422757449715 -42.820107239333765 0.01 0.3";
        
        Node = "-56.28199895068565 -43.30981588847748 0.01 0.3";
        
        Node = "-56.371645186585546 -43.7998819780636 0.01 0.3";
        
        Node = "-56.37248912916989 -43.8044653548789 0.01 0.3";
        
        Node = "-56.46342275745036 -44.29510723933724 0.01 0.3";
        
        Node = "-56.55435651616712 -44.78674909965202 0.01 0.3";
        
        Node = "-56.645489129169896 -45.278465354878904 0.01 0.3";
        
        Node = "-56.64607492190155 -45.281612006473694 0.01 0.3";
        
        Node = "-56.73807492190155 -45.77361200647369 0.01 0.3";
        
        Node = "-56.738938580172515 -45.778201042859365 0.01 0.3";
        
        Node = "-56.83193858017251 -46.269201042859365 0.01 0.3";
        
        Node = "-56.92493858017252 -46.76020104285939 0.01 0.3";
        
        Node = "-56.92641623564174 -46.767919465609026 0.01 0.3";
        
        Node = "-57.116416235641736 -47.749919465609025 0.01 0.3";
        
    };
    
    new DecalRoad(road_5_separator_1) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_dashed_short";

        
        Node = "-61.04358376435826 -46.99008053439097 0.01 0.15";
        
        Node = "-60.85433017410223 -46.011938294225594 0.01 0.15";
        
        Node = "-60.762061419827475 -45.524798957140604 0.01 0.15";
        
        Node = "-60.669495927585146 -45.036092971216014 0.01 0.15";
        
        Node = "-60.578219233405356 -44.54796108495019 0.01 0.15";
        
        Node = "-60.48757724254964 -44.05889276066276 0.01 0.15";
        
        Node = "-60.39664348383288 -43.56725090034798 0.01 0.15";
        
        Node = "-60.30593551218589 -43.07782584188692 0.01 0.15";
        
        Node = "-60.216354813414455 -42.588118021936396 0.01 0.15";
        
        Node = "-60.215643483832885 -42.584250900347975 0.01 0.15";
        
        Node = "-60.124643483832884 -42.09225090034798 0.01 0.15";
        
        Node = "-60.03357724254964 -41.60089276066276 0.01 0.15";
        
        Node = "-59.94798740692863 -41.1381433197228 0.01 0.15";
        
        Node = "-59.94264348383288 -41.10925090034798 0.01 0.15";
        
        Node = "-59.941061419827484 -41.10079895714063 0.01 0.15";
        
        Node = "-59.93538734632825 -41.07084228952637 0.01 0.15";
        
        Node = "-59.84806141982749 -40.60979895714063 0.01 0.15";
        
        Node = "-59.75506141982748 -40.118798957140605 0.01 0.15";
        
        Node = "-59.75432610520244 -40.11493756845411 0.01 0.15";
        
        Node = "-59.56676554570975 -39.135232943869966 0.01 0.15";
        
        Node = "-59.47449590229128 -38.647096765785165 0.01 0.15";
        
        Node = "-59.382789683288536 -38.15766466219441 0.01 0.15";
        
        Node = "-59.29121925793314 -37.668957283395514 0.01 0.15";
        
        Node = "-59.201001049314826 -37.18118411152507 0.01 0.15";
        
        Node = "-59.11135481341445 -36.69111802193637 0.01 0.15";
        
        Node = "-59.110510870830105 -36.6865346451211 0.01 0.15";
        
        Node = "-59.01957724255055 -36.195892760667675 0.01 0.15";
        
        Node = "-58.92864348383289 -35.70425090034801 0.01 0.15";
        
        Node = "-58.83751087083011 -35.212534645121096 0.01 0.15";
        
        Node = "-58.83692507809845 -35.209387993526306 0.01 0.15";
        
        Node = "-58.744925078098454 -34.71738799352631 0.01 0.15";
        
        Node = "-58.74406141982748 -34.712798957140606 0.01 0.15";
        
        Node = "-58.65106141982748 -34.22179895714061 0.01 0.15";
        
        Node = "-58.65032610520244 -34.21793756845411 0.01 0.15";
        
        Node = "-58.5566956597988 -33.72886790150532 0.01 0.15";
        
        Node = "-58.46406141982749 -33.239798957140636 0.01 0.15";
        
        Node = "-58.46332610520244 -33.23593756845411 0.01 0.15";
        
        Node = "-58.37013467627153 -32.749161062017144 0.01 0.15";
        
        Node = "-58.27892507809845 -32.26138799352631 0.01 0.15";
        
        Node = "-58.18758133259556 -31.773889660126486 0.01 0.15";
        
        Node = "-58.09835481341445 -31.286118021936392 0.01 0.15";
        
        Node = "-58.09751087083011 -31.281534645121095 0.01 0.15";
        
        Node = "-58.00693551218584 -30.79282584188665 0.01 0.15";
        
        Node = "-57.917354813414455 -30.303118021936395 0.01 0.15";
        
        Node = "-57.916643483832885 -30.299250900347978 0.01 0.15";
        
        Node = "-57.82600104931488 -29.809184111525393 0.01 0.15";
        
        Node = "-57.7840233870479 -29.57970622446589 0.01 0.15";
        
        Node = "-57.73635481341445 -29.319118021936365 0.01 0.15";
        
        Node = "-57.73478968328853 -29.310664662194412 0.01 0.15";
        
        Node = "-57.642789683288534 -28.819664662194413 0.01 0.15";
        
        Node = "-57.642061419827485 -28.815798957140633 0.01 0.15";
        
        Node = "-57.550699751975735 -28.333448646224372 0.01 0.15";
        
        Node = "-57.54906141982749 -28.324798957140633 0.01 0.15";
        
        Node = "-57.54832610520244 -28.32093756845411 0.01 0.15";
        
        Node = "-57.17313467627156 -26.36116106201729 0.01 0.15";
        
        Node = "-57.0822192334055 -25.874961084950986 0.01 0.15";
        
        Node = "-56.99193551218584 -25.38782584188665 0.01 0.15";
        
        Node = "-56.902354813414455 -24.898118021936394 0.01 0.15";
        
        Node = "-56.81235481341445 -24.406118021936365 0.01 0.15";
        
        Node = "-56.811510870830105 -24.401534645121092 0.01 0.15";
        
        Node = "-56.72057724254964 -23.910892760662747 0.01 0.15";
        
        Node = "-56.62964348383288 -23.41925090034798 0.01 0.15";
        
        Node = "-56.54592697073766 -22.966629752624332 0.01 0.15";
        
        Node = "-56.53864348383289 -22.927250900348007 0.01 0.15";
        
        Node = "-56.53778968328854 -22.922664662194386 0.01 0.15";
        
        Node = "-56.44578968328853 -22.431664662194386 0.01 0.15";
        
        Node = "-56.44506141982748 -22.427798957140634 0.01 0.15";
        
        Node = "-56.443846726472685 -22.42138589867605 0.01 0.15";
        
        Node = "-56.352061419827486 -21.936798957140635 0.01 0.15";
        
        Node = "-56.35132610520244 -21.93293756845411 0.01 0.15";
        
        Node = "-56.2576956597988 -21.443867901505314 0.01 0.15";
        
        Node = "-56.16506141982749 -20.954798957140635 0.01 0.15";
        
        Node = "-56.164467135876656 -20.951674978104865 0.01 0.15";
        
        Node = "-56.071134624912084 -20.463168644120106 0.01 0.15";
        
        Node = "-55.97978968328854 -19.975664662194415 0.01 0.15";
        
        Node = "-55.88785744723026 -19.48502631540513 0.01 0.15";
        
        Node = "-55.7962192334055 -18.994961084950987 0.01 0.15";
        
        Node = "-55.70593551218584 -18.50782584188665 0.01 0.15";
        
        Node = "-55.61635481341445 -18.018118021936395 0.01 0.15";
        
        Node = "-55.61564348383288 -18.014250900347978 0.01 0.15";
        
        Node = "-55.52464348383288 -17.522250900347977 0.01 0.15";
        
        Node = "-55.43357724254964 -17.03089276066275 0.01 0.15";
        
        Node = "-55.346467476159965 -16.559925672050444 0.01 0.15";
        
        Node = "-55.34264348383288 -16.539250900347977 0.01 0.15";
        
        Node = "-55.34106141982748 -16.530798957140632 0.01 0.15";
        
        Node = "-55.33699370096902 -16.50932315112443 0.01 0.15";
        
        Node = "-55.248061419827486 -16.039798957140633 0.01 0.15";
        
        Node = "-55.155061419827476 -15.548798957140605 0.01 0.15";
        
        Node = "-55.154326105202436 -15.54493756845411 0.01 0.15";
        
        Node = "-55.060326105202435 -15.05393756845411 0.01 0.15";
        
        Node = "-54.96676554570938 -14.565232943868006 0.01 0.15";
        
        Node = "-54.87486148654318 -14.079030824408129 0.01 0.15";
        
        Node = "-54.784510870830104 -13.591534645121095 0.01 0.15";
        
        Node = "-54.78392507809845 -13.588387993526311 0.01 0.15";
        
        Node = "-54.692581284302335 -13.099897270181872 0.01 0.15";
        
        Node = "-54.60328994955898 -12.612763432859758 0.01 0.15";
        
        Node = "-54.51335481341445 -12.121118021936368 0.01 0.15";
        
        Node = "-54.51264348383288 -12.117250900347978 0.01 0.15";
        
        Node = "-54.42193548841154 -11.626829650377655 0.01 0.15";
        
        Node = "-54.37702033111031 -11.381792514434254 0.01 0.15";
        
        Node = "-54.332224957888265 -11.13740886718954 0.01 0.15";
        
        Node = "-54.33092507809845 -11.13038799352631 0.01 0.15";
        
        Node = "-54.238925078098454 -10.638387993526312 0.01 0.15";
        
        Node = "-54.14678968328853 -10.146664662194386 0.01 0.15";
        
        Node = "-54.14532610520244 -10.13893756845414 0.01 0.15";
        
        Node = "-54.10037615102404 -9.904145786522248 0.01 0.15";
        
        Node = "-54.05132610520245 -9.647937568454138 0.01 0.15";
        
        Node = "-53.77013467627156 -8.179161062017288 0.01 0.15";
        
        Node = "-53.67892507809845 -7.691387993526312 0.01 0.15";
        
        Node = "-53.587581332595974 -7.20388966012867 0.01 0.15";
        
        Node = "-53.49835481341445 -6.716118021936367 0.01 0.15";
        
        Node = "-53.497510870830105 -6.711534645121095 0.01 0.15";
        
        Node = "-53.406935512185854 -6.222825841886717 0.01 0.15";
        
        Node = "-53.317354813414454 -5.733118021936395 0.01 0.15";
        
        Node = "-53.316643483832884 -5.729250900347979 0.01 0.15";
        
        Node = "-53.22564348383288 -5.237250900347979 0.01 0.15";
        
        Node = "-53.13457724254964 -4.745892760662751 0.01 0.15";
        
        Node = "-53.128544971658975 -4.713278724638517 0.01 0.15";
        
        Node = "-53.04364348383288 -4.254250900347979 0.01 0.15";
        
        Node = "-53.04206141982748 -4.245798957140634 0.01 0.15";
        
        Node = "-52.952306106616504 -3.771929507822452 0.01 0.15";
        
        Node = "-52.94906141982749 -3.754798957140634 0.01 0.15";
        
        Node = "-52.856061419827476 -3.2637989571406063 0.01 0.15";
        
        Node = "-52.85532610520244 -3.2599375684541103 0.01 0.15";
        
        Node = "-52.76139668974617 -2.7693062600602025 0.01 0.15";
        
        Node = "-52.667765519635005 -2.279236731393214 0.01 0.15";
        
        Node = "-52.575427452377035 -1.7917314515689138 0.01 0.15";
        
        Node = "-52.48385744723286 -1.3030263154190138 0.01 0.15";
        
        Node = "-52.39221923340547 -0.8129610849508127 0.01 0.15";
        
        Node = "-52.301935512186255 -0.32582584188886626 0.01 0.15";
        
        Node = "-52.21235481341445 0.1638819780636327 0.01 0.15";
        
        Node = "-52.21151087083011 0.16846535487887687 0.01 0.15";
        
        Node = "-52.120577242548734 0.6591072393421691 0.01 0.15";
        
        Node = "-52.029643483832885 1.1507490996520215 0.01 0.15";
        
        Node = "-51.9444070399688 1.6115878950490334 0.01 0.15";
        
        Node = "-51.938643483832884 1.6427490996520215 0.01 0.15";
        
        Node = "-51.937789683288536 1.6473353378055862 0.01 0.15";
        
        Node = "-51.84578968328854 2.1383353378055863 0.01 0.15";
        
    };
    
    new DecalRoad(road_6) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "-49.88 1.77 0.01 12.000000000000002";
        
        Node = "-49.94 2.266 0.01 12.000000000000004";
        
        Node = "-50.002 2.763 0.01 11.999999999999998";
        
        Node = "-50.065 3.259 0.01 12.000000000000002";
        
        Node = "-50.129 3.755 0.01 11.999999999999996";
        
        Node = "-50.193 4.251 0.01 12.0";
        
        Node = "-50.258 4.746 0.01 11.999999999999998";
        
        Node = "-50.324 5.242 0.01 11.999999999999998";
        
        Node = "-50.389 5.738 0.01 11.999999999999998";
        
        Node = "-50.454 6.234 0.01 12.0";
        
        Node = "-50.519 6.73 0.01 12.000000000000002";
        
        Node = "-50.583 7.225 0.01 12.0";
        
        Node = "-50.648 7.721 0.01 11.999999999999996";
        
        Node = "-50.712 8.217 0.01 11.999999999999998";
        
        Node = "-50.777 8.713 0.01 11.999999999999998";
        
        Node = "-50.841 9.209 0.01 11.999999999999996";
        
        Node = "-50.906 9.705 0.01 11.999999999999996";
        
        Node = "-50.971 10.201 0.01 11.999999999999996";
        
        Node = "-51.037 10.696 0.01 11.999999999999996";
        
        Node = "-51.102 11.192 0.01 12.0";
        
        Node = "-51.167 11.688 0.01 12.000000000000002";
        
        Node = "-51.231 12.184 0.01 12.000000000000002";
        
        Node = "-51.293 12.68 0.01 12.000000000000002";
        
        Node = "-51.355 13.176 0.01 12.0";
        
        Node = "-51.417 13.672 0.01 12.0";
        
        Node = "-51.48 14.168 0.01 11.999999999999998";
        
        Node = "-51.544 14.664 0.01 12.0";
        
        Node = "-51.609 15.16 0.01 11.999999999999998";
        
        Node = "-51.674 15.656 0.01 11.999999999999998";
        
        Node = "-51.74 16.152 0.01 11.999999999999998";
        
        Node = "-51.805 16.648 0.01 12.000000000000002";
        
        Node = "-51.87 17.143 0.01 12.0";
        
        Node = "-51.934 17.639 0.01 12.0";
        
        Node = "-51.999 18.135 0.01 12.000000000000002";
        
        Node = "-52.063 18.631 0.01 12.0";
        
        Node = "-52.128 19.127 0.01 12.000000000000004";
        
        Node = "-52.192 19.623 0.01 12.0";
        
        Node = "-52.257 20.119 0.01 12.000000000000005";
        
        Node = "-52.322 20.614 0.01 12.000000000000004";
        
        Node = "-52.387 21.11 0.01 12.000000000000002";
        
        Node = "-52.452 21.606 0.01 12.000000000000002";
        
        Node = "-52.517 22.102 0.01 12.000000000000002";
        
        Node = "-52.582 22.598 0.01 12.0";
        
        Node = "-52.647 23.093 0.01 12.000000000000002";
        
        Node = "-52.712 23.589 0.01 12.000000000000002";
        
        Node = "-52.777 24.085 0.01 12.000000000000002";
        
        Node = "-52.84 24.581 0.01 12.0";
        
        Node = "-52.903 25.077 0.01 12.0";
        
        Node = "-52.965 25.573 0.01 12.0";
        
        Node = "-53.028 26.069 0.01 12.000000000000004";
        
        Node = "-53.091 26.566 0.01 12.000000000000004";
        
        Node = "-53.155 27.062 0.01 12.000000000000004";
        
        Node = "-53.219 27.557 0.01 12.000000000000002";
        
        Node = "-53.284 28.053 0.01 12.0";
        
        Node = "-53.349 28.549 0.01 12.000000000000002";
        
        Node = "-53.414 29.045 0.01 11.999999999999998";
        
        Node = "-53.479 29.541 0.01 11.999999999999998";
        
        Node = "-53.543 30.037 0.01 12.0";
        
        Node = "-53.608 30.532 0.01 11.999999999999998";
        
        Node = "-53.673 31.028 0.01 11.999999999999998";
        
        Node = "-53.738 31.524 0.01 11.999999999999998";
        
        Node = "-53.803 32.02 0.01 11.999999999999998";
        
        Node = "-53.868 32.516 0.01 11.999999999999998";
        
        Node = "-53.933 33.011 0.01 11.999999999999996";
        
        Node = "-53.997 33.507 0.01 11.999999999999996";
        
        Node = "-54.062 34.003 0.01 12.0";
        
        Node = "-54.127 34.499 0.01 11.999999999999998";
        
        Node = "-54.192 34.995 0.01 12.0";
        
        Node = "-54.257 35.491 0.01 11.999999999999998";
        
        Node = "-54.323 35.986 0.01 12.000000000000002";
        
        Node = "-54.387 36.482 0.01 12.0";
        
        Node = "-54.451 36.978 0.01 12.0";
        
        Node = "-54.514 37.474 0.01 12.0";
        
        Node = "-54.576 37.97 0.01 12.0";
        
        Node = "-54.638 38.467 0.01 12.0";
        
        Node = "-54.7 38.963 0.01 12.0";
        
        Node = "-54.764 39.459 0.01 12.0";
        
        Node = "-54.829 39.955 0.01 12.000000000000002";
        
        Node = "-54.894 40.45 0.01 12.000000000000002";
        
        Node = "-54.959 40.946 0.01 12.000000000000004";
        
        Node = "-55.024 41.442 0.01 12.000000000000004";
        
        Node = "-55.089 41.938 0.01 12.000000000000005";
        
        Node = "-55.154 42.434 0.01 12.000000000000004";
        
        Node = "-55.219 42.929 0.01 12.000000000000005";
        
        Node = "-55.284 43.425 0.01 12.000000000000002";
        
        Node = "-55.348 43.921 0.01 12.0";
        
        Node = "-55.413 44.417 0.01 11.999999999999998";
        
        Node = "-55.478 44.913 0.01 11.999999999999998";
        
        Node = "-55.543 45.409 0.01 11.999999999999998";
        
        Node = "-55.608 45.904 0.01 12.0";
        
        Node = "-55.673 46.4 0.01 11.999999999999998";
        
        Node = "-55.738 46.896 0.01 11.999999999999998";
        
        Node = "-55.802 47.392 0.01 12.0";
        
        Node = "-55.865 47.888 0.01 12.000000000000002";
        
        Node = "-55.927 48.384 0.01 12.000000000000004";
        
        Node = "-55.989 48.88 0.01 12.000000000000002";
        
        Node = "-56.051 49.377 0.01 12.000000000000004";
        
        Node = "-56.114 49.873 0.01 12.000000000000002";
        
        Node = "-56.177 50.369 0.01 12.000000000000002";
        
        Node = "-56.243 50.864 0.01 12.000000000000002";
        
        Node = "-56.31 51.36 0.01 12.0";
        
    };
    
    new DecalRoad(road_6_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-55.613204793371985 1.0764671620921544 0.01 0.15";
        
        Node = "-55.671913251196514 1.5617904134416505 0.01 0.15";
        
        Node = "-55.73178404986538 2.041722460835593 0.01 0.15";
        
        Node = "-55.793250160556774 2.525646125961524 0.01 0.15";
        
        Node = "-55.85651717981149 3.015965525185613 0.01 0.15";
        
        Node = "-55.91968840140421 3.505542492529186 0.01 0.15";
        
        Node = "-55.9831981121103 3.989193366367834 0.01 0.15";
        
        Node = "-56.048542523554985 4.4802665190431386 0.01 0.15";
        
        Node = "-56.05004071320416 4.4916116000840764 0.01 0.15";
        
        Node = "-56.115040713204166 4.987611600084077 0.01 0.15";
        
        Node = "-56.18004071320417 5.483611600084156 0.01 0.15";
        
        Node = "-56.24504071320417 5.979611600084158 0.01 0.15";
        
        Node = "-56.24632750768779 5.989497049511073 0.01 0.15";
        
        Node = "-56.309688376532144 6.479553769479122 0.01 0.15";
        
        Node = "-56.37404071320417 6.9706116000840765 0.01 0.15";
        
        Node = "-56.375517179811496 6.981965525185613 0.01 0.15";
        
        Node = "-56.43878457408722 7.472287830822512 0.01 0.15";
        
        Node = "-56.50304071320417 7.962611600084154 0.01 0.15";
        
        Node = "-56.504517179811494 7.973965525185612 0.01 0.15";
        
        Node = "-56.567784574087256 8.464287830822743 0.01 0.15";
        
        Node = "-56.696198138123776 9.444182104086114 0.01 0.15";
        
        Node = "-56.76134112644221 9.932754516474342 0.01 0.15";
        
        Node = "-56.76304071320417 9.945611600084158 0.01 0.15";
        
        Node = "-56.78100480545877 10.08269144251927 0.01 0.15";
        
        Node = "-56.82804071320417 10.441611600084158 0.01 0.15";
        
        Node = "-56.893040713204165 10.937611600084077 0.01 0.15";
        
        Node = "-56.894517179811494 10.948965525185612 0.01 0.15";
        
        Node = "-56.958517179811494 11.44496552518561 0.01 0.15";
        
        Node = "-56.961404738021436 11.467699407747348 0.01 0.15";
        
        Node = "-56.98314911684324 11.64165443832174 0.01 0.15";
        
        Node = "-57.08540473802143 12.45969940774735 0.01 0.15";
        
        Node = "-57.146693946766455 12.950013077707535 0.01 0.15";
        
        Node = "-57.20825016055724 13.434646125965203 0.01 0.15";
        
        Node = "-57.27078457408701 13.919287830820917 0.01 0.15";
        
        Node = "-57.335040713204165 14.409611600084077 0.01 0.15";
        
        Node = "-57.39929723865494 14.899938317370003 0.01 0.15";
        
        Node = "-57.46454252355498 15.39026651904306 0.01 0.15";
        
        Node = "-57.46604071320417 15.401611600084156 0.01 0.15";
        
        Node = "-57.53094306310926 15.896866454744575 0.01 0.15";
        
        Node = "-57.59584521908502 16.391121334867652 0.01 0.15";
        
        Node = "-57.59751717981149 16.403965525185612 0.01 0.15";
        
        Node = "-57.66078457408706 16.89428783082126 0.01 0.15";
        
        Node = "-57.725040713204166 17.38461160008408 0.01 0.15";
        
        Node = "-57.726517179811495 17.395965525185613 0.01 0.15";
        
        Node = "-57.789784574087236 17.886287830822624 0.01 0.15";
        
        Node = "-57.85404071320417 18.376611600084154 0.01 0.15";
        
        Node = "-57.8555171798115 18.387965525185614 0.01 0.15";
        
        Node = "-57.91878457408767 18.878287830825926 0.01 0.15";
        
        Node = "-57.98294306311098 19.36786645475768 0.01 0.15";
        
        Node = "-58.04784521908501 19.86212133486757 0.01 0.15";
        
        Node = "-58.11304071320417 20.359611600084154 0.01 0.15";
        
        Node = "-58.163280214375355 20.74297763979046 0.01 0.15";
        
        Node = "-58.17804071320417 20.855611600084163 0.01 0.15";
        
        Node = "-58.24304071320417 21.351611600084073 0.01 0.15";
        
        Node = "-58.30794306310926 21.846866454744575 0.01 0.15";
        
        Node = "-58.37284521908502 22.34112133486765 0.01 0.15";
        
        Node = "-58.43804071320416 22.83861160008407 0.01 0.15";
        
        Node = "-58.50304071320417 23.334611600084163 0.01 0.15";
        
        Node = "-58.50597187173426 23.357328169517594 0.01 0.15";
        
        Node = "-58.56897187173426 23.853328169517592 0.01 0.15";
        
        Node = "-58.63197187173427 24.349328169517683 0.01 0.15";
        
        Node = "-58.633404738021426 24.360699407747266 0.01 0.15";
        
        Node = "-58.660983685971345 24.581330991346643 0.01 0.15";
        
        Node = "-58.694693946766485 24.851013077707755 0.01 0.15";
        
        Node = "-58.75697187173427 25.341328169517674 0.01 0.15";
        
        Node = "-58.81934310018637 25.83336640809087 0.01 0.15";
        
        Node = "-58.882422437877125 26.322231275194202 0.01 0.15";
        
        Node = "-58.94568837653248 26.81155376948174 0.01 0.15";
        
        Node = "-59.01004071320417 27.302611600084163 0.01 0.15";
        
        Node = "-59.07504071320417 27.798611600084154 0.01 0.15";
        
        Node = "-59.140040713204165 28.29461160008408 0.01 0.15";
        
        Node = "-59.20504071320417 28.790611600084155 0.01 0.15";
        
        Node = "-59.20651717981149 28.80196552518561 0.01 0.15";
        
        Node = "-59.26968840140404 29.29154249252785 0.01 0.15";
        
        Node = "-59.33384521908502 29.78012133486765 0.01 0.15";
        
        Node = "-59.39904071320416 30.27761160008407 0.01 0.15";
        
        Node = "-59.4517651167499 30.679939356371538 0.01 0.15";
        
        Node = "-59.52904071320417 31.269611600084165 0.01 0.15";
        
        Node = "-59.5939430631115 31.764866454761624 0.01 0.15";
        
        Node = "-59.65884521908502 32.25912133486766 0.01 0.15";
        
        Node = "-59.66051717981149 32.27196552518561 0.01 0.15";
        
        Node = "-59.723784574087325 32.762287830823304 0.01 0.15";
        
        Node = "-59.78804071320417 33.25261160008416 0.01 0.15";
        
        Node = "-59.853040713204166 33.74861160008408 0.01 0.15";
        
        Node = "-59.91804071320417 34.24461160008415 0.01 0.15";
        
        Node = "-59.98219813812378 34.73418210408611 0.01 0.15";
        
        Node = "-60.04734112644221 35.22275451647434 0.01 0.15";
        
        Node = "-60.0505171798115 35.246965525185615 0.01 0.15";
        
        Node = "-60.1785171798115 36.23896552518562 0.01 0.15";
        
        Node = "-60.17997187173426 36.25032816951759 0.01 0.15";
        
        Node = "-60.24297187173426 36.74632816951758 0.01 0.15";
        
        Node = "-60.24440473802144 36.757699407747346 0.01 0.15";
        
        Node = "-60.306404738021435 37.25369940774735 0.01 0.15";
        
        Node = "-60.36341862660763 37.71072878164791 0.01 0.15";
        
        Node = "-60.36849343299189 37.751408967510976 0.01 0.15";
        
        Node = "-60.42898351228257 38.235329601836376 0.01 0.15";
        
        Node = "-60.49078457408761 38.71428783082546 0.01 0.15";
        
        Node = "-60.554943063109725 39.203866454748095 0.01 0.15";
        
        Node = "-60.61984521908502 39.69812133486766 0.01 0.15";
        
        Node = "-60.68504071320416 40.195611600084064 0.01 0.15";
        
        Node = "-60.74025001912419 40.616901072950746 0.01 0.15";
        
        Node = "-60.81504071320417 41.18761160008416 0.01 0.15";
        
        Node = "-60.87994306311174 41.68286645476338 0.01 0.15";
        
        Node = "-60.944845219085025 42.17712133486766 0.01 0.15";
        
        Node = "-61.01004071320417 42.67461160008415 0.01 0.15";
        
        Node = "-61.0115171798115 42.685965525185615 0.01 0.15";
        
        Node = "-61.074784574087666 43.17628783082593 0.01 0.15";
        
        Node = "-61.13904071320417 43.66661160008416 0.01 0.15";
        
        Node = "-61.204040713204165 44.16261160008406 0.01 0.15";
        
        Node = "-61.26894306310927 44.657866454744585 0.01 0.15";
        
        Node = "-61.33384521908502 45.15212133486766 0.01 0.15";
        
        Node = "-61.39904071320416 45.649611600084064 0.01 0.15";
        
        Node = "-61.46404071320417 46.14561160008416 0.01 0.15";
        
        Node = "-61.4655171798115 46.15696552518562 0.01 0.15";
        
        Node = "-61.5295171798115 46.65296552518562 0.01 0.15";
        
        Node = "-61.53097187173426 46.66432816951759 0.01 0.15";
        
        Node = "-61.59397187173426 47.160328169517584 0.01 0.15";
        
        Node = "-61.595404738021436 47.17169940774735 0.01 0.15";
        
        Node = "-61.71940473802143 48.16369940774735 0.01 0.15";
        
        Node = "-61.734435882510446 48.284190651143774 0.01 0.15";
        
        Node = "-61.78078404986535 48.65572246083534 0.01 0.15";
        
        Node = "-61.84297187173427 49.14532816951767 0.01 0.15";
        
        Node = "-61.9037117444479 49.623534151517 0.01 0.15";
        
        Node = "-61.966686110336 50.095841895677715 0.01 0.15";
        
        Node = "-62.033022663193385 50.58693040638315 0.01 0.15";
        
    };
    
    new DecalRoad(road_6_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-50.58697733680662 52.133069593616845 0.01 0.15";
        
        Node = "-50.51997733680662 51.63706959361684 0.01 0.15";
        
        Node = "-50.51865887355779 51.627245483525655 0.01 0.15";
        
        Node = "-50.45265887355779 51.13224548352566 0.01 0.15";
        
        Node = "-50.44802812826573 51.0966718304824 0.01 0.15";
        
        Node = "-50.38502812826573 50.6006718304824 0.01 0.15";
        
        Node = "-50.32202812826573 50.10467183048233 0.01 0.15";
        
        Node = "-50.32041804776101 50.09188145078239 0.01 0.15";
        
        Node = "-50.27222637020952 49.70557074524877 0.01 0.15";
        
        Node = "-50.25850656700856 49.59559103249264 0.01 0.15";
        
        Node = "-50.13530605323312 48.60998692228907 0.01 0.15";
        
        Node = "-50.07374983944335 48.125353874039476 0.01 0.15";
        
        Node = "-50.01121542591233 47.64071216917407 0.01 0.15";
        
        Node = "-49.94695928679583 47.15038839991584 0.01 0.15";
        
        Node = "-49.88205693688826 46.65513354523662 0.01 0.15";
        
        Node = "-49.817154780914976 46.160878665132344 0.01 0.15";
        
        Node = "-49.75195928679583 45.66338839991584 0.01 0.15";
        
        Node = "-49.68695928679584 45.167388399915936 0.01 0.15";
        
        Node = "-49.62195928679583 44.67138839991584 0.01 0.15";
        
        Node = "-49.6204828201885 44.66003447481438 0.01 0.15";
        
        Node = "-49.55721542591239 44.16971216917454 0.01 0.15";
        
        Node = "-49.49305693689028 43.680133545251906 0.01 0.15";
        
        Node = "-49.42815478091498 43.18587866513234 0.01 0.15";
        
        Node = "-49.36295928679584 42.68838839991594 0.01 0.15";
        
        Node = "-49.30771612229335 42.266840560019986 0.01 0.15";
        
        Node = "-49.23295928679583 41.69638839991584 0.01 0.15";
        
        Node = "-49.16805693688826 41.20113354523662 0.01 0.15";
        
        Node = "-49.10315478091498 40.70687866513234 0.01 0.15";
        
        Node = "-49.03795928679583 40.20938839991585 0.01 0.15";
        
        Node = "-49.0364828201885 40.198034474814385 0.01 0.15";
        
        Node = "-48.9724828201885 39.70203447481438 0.01 0.15";
        
        Node = "-48.969595261978576 39.67930059225273 0.01 0.15";
        
        Node = "-48.90759526197857 39.18330059225273 0.01 0.15";
        
        Node = "-48.89979283682303 39.120755525214335 0.01 0.15";
        
        Node = "-48.84550656700678 38.685591032478385 0.01 0.15";
        
        Node = "-48.784306053233124 38.195986922289066 0.01 0.15";
        
        Node = "-48.72274983944335 37.711353874039474 0.01 0.15";
        
        Node = "-48.59704525395498 36.737143336504616 0.01 0.15";
        
        Node = "-48.532658873557786 36.25424548352566 0.01 0.15";
        
        Node = "-48.53095928679583 36.24138839991584 0.01 0.15";
        
        Node = "-48.46595928679583 35.74538839991584 0.01 0.15";
        
        Node = "-48.40095928679583 35.24938839991585 0.01 0.15";
        
        Node = "-48.335959286795834 34.75338839991592 0.01 0.15";
        
        Node = "-48.27095928679583 34.25738839991584 0.01 0.15";
        
        Node = "-48.26948282018851 34.246034474814394 0.01 0.15";
        
        Node = "-48.20631159859588 33.756457507471545 0.01 0.15";
        
        Node = "-48.14215478091498 33.26787866513234 0.01 0.15";
        
        Node = "-48.07695928679584 32.77038839991594 0.01 0.15";
        
        Node = "-48.02418364646912 32.36766966757663 0.01 0.15";
        
        Node = "-47.94695928679583 31.778388399915837 0.01 0.15";
        
        Node = "-47.88205693688896 31.283133545241895 0.01 0.15";
        
        Node = "-47.817154780914976 30.788878665132348 0.01 0.15";
        
        Node = "-47.81548282018851 30.776034474814388 0.01 0.15";
        
        Node = "-47.752215425912766 30.285712169177376 0.01 0.15";
        
        Node = "-47.68795928679583 29.795388399915847 0.01 0.15";
        
        Node = "-47.62295928679583 29.29938839991592 0.01 0.15";
        
        Node = "-47.55795928679583 28.803388399915846 0.01 0.15";
        
        Node = "-47.49295928679583 28.307388399915837 0.01 0.15";
        
        Node = "-47.49167249231221 28.29750295048893 0.01 0.15";
        
        Node = "-47.42767249231221 27.802502950488932 0.01 0.15";
        
        Node = "-47.3634828201885 27.305034474814384 0.01 0.15";
        
        Node = "-47.36184528831132 27.29223087894648 0.01 0.15";
        
        Node = "-47.298936617684504 26.795951366223836 0.01 0.15";
        
        Node = "-47.23602812826573 26.300671830482326 0.01 0.15";
        
        Node = "-47.23459526197858 26.289300592252737 0.01 0.15";
        
        Node = "-47.19534660405138 25.97531132883518 0.01 0.15";
        
        Node = "-47.17330605323303 25.798986922288353 0.01 0.15";
        
        Node = "-47.11102812826573 25.308671830482318 0.01 0.15";
        
        Node = "-47.04947118278357 24.82403302160688 0.01 0.15";
        
        Node = "-46.98595928679583 24.339388399915837 0.01 0.15";
        
        Node = "-46.92105693688896 23.844133545241895 0.01 0.15";
        
        Node = "-46.85615478091498 23.349878665132348 0.01 0.15";
        
        Node = "-46.79095928679583 22.852388399915846 0.01 0.15";
        
        Node = "-46.74065117064469 22.468498775131764 0.01 0.15";
        
        Node = "-46.72595928679584 22.35638839991593 0.01 0.15";
        
        Node = "-46.66095928679583 21.860388399915838 0.01 0.15";
        
        Node = "-46.59605693688902 21.36513354524232 0.01 0.15";
        
        Node = "-46.53115478091499 20.87087866513243 0.01 0.15";
        
        Node = "-46.46595928679583 20.373388399915846 0.01 0.15";
        
        Node = "-46.4644828201885 20.362034474814386 0.01 0.15";
        
        Node = "-46.40121542591233 19.871712169174074 0.01 0.15";
        
        Node = "-46.33695928679583 19.381388399915846 0.01 0.15";
        
        Node = "-46.33548282018851 19.37003447481439 0.01 0.15";
        
        Node = "-46.27221542591294 18.87971216917874 0.01 0.15";
        
        Node = "-46.207959286795834 18.38938839991592 0.01 0.15";
        
        Node = "-46.206482820188505 18.37803447481439 0.01 0.15";
        
        Node = "-46.14331159859596 17.88845750747215 0.01 0.15";
        
        Node = "-46.079154780914976 17.39987866513235 0.01 0.15";
        
        Node = "-46.014702761345035 16.908061682629768 0.01 0.15";
        
        Node = "-45.94945747644502 16.41773348095694 0.01 0.15";
        
        Node = "-45.94795928679583 16.406388399915844 0.01 0.15";
        
        Node = "-45.88295928679583 15.910388399915842 0.01 0.15";
        
        Node = "-45.81795928679583 15.414388399915921 0.01 0.15";
        
        Node = "-45.816482820188504 15.403034474814387 0.01 0.15";
        
        Node = "-45.752482820188504 14.907034474814388 0.01 0.15";
        
        Node = "-45.75102812826572 14.895671830482325 0.01 0.15";
        
        Node = "-45.68802812826573 14.399671830482326 0.01 0.15";
        
        Node = "-45.68659526197858 14.388300592252733 0.01 0.15";
        
        Node = "-45.62459526197857 13.892300592252731 0.01 0.15";
        
        Node = "-45.51568037172907 13.020981470256636 0.01 0.15";
        
        Node = "-45.50201648771733 12.911670398162716 0.01 0.15";
        
        Node = "-45.440215425912974 12.43271216917897 0.01 0.15";
        
        Node = "-45.37595928679583 11.942388399915924 0.01 0.15";
        
        Node = "-45.36368868190508 11.848754245672637 0.01 0.15";
        
        Node = "-45.31180186187622 11.452817895913888 0.01 0.15";
        
        Node = "-45.246658873557784 10.964245483525659 0.01 0.15";
        
        Node = "-45.244959286795826 10.951388399915842 0.01 0.15";
        
        Node = "-45.11495928679583 9.959388399915841 0.01 0.15";
        
        Node = "-45.11348282018851 9.948034474814385 0.01 0.15";
        
        Node = "-45.05021542591278 9.457712169177487 0.01 0.15";
        
        Node = "-44.98595928679583 8.967388399915848 0.01 0.15";
        
        Node = "-44.98448282018851 8.956034474814388 0.01 0.15";
        
        Node = "-44.92121542591299 8.465712169179085 0.01 0.15";
        
        Node = "-44.856959286795835 7.975388399915921 0.01 0.15";
        
        Node = "-44.85567249231221 7.965502950488926 0.01 0.15";
        
        Node = "-44.79231162346759 7.475446230518852 0.01 0.15";
        
        Node = "-44.72795928679583 6.984388399915844 0.01 0.15";
        
        Node = "-44.66295928679583 6.488388399915845 0.01 0.15";
        
        Node = "-44.5987027613446 5.998061682626499 0.01 0.15";
        
        Node = "-44.53345747644501 5.507733480956862 0.01 0.15";
        
        Node = "-44.53215478091499 5.497878665132433 0.01 0.15";
        
        Node = "-44.46715478091499 5.002878665132432 0.01 0.15";
        
        Node = "-44.465482820188505 4.9900344748143866 0.01 0.15";
        
        Node = "-44.401482820188505 4.494034474814384 0.01 0.15";
        
        Node = "-44.3374828201885 3.9980344748143892 0.01 0.15";
        
        Node = "-44.336028128265724 3.9866718304823223 0.01 0.15";
        
        Node = "-44.27302812826573 3.4906718304823237 0.01 0.15";
        
        Node = "-44.27141804776101 3.477881450782384 0.01 0.15";
        
        Node = "-44.209418047761005 2.980881450782384 0.01 0.15";
        
        Node = "-44.206795206628016 2.959532837907844 0.01 0.15";
        
        Node = "-44.14679520662802 2.463532837907845 0.01 0.15";
        
    };
    
    new DecalRoad(road_6_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "-54.32800080928368 51.62772972939111 0.01 0.3";
        
        Node = "-54.26100080928368 51.13172972939111 0.01 0.3";
        
        Node = "-54.26054419863473 51.12832744018205 0.01 0.3";
        
        Node = "-54.19454419863473 50.63332744018205 0.01 0.3";
        
        Node = "-54.192940477321464 50.621007560340225 0.01 0.3";
        
        Node = "-54.12994047732146 50.12500756034022 0.01 0.3";
        
        Node = "-54.06694047732147 49.629007560340206 0.01 0.3";
        
        Node = "-54.066382873683466 49.62457799161295 0.01 0.3";
        
        Node = "-54.018537556896646 49.2410437586606 0.01 0.3";
        
        Node = "-54.00441352969883 49.12782373418777 0.01 0.3";
        
        Node = "-53.88069040804637 48.13803876096805 0.01 0.3";
        
        Node = "-53.81819042058594 47.64597536762881 0.01 0.3";
        
        Node = "-53.754697983000256 47.15390897633972 0.01 0.3";
        
        Node = "-53.68995559715873 46.65987477053362 0.01 0.3";
        
        Node = "-53.62498941537331 46.16413282952489 0.01 0.3";
        
        Node = "-53.560023300749776 45.66939087969951 0.01 0.3";
        
        Node = "-53.49495559715873 45.17287477053362 0.01 0.3";
        
        Node = "-53.42995559715873 44.67687477053366 0.01 0.3";
        
        Node = "-53.364955597158726 44.18087477053362 0.01 0.3";
        
        Node = "-53.36444426673195 44.17694267526039 0.01 0.3";
        
        Node = "-53.30069798300031 43.68290897634018 0.01 0.3";
        
        Node = "-53.235989415371634 43.189132829512104 0.01 0.3";
        
        Node = "-53.17102330074978 42.69439087969951 0.01 0.3";
        
        Node = "-53.10595559715873 42.19787477053366 0.01 0.3";
        
        Node = "-53.04433840221996 41.72768817530852 0.01 0.3";
        
        Node = "-52.97595559715873 41.20587477053362 0.01 0.3";
        
        Node = "-52.91098941537331 40.71013282952489 0.01 0.3";
        
        Node = "-52.84602330074978 40.21539087969951 0.01 0.3";
        
        Node = "-52.78095559715873 39.71887477053363 0.01 0.3";
        
        Node = "-52.780444266731955 39.714942675260396 0.01 0.3";
        
        Node = "-52.716444266731955 39.218942675260394 0.01 0.3";
        
        Node = "-52.71544424657267 39.21106946917843 0.01 0.3";
        
        Node = "-52.65344424657267 38.71506946917843 0.01 0.3";
        
        Node = "-52.646563896001716 38.659915746167236 0.01 0.3";
        
        Node = "-52.591413529700596 38.21782373420185 0.01 0.3";
        
        Node = "-52.52969040804637 37.72403876096805 0.01 0.3";
        
        Node = "-52.46719042058594 37.231975367628806 0.01 0.3";
        
        Node = "-52.33998536933522 36.246136220435694 0.01 0.3";
        
        Node = "-52.27454419863473 35.75532744018205 0.01 0.3";
        
        Node = "-52.273955597158725 35.75087477053362 0.01 0.3";
        
        Node = "-52.20895559715873 35.25487477053362 0.01 0.3";
        
        Node = "-52.14395559715873 34.75887477053363 0.01 0.3";
        
        Node = "-52.07895559715873 34.26287477053365 0.01 0.3";
        
        Node = "-52.01395559715873 33.76687477053362 0.01 0.3";
        
        Node = "-52.01344426673195 33.7629426752604 0.01 0.3";
        
        Node = "-51.94973128955698 33.269167102154384 0.01 0.3";
        
        Node = "-51.88502330074978 32.77639087969951 0.01 0.3";
        
        Node = "-51.81995559715873 32.27987477053366 0.01 0.3";
        
        Node = "-51.759194913826086 31.81622401771837 0.01 0.3";
        
        Node = "-51.68995559715873 31.287874770533623 0.01 0.3";
        
        Node = "-51.62498941537354 30.79213282952664 0.01 0.3";
        
        Node = "-51.560023300749776 30.297390879699513 0.01 0.3";
        
        Node = "-51.55944426673195 30.292942675260395 0.01 0.3";
        
        Node = "-51.495697983000255 29.798908976339728 0.01 0.3";
        
        Node = "-51.43095559715873 29.304874770533626 0.01 0.3";
        
        Node = "-51.36595559715873 28.808874770533652 0.01 0.3";
        
        Node = "-51.300955597158726 28.312874770533625 0.01 0.3";
        
        Node = "-51.23595559715873 27.816874770533623 0.01 0.3";
        
        Node = "-51.23550995404752 27.813451238264562 0.01 0.3";
        
        Node = "-51.17150995404752 27.318451238264565 0.01 0.3";
        
        Node = "-51.10744426673195 26.82194267526039 0.01 0.3";
        
        Node = "-51.10687715612514 26.81750852950527 0.01 0.3";
        
        Node = "-51.043908785346346 26.320758048917078 0.01 0.3";
        
        Node = "-50.98094047732147 25.8250075603402 0.01 0.3";
        
        Node = "-50.980444246572674 25.821069469178436 0.01 0.3";
        
        Node = "-50.942775573748456 25.519720086584744 0.01 0.3";
        
        Node = "-50.91869040804628 25.32703876096736 0.01 0.3";
        
        Node = "-50.85594047732147 24.833007560340196 0.01 0.3";
        
        Node = "-50.79344023646176 24.34094217198449 0.01 0.3";
        
        Node = "-50.72895559715873 23.848874770533623 0.01 0.3";
        
        Node = "-50.66398941537354 23.35313282952664 0.01 0.3";
        
        Node = "-50.59902330074978 22.858390879699513 0.01 0.3";
        
        Node = "-50.53395559715873 22.361874770533625 0.01 0.3";
        
        Node = "-50.47405142543196 21.904759860126298 0.01 0.3";
        
        Node = "-50.46895559715873 21.865874770533654 0.01 0.3";
        
        Node = "-50.40395559715873 21.369874770533624 0.01 0.3";
        
        Node = "-50.33898941537372 20.87413282952797 0.01 0.3";
        
        Node = "-50.274023300749775 20.379390879699542 0.01 0.3";
        
        Node = "-50.20895559715873 19.882874770533626 0.01 0.3";
        
        Node = "-50.20844426673195 19.878942675260394 0.01 0.3";
        
        Node = "-50.144697983000285 19.384908976339954 0.01 0.3";
        
        Node = "-50.07995559715873 18.890874770533625 0.01 0.3";
        
        Node = "-50.079444266731954 18.886942675260396 0.01 0.3";
        
        Node = "-50.01569798300004 18.392908976338067 0.01 0.3";
        
        Node = "-49.95095559715873 17.898874770533652 0.01 0.3";
        
        Node = "-49.95044426673195 17.894942675260396 0.01 0.3";
        
        Node = "-49.886731289557005 17.401167102154584 0.01 0.3";
        
        Node = "-49.82202330074978 16.908390879699514 0.01 0.3";
        
        Node = "-49.75721307752201 16.413839543767264 0.01 0.3";
        
        Node = "-49.69147445071689 15.919803802928811 0.01 0.3";
        
        Node = "-49.69095559715873 15.915874770533627 0.01 0.3";
        
        Node = "-49.62595559715873 15.419874770533625 0.01 0.3";
        
        Node = "-49.56095559715873 14.92387477053365 0.01 0.3";
        
        Node = "-49.56044426673195 14.919942675260394 0.01 0.3";
        
        Node = "-49.49644426673195 14.423942675260392 0.01 0.3";
        
        Node = "-49.49594047732146 14.4200075603402 0.01 0.3";
        
        Node = "-49.432940477321466 13.9240075603402 0.01 0.3";
        
        Node = "-49.43244424657267 13.920069469178436 0.01 0.3";
        
        Node = "-49.37044424657267 13.424069469178434 0.01 0.3";
        
        Node = "-49.26370716559786 12.570172821379956 0.01 0.3";
        
        Node = "-49.24693644596266 12.436007064298366 0.01 0.3";
        
        Node = "-49.18369798300005 11.945908976338181 0.01 0.3";
        
        Node = "-49.11895559715873 11.451874770533653 0.01 0.3";
        
        Node = "-49.095360656403706 11.271827222618384 0.01 0.3";
        
        Node = "-49.05424739805233 10.95810143581408 0.01 0.3";
        
        Node = "-48.98854419863473 10.465327440182048 0.01 0.3";
        
        Node = "-48.987955597158724 10.460874770533625 0.01 0.3";
        
        Node = "-48.85795559715873 9.468874770533624 0.01 0.3";
        
        Node = "-48.85744426673195 9.464942675260396 0.01 0.3";
        
        Node = "-48.793697983000285 8.970908976339956 0.01 0.3";
        
        Node = "-48.72895559715873 8.476874770533627 0.01 0.3";
        
        Node = "-48.728444266731955 8.472942675260395 0.01 0.3";
        
        Node = "-48.66469798300006 7.978908976338232 0.01 0.3";
        
        Node = "-48.59995559715873 7.484874770533651 0.01 0.3";
        
        Node = "-48.59950995404752 7.481451238264562 0.01 0.3";
        
        Node = "-48.53573129817088 6.988163196718695 0.01 0.3";
        
        Node = "-48.47095559715873 6.493874770533626 0.01 0.3";
        
        Node = "-48.40595559715873 5.9978747705336275 0.01 0.3";
        
        Node = "-48.341213077522006 5.503839543767242 0.01 0.3";
        
        Node = "-48.27547445071689 5.009803802928783 0.01 0.3";
        
        Node = "-48.27502330074978 5.006390879699545 0.01 0.3";
        
        Node = "-48.210023300749775 4.511390879699544 0.01 0.3";
        
        Node = "-48.20944426673195 4.506942675260394 0.01 0.3";
        
        Node = "-48.14544426673195 4.010942675260395 0.01 0.3";
        
        Node = "-48.08144426673195 3.514942675260393 0.01 0.3";
        
        Node = "-48.08094047732146 3.5110075603401967 0.01 0.3";
        
        Node = "-48.01794047732147 3.015007560340198 0.01 0.3";
        
        Node = "-48.01738287368347 3.010577991612948 0.01 0.3";
        
        Node = "-47.95538287368346 2.513577991612948 0.01 0.3";
        
        Node = "-47.95447453043394 2.5061845326087777 0.01 0.3";
        
        Node = "-47.894474530433946 2.010184532608779 0.01 0.3";
        
    };
    
    new DecalRoad(road_6_separator_1) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_dashed_short";

        
        Node = "-51.86552546956606 1.5298154673912223 0.01 0.15";
        
        Node = "-51.92507818223256 2.022117892101029 0.01 0.15";
        
        Node = "-51.98634079649033 2.5132069128446934 0.01 0.15";
        
        Node = "-52.04880957941378 3.0050246323690284 0.01 0.15";
        
        Node = "-52.112555733268046 3.499057324739606 0.01 0.15";
        
        Node = "-52.176268710442756 3.992832897843592 0.01 0.15";
        
        Node = "-52.240752592939224 4.483902464547425 0.01 0.15";
        
        Node = "-52.30652554928311 4.978196197071217 0.01 0.15";
        
        Node = "-52.307044402841264 4.982125229466347 0.01 0.15";
        
        Node = "-52.37204440284127 5.478125229466348 0.01 0.15";
        
        Node = "-52.43704440284127 5.974125229466375 0.01 0.15";
        
        Node = "-52.50204440284127 6.470125229466375 0.01 0.15";
        
        Node = "-52.50249004595248 6.473548761735437 0.01 0.15";
        
        Node = "-52.56626870182937 6.966836803283285 0.01 0.15";
        
        Node = "-52.63104440284127 7.461125229466347 0.01 0.15";
        
        Node = "-52.63155573326805 7.465057324739607 0.01 0.15";
        
        Node = "-52.69530201699971 7.959091023659988 0.01 0.15";
        
        Node = "-52.760044402841274 8.453125229466373 0.01 0.15";
        
        Node = "-52.76055573326805 8.457057324739605 0.01 0.15";
        
        Node = "-52.82430201699973 8.95109102366016 0.01 0.15";
        
        Node = "-52.95375260194766 9.938898564185923 0.01 0.15";
        
        Node = "-53.01945580136527 10.431672559817953 0.01 0.15";
        
        Node = "-53.02004440284127 10.436125229466375 0.01 0.15";
        
        Node = "-53.049409623684056 10.66020445312822 0.01 0.15";
        
        Node = "-53.08504440284127 10.932125229466376 0.01 0.15";
        
        Node = "-53.15004440284127 11.428125229466348 0.01 0.15";
        
        Node = "-53.15055573326805 11.432057324739606 0.01 0.15";
        
        Node = "-53.21455573326805 11.928057324739605 0.01 0.15";
        
        Node = "-53.21555575342734 11.935930530821592 0.01 0.15";
        
        Node = "-53.2351249137548 12.092483813441302 0.01 0.15";
        
        Node = "-53.339555753427334 12.927930530821593 0.01 0.15";
        
        Node = "-53.40130959195369 13.42196123903242 0.01 0.15";
        
        Node = "-53.463809579413784 13.914024632369083 0.01 0.15";
        
        Node = "-53.52730201699995 14.406091023661823 0.01 0.15";
        
        Node = "-53.59204440284127 14.900125229466347 0.01 0.15";
        
        Node = "-53.65678692247798 15.39416045623262 0.01 0.15";
        
        Node = "-53.72252554928311 15.88819619707119 0.01 0.15";
        
        Node = "-53.723044402841275 15.892125229466375 0.01 0.15";
        
        Node = "-53.78801058462814 16.387867170486142 0.01 0.15";
        
        Node = "-53.85297669925022 16.882609120300486 0.01 0.15";
        
        Node = "-53.853555733268045 16.887057324739605 0.01 0.15";
        
        Node = "-53.91730201699996 17.381091023661934 0.01 0.15";
        
        Node = "-53.98204440284127 17.87512522946635 0.01 0.15";
        
        Node = "-53.98255573326805 17.879057324739605 0.01 0.15";
        
        Node = "-54.046302016999746 18.373091023660272 0.01 0.15";
        
        Node = "-54.11104440284127 18.867125229466374 0.01 0.15";
        
        Node = "-54.11155573326805 18.871057324739606 0.01 0.15";
        
        Node = "-54.175302016999716 19.365091023660046 0.01 0.15";
        
        Node = "-54.24001058462628 19.85886717047203 0.01 0.15";
        
        Node = "-54.304976699250226 20.353609120300458 0.01 0.15";
        
        Node = "-54.37004440284127 20.850125229466375 0.01 0.15";
        
        Node = "-54.42994034512908 21.307177342924156 0.01 0.15";
        
        Node = "-54.43504440284127 21.346125229466377 0.01 0.15";
        
        Node = "-54.50004440284127 21.842125229466347 0.01 0.15";
        
        Node = "-54.56501058462814 22.337867170486142 0.01 0.15";
        
        Node = "-54.62997669925022 22.832609120300486 0.01 0.15";
        
        Node = "-54.69504440284127 23.329125229466346 0.01 0.15";
        
        Node = "-54.760044402841274 23.825125229466376 0.01 0.15";
        
        Node = "-54.761059522678536 23.832992439659773 0.01 0.15";
        
        Node = "-54.82405952267854 24.32899243965977 0.01 0.15";
        
        Node = "-54.887059522678534 24.824992439659805 0.01 0.15";
        
        Node = "-54.88755575342733 24.828930530821566 0.01 0.15";
        
        Node = "-54.91355898027508 25.036956345603517 0.01 0.15";
        
        Node = "-54.94930959195369 25.32296123903242 0.01 0.15";
        
        Node = "-55.012059522678534 25.8169924396598 0.01 0.15";
        
        Node = "-55.074841766298356 26.312274080724478 0.01 0.15";
        
        Node = "-55.1385229222078 26.805803039022663 0.01 0.15";
        
        Node = "-55.20226870182913 27.29883680328137 0.01 0.15";
        
        Node = "-55.26704440284127 27.793125229466376 0.01 0.15";
        
        Node = "-55.33204440284127 28.289125229466375 0.01 0.15";
        
        Node = "-55.39704440284127 28.78512522946635 0.01 0.15";
        
        Node = "-55.46204440284127 29.281125229466376 0.01 0.15";
        
        Node = "-55.46255573326805 29.285057324739604 0.01 0.15";
        
        Node = "-55.52626871044299 29.778832897845415 0.01 0.15";
        
        Node = "-55.59097669925022 30.271609120300486 0.01 0.15";
        
        Node = "-55.65604440284127 30.768125229466346 0.01 0.15";
        
        Node = "-55.71679894101515 31.2317290899932 0.01 0.15";
        
        Node = "-55.78604440284127 31.76012522946638 0.01 0.15";
        
        Node = "-55.85101058462669 32.25586717047511 0.01 0.15";
        
        Node = "-55.91597669925022 32.75060912030049 0.01 0.15";
        
        Node = "-55.91655573326805 32.7550573247396 0.01 0.15";
        
        Node = "-55.98030201699981 33.24909102366073 0.01 0.15";
        
        Node = "-56.04504440284127 33.74312522946638 0.01 0.15";
        
        Node = "-56.11004440284127 34.23912522946635 0.01 0.15";
        
        Node = "-56.17504440284127 34.73512522946637 0.01 0.15";
        
        Node = "-56.23975260194761 35.22889856418551 0.01 0.15";
        
        Node = "-56.30545580136527 35.72167255981795 0.01 0.15";
        
        Node = "-56.30655573326805 35.730057324739604 0.01 0.15";
        
        Node = "-56.43455573326805 36.72205732473961 0.01 0.15";
        
        Node = "-56.435059522678536 36.72599243965977 0.01 0.15";
        
        Node = "-56.49805952267854 37.221992439659765 0.01 0.15";
        
        Node = "-56.49855575342734 37.22593053082159 0.01 0.15";
        
        Node = "-56.56055575342734 37.721930530821595 0.01 0.15";
        
        Node = "-56.616650705300735 38.17159445507205 0.01 0.15";
        
        Node = "-56.622586470301165 38.21917626581226 0.01 0.15";
        
        Node = "-56.68406355403722 38.71099293570069 0.01 0.15";
        
        Node = "-56.74730201699969 39.20109102365982 0.01 0.15";
        
        Node = "-56.81201058462837 39.694867170487896 0.01 0.15";
        
        Node = "-56.87697669925022 40.18960912030049 0.01 0.15";
        
        Node = "-56.94204440284127 40.68612522946634 0.01 0.15";
        
        Node = "-57.00365753690102 41.15628083706074 0.01 0.15";
        
        Node = "-57.07204440284127 41.67812522946638 0.01 0.15";
        
        Node = "-57.137010584626694 42.17386717047511 0.01 0.15";
        
        Node = "-57.201976699250224 42.66860912030049 0.01 0.15";
        
        Node = "-57.26704440284127 43.16512522946637 0.01 0.15";
        
        Node = "-57.26755573326805 43.169057324739605 0.01 0.15";
        
        Node = "-57.33130201699974 43.66309102366028 0.01 0.15";
        
        Node = "-57.39604440284127 44.15712522946638 0.01 0.15";
        
        Node = "-57.46104440284127 44.65312522946634 0.01 0.15";
        
        Node = "-57.526010584627905 45.14886717048439 0.01 0.15";
        
        Node = "-57.59097669925022 45.64360912030049 0.01 0.15";
        
        Node = "-57.65604440284127 46.14012522946634 0.01 0.15";
        
        Node = "-57.72104440284127 46.63612522946638 0.01 0.15";
        
        Node = "-57.72155573326805 46.64005732473961 0.01 0.15";
        
        Node = "-57.78555573326805 47.13605732473961 0.01 0.15";
        
        Node = "-57.786059522678535 47.13999243965977 0.01 0.15";
        
        Node = "-57.84905952267854 47.635992439659766 0.01 0.15";
        
        Node = "-57.84955575342734 47.639930530821594 0.01 0.15";
        
        Node = "-57.973555753427334 48.6319305308216 0.01 0.15";
        
        Node = "-57.9881339123554 48.748790816944414 0.01 0.15";
        
        Node = "-58.03534079649032 49.12720691284459 0.01 0.15";
        
        Node = "-58.09805952267853 49.620992439659794 0.01 0.15";
        
        Node = "-58.16027679461399 50.110830009183374 0.01 0.15";
        
        Node = "-58.225228955960674 50.59797121928348 0.01 0.15";
        
        Node = "-58.291999190716325 51.092270270608886 0.01 0.15";
        
    };
    
    new DecalRoad(road_7) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "10";
textureLength = "2.5";
distanceFade = "1000 1000";
drivability = "1";
        Material = "road_rubber_sticky";

        
        Node = "-49.88 1.77 0.01 8.0";
        
        Node = "-50.462 1.704 0.01 8.000000000000002";
        
        Node = "-51.044 1.639 0.01 8.0";
        
        Node = "-51.626 1.573 0.01 7.999999999999999";
        
        Node = "-52.208 1.507 0.01 8.0";
        
        Node = "-52.791 1.442 0.01 7.999999999999999";
        
        Node = "-53.373 1.376 0.01 8.0";
        
        Node = "-53.955 1.309 0.01 8.000000000000002";
        
        Node = "-54.537 1.243 0.01 8.0";
        
        Node = "-55.119 1.181 0.01 8.000000000000002";
        
        Node = "-55.702 1.121 0.01 8.000000000000002";
        
        Node = "-56.284 1.059 0.01 7.999999999999999";
        
        Node = "-56.867 0.993 0.01 8.000000000000002";
        
        Node = "-57.449 0.926 0.01 8.0";
        
        Node = "-58.031 0.861 0.01 8.000000000000002";
        
        Node = "-58.613 0.795 0.01 8.000000000000002";
        
        Node = "-59.195 0.729 0.01 8.0";
        
        Node = "-59.777 0.664 0.01 8.0";
        
        Node = "-60.359 0.598 0.01 7.999999999999999";
        
        Node = "-60.941 0.533 0.01 8.0";
        
        Node = "-61.523 0.468 0.01 7.999999999999999";
        
        Node = "-62.106 0.402 0.01 7.999999999999999";
        
        Node = "-62.688 0.336 0.01 8.0";
        
        Node = "-63.27 0.27 0.01 8.000000000000002";
        
        Node = "-63.852 0.205 0.01 7.999999999999999";
        
        Node = "-64.434 0.139 0.01 8.0";
        
        Node = "-65.016 0.073 0.01 8.0";
        
        Node = "-65.598 0.008 0.01 8.000000000000002";
        
        Node = "-66.18 -0.058 0.01 8.000000000000002";
        
        Node = "-66.762 -0.123 0.01 7.999999999999998";
        
        Node = "-67.345 -0.188 0.01 8.0";
        
        Node = "-67.927 -0.254 0.01 7.999999999999998";
        
        Node = "-68.509 -0.32 0.01 8.0";
        
        Node = "-69.091 -0.386 0.01 8.000000000000002";
        
        Node = "-69.673 -0.451 0.01 8.000000000000004";
        
        Node = "-70.255 -0.517 0.01 8.000000000000002";
        
        Node = "-70.837 -0.583 0.01 8.000000000000002";
        
        Node = "-71.419 -0.649 0.01 8.0";
        
        Node = "-72.001 -0.714 0.01 7.999999999999997";
        
        Node = "-72.584 -0.776 0.01 7.999999999999999";
        
        Node = "-73.167 -0.837 0.01 7.999999999999998";
        
        Node = "-73.749 -0.899 0.01 8.0";
        
        Node = "-74.331 -0.965 0.01 8.000000000000002";
        
        Node = "-74.913 -1.032 0.01 8.000000000000004";
        
        Node = "-75.495 -1.098 0.01 8.000000000000002";
        
        Node = "-76.077 -1.163 0.01 8.000000000000002";
        
        Node = "-76.66 -1.227 0.01 8.0";
        
        Node = "-77.242 -1.295 0.01 7.9999999999999964";
        
        Node = "-77.822 -1.367 0.01 7.999999999999998";
        
        Node = "-78.406 -1.426 0.01 7.999999999999998";
        
        Node = "-78.992 -1.468 0.01 8.0";
        
        Node = "-79.573 -1.544 0.01 8.0";
        
        Node = "-80.135 -1.705 0.01 7.999999999999999";
        
        Node = "-80.695 -1.878 0.01 8.0";
        
        Node = "-81.252 -2.059 0.01 8.0";
        
        Node = "-81.814 -2.223 0.01 8.000000000000002";
        
        Node = "-82.372 -2.401 0.01 7.999999999999999";
        
        Node = "-82.932 -2.575 0.01 8.0";
        
        Node = "-83.493 -2.743 0.01 8.0";
        
        Node = "-84.052 -2.918 0.01 8.000000000000002";
        
        Node = "-84.612 -3.089 0.01 7.999999999999999";
        
        Node = "-85.171 -3.265 0.01 8.0";
        
        Node = "-85.731 -3.436 0.01 8.000000000000002";
        
        Node = "-86.291 -3.608 0.01 8.000000000000002";
        
        Node = "-86.849 -3.786 0.01 7.999999999999999";
        
        Node = "-87.411 -3.951 0.01 8.0";
        
        Node = "-87.969 -4.129 0.01 7.999999999999997";
        
        Node = "-88.531 -4.294 0.01 8.000000000000002";
        
        Node = "-89.09 -4.472 0.01 7.999999999999999";
        
        Node = "-89.648 -4.649 0.01 8.0";
        
        Node = "-90.21 -4.815 0.01 8.0";
        
        Node = "-90.768 -4.992 0.01 8.000000000000002";
        
        Node = "-91.328 -5.164 0.01 8.000000000000002";
        
        Node = "-91.888 -5.335 0.01 8.000000000000004";
        
        Node = "-92.448 -5.508 0.01 7.999999999999999";
        
        Node = "-93.008 -5.679 0.01 8.000000000000002";
        
        Node = "-93.566 -5.859 0.01 7.999999999999997";
        
        Node = "-94.127 -6.025 0.01 8.000000000000005";
        
        Node = "-94.686 -6.2 0.01 8.0";
        
        Node = "-95.245 -6.377 0.01 7.999999999999997";
        
        Node = "-95.807 -6.542 0.01 8.0";
        
        Node = "-96.365 -6.72 0.01 8.000000000000002";
        
        Node = "-96.927 -6.885 0.01 8.0";
        
        Node = "-97.484 -7.066 0.01 8.000000000000002";
        
        Node = "-98.044 -7.239 0.01 8.0";
        
        Node = "-98.605 -7.407 0.01 7.999999999999999";
        
        Node = "-99.164 -7.583 0.01 8.0";
        
        Node = "-99.724 -7.753 0.01 8.0";
        
        Node = "-100.283 -7.928 0.01 8.0";
        
        Node = "-100.844 -8.098 0.01 7.999999999999999";
        
        Node = "-101.403 -8.273 0.01 7.999999999999997";
        
        Node = "-101.961 -8.45 0.01 8.000000000000004";
        
        Node = "-102.523 -8.615 0.01 8.000000000000002";
        
        Node = "-103.081 -8.793 0.01 8.000000000000002";
        
        Node = "-103.643 -8.958 0.01 8.000000000000004";
        
        Node = "-104.202 -9.135 0.01 8.0";
        
        Node = "-104.761 -9.311 0.01 8.0";
        
        Node = "-105.321 -9.48 0.01 8.000000000000002";
        
        Node = "-105.88 -9.657 0.01 8.000000000000002";
        
        Node = "-106.44 -9.828 0.01 8.000000000000002";
        
        Node = "-107.0 -10.0 0.01 8.0";
        
    };
    
    new DecalRoad(road_7_left_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-49.45463359106907 -1.9809583333000642 0.01 0.15";
        
        Node = "-50.03663359106907 -2.046958333300064 0.01 0.15";
        
        Node = "-50.042998534279505 -2.047674662297368 0.01 0.15";
        
        Node = "-50.62181575882155 -2.112319197684367 0.01 0.15";
        
        Node = "-51.782633591069064 -2.243958333300064 0.01 0.15";
        
        Node = "-51.78970840158487 -2.2447538750156992 0.01 0.15";
        
        Node = "-52.36917062124214 -2.3093594398145374 0.01 0.15";
        
        Node = "-52.94445264741789 -2.3745976077313746 0.01 0.15";
        
        Node = "-53.52327232015798 -2.441231487582897 0.01 0.15";
        
        Node = "-53.529633591069064 -2.4419583333000654 0.01 0.15";
        
        Node = "-54.111633591069065 -2.5079583333000652 0.01 0.15";
        
        Node = "-54.137114875078176 -2.5107603662016382 0.01 0.15";
        
        Node = "-54.719114875078176 -2.572760366201638 0.01 0.15";
        
        Node = "-54.732533557388614 -2.574165600707284 0.01 0.15";
        
        Node = "-55.30882296063469 -2.6334749732540508 0.01 0.15";
        
        Node = "-55.87172993341265 -2.693441008154796 0.01 0.15";
        
        Node = "-56.43881276211538 -2.7576390642343505 0.01 0.15";
        
        Node = "-57.01727232015798 -2.8242314875828964 0.01 0.15";
        
        Node = "-57.0299985342795 -2.825674662297368 0.01 0.15";
        
        Node = "-57.60881575882104 -2.8903191976843092 0.01 0.15";
        
        Node = "-58.187633591069066 -2.955958333300065 0.01 0.15";
        
        Node = "-58.769633591069066 -3.021958333300064 0.01 0.15";
        
        Node = "-58.7759985342795 -3.022674662297369 0.01 0.15";
        
        Node = "-59.35481575882207 -3.0873191976844256 0.01 0.15";
        
        Node = "-59.93363359106907 -3.1529583333000644 0.01 0.15";
        
        Node = "-59.9399985342795 -3.153674662297369 0.01 0.15";
        
        Node = "-60.521998534279504 -3.218674662297369 0.01 0.15";
        
        Node = "-61.101176012040945 -3.2833594321504505 0.01 0.15";
        
        Node = "-61.68099377527428 -3.348999178931583 0.01 0.15";
        
        Node = "-62.84463359106907 -3.480958333300064 0.01 0.15";
        
        Node = "-62.850998534279505 -3.481674662297368 0.01 0.15";
        
        Node = "-63.42981575882103 -3.546319197684309 0.01 0.15";
        
        Node = "-64.00863359106906 -3.6119583333000653 0.01 0.15";
        
        Node = "-64.59063359106908 -3.6779583333000656 0.01 0.15";
        
        Node = "-64.5969985342795 -3.678674662297368 0.01 0.15";
        
        Node = "-65.17581575882124 -3.743319197684333 0.01 0.15";
        
        Node = "-65.75463359106908 -3.8089583333000654 0.01 0.15";
        
        Node = "-65.76099853427951 -3.809674662297368 0.01 0.15";
        
        Node = "-66.3429985342795 -3.874674662297368 0.01 0.15";
        
        Node = "-66.9231706212417 -3.939359439814486 0.01 0.15";
        
        Node = "-67.50163359106908 -4.004958333300065 0.01 0.15";
        
        Node = "-68.66563359106905 -4.136958333300064 0.01 0.15";
        
        Node = "-68.67199853427951 -4.1376746622973695 0.01 0.15";
        
        Node = "-69.25081575882068 -4.202319197684269 0.01 0.15";
        
        Node = "-69.82963359106905 -4.267958333300064 0.01 0.15";
        
        Node = "-70.41163359106908 -4.333958333300066 0.01 0.15";
        
        Node = "-70.99363359106906 -4.399958333300065 0.01 0.15";
        
        Node = "-70.99999853427951 -4.400674662297369 0.01 0.15";
        
        Node = "-71.58199853427952 -4.465674662297369 0.01 0.15";
        
        Node = "-71.601793107276 -4.467832555775715 0.01 0.15";
        
        Node = "-72.184793107276 -4.529832555775715 0.01 0.15";
        
        Node = "-72.19116163600704 -4.530504364063961 0.01 0.15";
        
        Node = "-72.77063790640871 -4.591135671944753 0.01 0.15";
        
        Node = "-73.33636947610684 -4.651402608922905 0.01 0.15";
        
        Node = "-73.90245264741748 -4.715597607731326 0.01 0.15";
        
        Node = "-74.48127232015797 -4.782231487582896 0.01 0.15";
        
        Node = "-74.48763359106907 -4.782958333300066 0.01 0.15";
        
        Node = "-75.06963359106908 -4.848958333300065 0.01 0.15";
        
        Node = "-75.0759985342795 -4.849674662297368 0.01 0.15";
        
        Node = "-75.6579985342795 -4.914674662297368 0.01 0.15";
        
        Node = "-75.66506643775229 -4.915457293600276 0.01 0.15";
        
        Node = "-76.23498544092153 -4.978021300809249 0.01 0.15";
        
        Node = "-76.79042598377212 -5.042918133994542 0.01 0.15";
        
        Node = "-77.35694888233718 -5.113245114506064 0.01 0.15";
        
        Node = "-77.44255307850763 -5.122881392399121 0.01 0.15";
        
        Node = "-78.02655307850763 -5.181881392399121 0.01 0.15";
        
        Node = "-78.13612912559607 -5.191341247635924 0.01 0.15";
        
        Node = "-78.61192299486531 -5.225442514716654 0.01 0.15";
        
        Node = "-78.80411259408788 -5.25058263440842 0.01 0.15";
        
        Node = "-79.05794684751575 -5.323300276404656 0.01 0.15";
        
        Node = "-79.55448908923638 -5.476696361793357 0.01 0.15";
        
        Node = "-80.08534582357818 -5.649200973850564 0.01 0.15";
        
        Node = "-80.19450479260084 -5.682855527794647 0.01 0.15";
        
        Node = "-80.71145512515032 -5.83370936149236 0.01 0.15";
        
        Node = "-81.22474618002262 -5.997447368243737 0.01 0.15";
        
        Node = "-81.25187814467347 -6.005989879211845 0.01 0.15";
        
        Node = "-81.81187814467347 -6.1799898792118455 0.01 0.15";
        
        Node = "-81.84903604990633 -6.191326047634188 0.01 0.15";
        
        Node = "-82.38756396887506 -6.35259644048044 0.01 0.15";
        
        Node = "-82.92417725646537 -6.520588077919264 0.01 0.15";
        
        Node = "-82.94953023018597 -6.5284273163499895 0.01 0.15";
        
        Node = "-83.49390030716964 -6.694654607714649 0.01 0.15";
        
        Node = "-84.0373122923379 -6.86574675331324 0.01 0.15";
        
        Node = "-84.06853023018597 -6.87542731634999 0.01 0.15";
        
        Node = "-84.62558304765385 -7.045527373112507 0.01 0.15";
        
        Node = "-85.16315889968178 -7.21063995623537 0.01 0.15";
        
        Node = "-85.70174618002262 -7.382447368243738 0.01 0.15";
        
        Node = "-85.78556692937848 -7.4081174890260595 0.01 0.15";
        
        Node = "-86.30550751615858 -7.560769084788903 0.01 0.15";
        
        Node = "-86.82174618002259 -7.7254473682437315 0.01 0.15";
        
        Node = "-86.90556692937848 -7.751117489026067 0.01 0.15";
        
        Node = "-87.426445831938 -7.90404456895902 0.01 0.15";
        
        Node = "-87.94460942001238 -8.069041203444245 0.01 0.15";
        
        Node = "-87.94860069015688 -8.070309688657947 0.01 0.15";
        
        Node = "-88.50660069015687 -8.247309688657946 0.01 0.15";
        
        Node = "-88.57863762745784 -8.269371405835459 0.01 0.15";
        
        Node = "-89.10450907924337 -8.424699984120867 0.01 0.15";
        
        Node = "-89.6266006901569 -8.590309688657953 0.01 0.15";
        
        Node = "-89.65963733828966 -8.600622619522074 0.01 0.15";
        
        Node = "-90.21963733828966 -8.772622619522075 0.01 0.15";
        
        Node = "-90.225530230186 -8.774427316349996 0.01 0.15";
        
        Node = "-90.77963881390464 -8.943628330306938 0.01 0.15";
        
        Node = "-91.33375330007425 -9.114810126927196 0.01 0.15";
        
        Node = "-91.34553023018599 -9.118427316349996 0.01 0.15";
        
        Node = "-91.87722788539457 -9.280784993208332 0.01 0.15";
        
        Node = "-92.40706450579161 -9.451700032046084 0.01 0.15";
        
        Node = "-92.49488479198654 -9.478853202985208 0.01 0.15";
        
        Node = "-93.02746324501857 -9.636443262171158 0.01 0.15";
        
        Node = "-93.55231379389285 -9.800752467990474 0.01 0.15";
        
        Node = "-94.10545633753668 -9.975897781451938 0.01 0.15";
        
        Node = "-94.18156692937848 -9.999117489026059 0.01 0.15";
        
        Node = "-94.70150751615861 -10.151769084788913 0.01 0.15";
        
        Node = "-95.21774618002259 -10.316447368243729 0.01 0.15";
        
        Node = "-95.30156692937848 -10.342117489026068 0.01 0.15";
        
        Node = "-95.81172798542718 -10.491897870250327 0.01 0.15";
        
        Node = "-96.31734582357815 -10.656200973850556 0.01 0.15";
        
        Node = "-96.36975330007428 -10.672810126927203 0.01 0.15";
        
        Node = "-96.92975330007428 -10.845810126927205 0.01 0.15";
        
        Node = "-96.96103604990634 -10.855326047634195 0.01 0.15";
        
        Node = "-97.49661942313999 -11.015714651383307 0.01 0.15";
        
        Node = "-98.03031229233787 -11.183746753313232 0.01 0.15";
        
        Node = "-98.06743194632054 -11.195224176826466 0.01 0.15";
        
        Node = "-98.61178372952052 -11.360473825297891 0.01 0.15";
        
        Node = "-99.15517725646535 -11.530588077919257 0.01 0.15";
        
        Node = "-99.18822208280714 -11.540767126736357 0.01 0.15";
        
        Node = "-99.7326763606729 -11.705753271544161 0.01 0.15";
        
        Node = "-100.26838494007545 -11.873461681911685 0.01 0.15";
        
        Node = "-100.81960069015688 -12.048309688657945 0.01 0.15";
        
        Node = "-100.89756692937846 -12.072117489026057 0.01 0.15";
        
        Node = "-101.41750751615872 -12.224769084788948 0.01 0.15";
        
        Node = "-101.93374618002262 -12.38944736824374 0.01 0.15";
        
        Node = "-102.01756692937846 -12.415117489026057 0.01 0.15";
        
        Node = "-102.54138926384464 -12.568908743807054 0.01 0.15";
        
        Node = "-103.06245633753667 -12.733897781451939 0.01 0.15";
        
        Node = "-103.06831229233786 -12.735746753313231 0.01 0.15";
        
        Node = "-103.62731229233786 -12.911746753313231 0.01 0.15";
        
        Node = "-103.67034245694133 -12.925013160431105 0.01 0.15";
        
        Node = "-104.20584817435338 -13.086621135864382 0.01 0.15";
        
        Node = "-104.74045633753667 -13.255897781451939 0.01 0.15";
        
        Node = "-104.77753023018599 -13.267427316349998 0.01 0.15";
        
        Node = "-105.33458304765398 -13.437527373112545 0.01 0.15";
        
        Node = "-105.89163733828966 -13.608622619522073 0.01 0.15";
        
    };
    
    new DecalRoad(road_7_right_line) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_white";

        
        Node = "-108.10836266171034 -6.391377380477927 0.01 0.15";
        
        Node = "-107.54836266171034 -6.219377380477926 0.01 0.15";
        
        Node = "-107.542469769814 -6.217572683650002 0.01 0.15";
        
        Node = "-107.00103636140621 -6.052242125011193 0.01 0.15";
        
        Node = "-106.46054366246332 -5.881102218548062 0.01 0.15";
        
        Node = "-106.41165754305867 -5.865986839568896 0.01 0.15";
        
        Node = "-105.87321218701524 -5.703491723191504 0.01 0.15";
        
        Node = "-105.33861643701043 -5.535175351096967 0.01 0.15";
        
        Node = "-104.78254366246333 -5.3591022185480615 0.01 0.15";
        
        Node = "-104.70643307062154 -5.335882510973942 0.01 0.15";
        
        Node = "-104.1864924838413 -5.18323091521106 0.01 0.15";
        
        Node = "-103.67025381997738 -5.01855263175626 0.01 0.15";
        
        Node = "-103.58643307062154 -4.992882510973942 0.01 0.15";
        
        Node = "-103.06354472865624 -4.839365471073098 0.01 0.15";
        
        Node = "-102.54439930984313 -4.674690311342054 0.01 0.15";
        
        Node = "-102.53082274353463 -4.670411922080733 0.01 0.15";
        
        Node = "-101.97182274353462 -4.495411922080734 0.01 0.15";
        
        Node = "-101.93877791719285 -4.485232873263644 0.01 0.15";
        
        Node = "-101.39432363932694 -4.320246728455791 0.01 0.15";
        
        Node = "-100.85182274353465 -4.150411922080743 0.01 0.15";
        
        Node = "-100.82056805367947 -4.140775823173534 0.01 0.15";
        
        Node = "-100.27915741343844 -3.9764190216717936 0.01 0.15";
        
        Node = "-99.73868770766214 -3.8062532466867687 0.01 0.15";
        
        Node = "-99.68796395009366 -3.790673952365805 0.01 0.15";
        
        Node = "-99.14262593130537 -3.627364171338301 0.01 0.15";
        
        Node = "-98.62451091076373 -3.467303638206684 0.01 0.15";
        
        Node = "-98.09365417642185 -3.2947990261494446 0.01 0.15";
        
        Node = "-97.99043307062152 -3.2628825109739323 0.01 0.15";
        
        Node = "-97.47049248384123 -3.11023091521104 0.01 0.15";
        
        Node = "-96.95425381997741 -2.9455526317562697 0.01 0.15";
        
        Node = "-96.87043307062153 -2.91988251097394 0.01 0.15";
        
        Node = "-96.34661073615547 -2.766091256192978 0.01 0.15";
        
        Node = "-95.82554366246333 -2.6011022185480615 0.01 0.15";
        
        Node = "-95.81382274353463 -2.597411922080736 0.01 0.15";
        
        Node = "-95.25482274353462 -2.422411922080736 0.01 0.15";
        
        Node = "-95.19811520801346 -2.405146797014792 0.01 0.15";
        
        Node = "-94.68119066006354 -2.252188731132994 0.01 0.15";
        
        Node = "-94.16693549420839 -2.086299967953916 0.01 0.15";
        
        Node = "-94.110469769814 -2.0685726836500042 0.01 0.15";
        
        Node = "-93.55636118609536 -1.8993716696930623 0.01 0.15";
        
        Node = "-93.00224669992575 -1.7281898730728034 0.01 0.15";
        
        Node = "-92.99046976981401 -1.724572683650004 0.01 0.15";
        
        Node = "-92.43341695234776 -1.5544726268879874 0.01 0.15";
        
        Node = "-91.89290462306462 -1.3884581257510251 0.01 0.15";
        
        Node = "-91.35139930984309 -1.2166903113420466 0.01 0.15";
        
        Node = "-91.27936237254215 -1.1946285941645414 0.01 0.15";
        
        Node = "-90.7534909207567 -1.0393000158791572 0.01 0.15";
        
        Node = "-90.23339529672943 -0.8743234469672774 0.01 0.15";
        
        Node = "-89.67639057998763 -0.6969587965557555 0.01 0.15";
        
        Node = "-89.59443307062152 -0.6718825109739321 0.01 0.15";
        
        Node = "-89.07449248384128 -0.5192309152110548 0.01 0.15";
        
        Node = "-88.55825381997741 -0.3545526317562686 0.01 0.15";
        
        Node = "-88.47443307062153 -0.32888251097394017 0.01 0.15";
        
        Node = "-87.95449248384132 -0.1762309152110651 0.01 0.15";
        
        Node = "-87.43825381997738 -0.011552631756262421 0.01 0.15";
        
        Node = "-87.39936266171034 0.0006226195220730979 0.01 0.15";
        
        Node = "-86.83936266171034 0.17262261952207325 0.01 0.15";
        
        Node = "-86.83346976981403 0.17442731634998943 0.01 0.15";
        
        Node = "-86.2890996928304 0.3406546077146352 0.01 0.15";
        
        Node = "-85.7456877076621 0.5117467533132398 0.01 0.15";
        
        Node = "-85.71446976981403 0.5214273163499894 0.01 0.15";
        
        Node = "-85.16716003371474 0.6885522536231714 0.01 0.15";
        
        Node = "-84.62082274353463 0.859588077919264 0.01 0.15";
        
        Node = "-84.57596395009367 0.8733260476341878 0.01 0.15";
        
        Node = "-84.03357206832722 1.03575356302949 0.01 0.15";
        
        Node = "-83.50570392993329 1.1997697346018865 0.01 0.15";
        
        Node = "-82.96125381997737 1.3734473682437378 0.01 0.15";
        
        Node = "-82.87149520739915 1.4008555277946475 0.01 0.15";
        
        Node = "-82.36432931262286 1.5488541163058804 0.01 0.15";
        
        Node = "-81.86165417642181 1.7122009738505641 0.01 0.15";
        
        Node = "-81.80924669992574 1.7288101269271976 0.01 0.15";
        
        Node = "-81.24924669992575 1.9018101269271974 0.01 0.15";
        
        Node = "-81.1746305659596 1.9240209817969514 0.01 0.15";
        
        Node = "-80.61263056595959 2.0850209817969514 0.01 0.15";
        
        Node = "-80.33975651873115 2.152310246852023 0.01 0.15";
        
        Node = "-80.06263250818142 2.1991116743869603 0.01 0.15";
        
        Node = "-79.48163250818143 2.2751116743869604 0.01 0.15";
        
        Node = "-79.26187087440394 2.297341247635924 0.01 0.15";
        
        Node = "-78.73072780785763 2.3354095220300284 0.01 0.15";
        
        Node = "-78.24430399771097 2.384551653534571 0.01 0.15";
        
        Node = "-77.70705111766283 2.4512451145060647 0.01 0.15";
        
        Node = "-77.68008522642336 2.4544941437998813 0.01 0.15";
        
        Node = "-77.09808522642335 2.5224941437998813 0.01 0.15";
        
        Node = "-77.07193356224771 2.525457293600275 0.01 0.15";
        
        Node = "-76.49246788255242 2.589069306465624 0.01 0.15";
        
        Node = "-75.91718424117902 2.6533191976843042 0.01 0.15";
        
        Node = "-75.34154735258227 2.718597607731356 0.01 0.15";
        
        Node = "-74.76272767984203 2.7852314875828967 0.01 0.15";
        
        Node = "-74.75636640893093 2.7859583333000657 0.01 0.15";
        
        Node = "-74.17436640893092 2.8519583333000655 0.01 0.15";
        
        Node = "-74.14888512492182 2.854760366201638 0.01 0.15";
        
        Node = "-73.56688512492182 2.916760366201638 0.01 0.15";
        
        Node = "-73.55983836399297 2.9175043640639604 0.01 0.15";
        
        Node = "-72.98002291327099 2.978171160794733 0.01 0.15";
        
        Node = "-72.41010702477136 3.038779711544265 0.01 0.15";
        
        Node = "-71.84118424117906 3.102319197684298 0.01 0.15";
        
        Node = "-71.26236640893094 3.1679583333000645 0.01 0.15";
        
        Node = "-70.68036640893092 3.2339583333000657 0.01 0.15";
        
        Node = "-70.09836640893094 3.299958333300064 0.01 0.15";
        
        Node = "-70.09200146572049 3.3006746622973693 0.01 0.15";
        
        Node = "-69.51318424117906 3.3653191976842978 0.01 0.15";
        
        Node = "-68.35236640893095 3.4969583333000642 0.01 0.15";
        
        Node = "-67.77036640893093 3.5629583333000654 0.01 0.15";
        
        Node = "-67.76329159841512 3.5637538750156987 0.01 0.15";
        
        Node = "-67.18064653582042 3.628714302234662 0.01 0.15";
        
        Node = "-66.60218424117876 3.693319197684333 0.01 0.15";
        
        Node = "-66.02336640893093 3.7589583333000656 0.01 0.15";
        
        Node = "-66.0170014657205 3.759674662297368 0.01 0.15";
        
        Node = "-65.43818424117876 3.824319197684333 0.01 0.15";
        
        Node = "-64.85936640893092 3.889958333300066 0.01 0.15";
        
        Node = "-64.27736640893093 3.955958333300065 0.01 0.15";
        
        Node = "-64.2710014657205 3.956674662297368 0.01 0.15";
        
        Node = "-63.69218424117844 4.021319197684368 0.01 0.15";
        
        Node = "-62.531366408930936 4.152958333300064 0.01 0.15";
        
        Node = "-61.947646032685554 4.219039955388962 0.01 0.15";
        
        Node = "-61.942001465720494 4.219674662297369 0.01 0.15";
        
        Node = "-61.3600014657205 4.284674662297369 0.01 0.15";
        
        Node = "-60.781184241177925 4.3493191976844265 0.01 0.15";
        
        Node = "-60.20236640893094 4.414958333300064 0.01 0.15";
        
        Node = "-60.1960014657205 4.415674662297369 0.01 0.15";
        
        Node = "-59.61718424117794 4.480319197684426 0.01 0.15";
        
        Node = "-59.038366408930926 4.545958333300065 0.01 0.15";
        
        Node = "-58.45636640893093 4.611958333300065 0.01 0.15";
        
        Node = "-58.450001465720504 4.612674662297368 0.01 0.15";
        
        Node = "-57.87436579688027 4.676963869298424 0.01 0.15";
        
        Node = "-57.29872767984202 4.7432314875828965 0.01 0.15";
        
        Node = "-57.29164603268555 4.7440399553889625 0.01 0.15";
        
        Node = "-56.70864603268555 4.810039955388962 0.01 0.15";
        
        Node = "-56.68388512492183 4.812760366201638 0.01 0.15";
        
        Node = "-56.10188512492182 4.874760366201638 0.01 0.15";
        
        Node = "-56.08846644261138 4.876165600707284 0.01 0.15";
        
        Node = "-55.512177039365554 4.935474973254025 0.01 0.15";
        
        Node = "-54.949630523893276 4.995402608922892 0.01 0.15";
        
        Node = "-54.38354735258159 5.059597607731433 0.01 0.15";
        
        Node = "-53.80472767984202 5.1262314875828965 0.01 0.15";
        
        Node = "-53.79836640893093 5.126958333300064 0.01 0.15";
        
        Node = "-53.216366408930924 5.192958333300064 0.01 0.15";
        
        Node = "-53.20929159841512 5.193753875015699 0.01 0.15";
        
        Node = "-52.62982937875785 5.258359439814537 0.01 0.15";
        
        Node = "-51.46936640893094 5.389958333300064 0.01 0.15";
        
        Node = "-51.463001465720495 5.390674662297368 0.01 0.15";
        
        Node = "-50.884184241178446 5.455319197684367 0.01 0.15";
        
        Node = "-50.30536640893094 5.520958333300064 0.01 0.15";
        
    };
    
    new DecalRoad(road_7_left_right_divider) {
        oneWay = "0";
        flipDirection = "0";
        improvedSpline = "0";
        startTangent = "0";
        endTangent = "0";
        looped = "0";
        smoothness = "0.5";
        detail = "0.1";
annotation = "STREET";
        overObjects = "1";
        breakAngle = "3";
        zBias = "0";
        decalBias = "0.0005";
        startEndFade = "0 0";
        position = "0 0 0";
        scale = "1 1 1";
        rotationMatrix = "1 0 0 0 1 0 0 0 1";
        canSave = "1";
        canSaveDynamicFields = "1";

renderPriority = "9";
textureLength = "16";
distanceFade = "0 0";
drivability = "-1";
        Material = "line_yellow_double";

        
        Node = "-49.88 1.77 0.01 0.3";
        
        Node = "-50.462 1.704 0.01 0.3";
        
        Node = "-51.044 1.639 0.01 0.3";
        
        Node = "-51.626 1.573 0.01 0.3";
        
        Node = "-52.208 1.507 0.01 0.3";
        
        Node = "-52.791 1.442 0.01 0.3";
        
        Node = "-53.373 1.376 0.01 0.3";
        
        Node = "-53.955 1.309 0.01 0.3";
        
        Node = "-54.537 1.243 0.01 0.3";
        
        Node = "-55.119 1.181 0.01 0.3";
        
        Node = "-55.702 1.121 0.01 0.3";
        
        Node = "-56.284 1.059 0.01 0.3";
        
        Node = "-56.867 0.993 0.01 0.3";
        
        Node = "-57.449 0.926 0.01 0.3";
        
        Node = "-58.031 0.861 0.01 0.3";
        
        Node = "-58.613 0.795 0.01 0.3";
        
        Node = "-59.195 0.729 0.01 0.3";
        
        Node = "-59.777 0.664 0.01 0.3";
        
        Node = "-60.359 0.598 0.01 0.3";
        
        Node = "-60.941 0.533 0.01 0.3";
        
        Node = "-61.523 0.468 0.01 0.3";
        
        Node = "-62.106 0.402 0.01 0.3";
        
        Node = "-62.688 0.336 0.01 0.3";
        
        Node = "-63.27 0.27 0.01 0.3";
        
        Node = "-63.852 0.205 0.01 0.3";
        
        Node = "-64.434 0.139 0.01 0.3";
        
        Node = "-65.016 0.073 0.01 0.3";
        
        Node = "-65.598 0.008 0.01 0.3";
        
        Node = "-66.18 -0.058 0.01 0.3";
        
        Node = "-66.762 -0.123 0.01 0.3";
        
        Node = "-67.345 -0.188 0.01 0.3";
        
        Node = "-67.927 -0.254 0.01 0.3";
        
        Node = "-68.509 -0.32 0.01 0.3";
        
        Node = "-69.091 -0.386 0.01 0.3";
        
        Node = "-69.673 -0.451 0.01 0.3";
        
        Node = "-70.255 -0.517 0.01 0.3";
        
        Node = "-70.837 -0.583 0.01 0.3";
        
        Node = "-71.419 -0.649 0.01 0.3";
        
        Node = "-72.001 -0.714 0.01 0.3";
        
        Node = "-72.584 -0.776 0.01 0.3";
        
        Node = "-73.167 -0.837 0.01 0.3";
        
        Node = "-73.749 -0.899 0.01 0.3";
        
        Node = "-74.331 -0.965 0.01 0.3";
        
        Node = "-74.913 -1.032 0.01 0.3";
        
        Node = "-75.495 -1.098 0.01 0.3";
        
        Node = "-76.077 -1.163 0.01 0.3";
        
        Node = "-76.66 -1.227 0.01 0.3";
        
        Node = "-77.242 -1.295 0.01 0.3";
        
        Node = "-77.822 -1.367 0.01 0.3";
        
        Node = "-78.406 -1.426 0.01 0.3";
        
        Node = "-78.992 -1.468 0.01 0.3";
        
        Node = "-79.573 -1.544 0.01 0.3";
        
        Node = "-80.135 -1.705 0.01 0.3";
        
        Node = "-80.695 -1.878 0.01 0.3";
        
        Node = "-81.252 -2.059 0.01 0.3";
        
        Node = "-81.814 -2.223 0.01 0.3";
        
        Node = "-82.372 -2.401 0.01 0.3";
        
        Node = "-82.932 -2.575 0.01 0.3";
        
        Node = "-83.493 -2.743 0.01 0.3";
        
        Node = "-84.052 -2.918 0.01 0.3";
        
        Node = "-84.612 -3.089 0.01 0.3";
        
        Node = "-85.171 -3.265 0.01 0.3";
        
        Node = "-85.731 -3.436 0.01 0.3";
        
        Node = "-86.291 -3.608 0.01 0.3";
        
        Node = "-86.849 -3.786 0.01 0.3";
        
        Node = "-87.411 -3.951 0.01 0.3";
        
        Node = "-87.969 -4.129 0.01 0.3";
        
        Node = "-88.531 -4.294 0.01 0.3";
        
        Node = "-89.09 -4.472 0.01 0.3";
        
        Node = "-89.648 -4.649 0.01 0.3";
        
        Node = "-90.21 -4.815 0.01 0.3";
        
        Node = "-90.768 -4.992 0.01 0.3";
        
        Node = "-91.328 -5.164 0.01 0.3";
        
        Node = "-91.888 -5.335 0.01 0.3";
        
        Node = "-92.448 -5.508 0.01 0.3";
        
        Node = "-93.008 -5.679 0.01 0.3";
        
        Node = "-93.566 -5.859 0.01 0.3";
        
        Node = "-94.127 -6.025 0.01 0.3";
        
        Node = "-94.686 -6.2 0.01 0.3";
        
        Node = "-95.245 -6.377 0.01 0.3";
        
        Node = "-95.807 -6.542 0.01 0.3";
        
        Node = "-96.365 -6.72 0.01 0.3";
        
        Node = "-96.927 -6.885 0.01 0.3";
        
        Node = "-97.484 -7.066 0.01 0.3";
        
        Node = "-98.044 -7.239 0.01 0.3";
        
        Node = "-98.605 -7.407 0.01 0.3";
        
        Node = "-99.164 -7.583 0.01 0.3";
        
        Node = "-99.724 -7.753 0.01 0.3";
        
        Node = "-100.283 -7.928 0.01 0.3";
        
        Node = "-100.844 -8.098 0.01 0.3";
        
        Node = "-101.403 -8.273 0.01 0.3";
        
        Node = "-101.961 -8.45 0.01 0.3";
        
        Node = "-102.523 -8.615 0.01 0.3";
        
        Node = "-103.081 -8.793 0.01 0.3";
        
        Node = "-103.643 -8.958 0.01 0.3";
        
        Node = "-104.202 -9.135 0.01 0.3";
        
        Node = "-104.761 -9.311 0.01 0.3";
        
        Node = "-105.321 -9.48 0.01 0.3";
        
        Node = "-105.88 -9.657 0.01 0.3";
        
        Node = "-106.44 -9.828 0.01 0.3";
        
        Node = "-107.0 -10.0 0.01 0.3";
        
    };
    

    
    new TSStatic(stopsign977) {
        
        shapeName = "/levels/drivebuild/art/objects/stopsign.dae";
        
        position = "-43.53186228385037 8.01730047804589 0";
        
        rotationMatrix = "-0.10452846326765355 0.9945218953682733 0.0 -0.9945218953682733 -0.10452846326765355 0.0 0.0 0.0 1.0";
        
        scale = "1.9 1.9 1.9";
        
    };
    
    new TSStatic(pole730) {
        
        shapeName = "/levels/drivebuild/art/objects/pole_light_signal1.dae";
        
        position = "97.858093222969 6.0134570705515245 0";
        
        rotationMatrix = "-0.40673664307580043 0.9135454576426008 0.0 -0.9135454576426008 -0.40673664307580043 0.0 0.0 0.0 1.0";
        
        scale = "0.75 0.75 0.75";
        
    };
    
    new TSStatic(trafficlight730) {
        
        shapeName = "/levels/drivebuild/art/objects/trafficlight2a.dae";
        
        position = "95.3843916296377 11.151520949791463 5.9";
        
        rotationMatrix = "-0.40673664307580043 0.9135454576426008 0.0 -0.9135454576426008 -0.40673664307580043 0.0 0.0 0.0 1.0";
        
        scale = "1 1 1";
        
    };
    
    new TSStatic(trafficlight730a) {
        
        shapeName = "/levels/drivebuild/art/objects/trafficlight2a.dae";
        
        position = "96.84864354471058 7.8627573022781 5.5";
        
        rotationMatrix = "-0.40673664307580043 0.9135454576426008 0.0 -0.9135454576426008 -0.40673664307580043 0.0 0.0 0.0 1.0";
        
        scale = "1 1 1";
        
    };
    
    new TSStatic(pole432) {
        
        shapeName = "/levels/drivebuild/art/objects/pole_light_signal1.dae";
        
        position = "3.7128138769529784 65.51336708350568 0";
        
        rotationMatrix = "0.03489949670250128 -0.9993908270190958 0.0 0.9993908270190958 0.03489949670250128 0.0 0.0 0.0 1.0";
        
        scale = "0.75 0.75 0.75";
        
    };
    
    new TSStatic(trafficlight432) {
        
        shapeName = "/levels/drivebuild/art/objects/trafficlight2a.dae";
        
        position = "4.081637448750482 59.82277228393626 5.9";
        
        rotationMatrix = "0.03489949670250128 -0.9993908270190958 0.0 0.9993908270190958 0.03489949670250128 0.0 0.0 0.0 1.0";
        
        scale = "1 1 1";
        
    };
    
    new TSStatic(trafficlight432a) {
        
        shapeName = "/levels/drivebuild/art/objects/trafficlight2a.dae";
        
        position = "3.9559992606214776 63.420579261205006 5.5";
        
        rotationMatrix = "0.03489949670250128 -0.9993908270190958 0.0 0.9993908270190958 0.03489949670250128 0.0 0.0 0.0 1.0";
        
        scale = "1 1 1";
        
    };
new BeamNGWaypoint(wp_ego_0){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "8.65 0.0 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_1){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "15.75 0.01 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_2){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "22.32 0.04 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_3){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "28.41 0.09 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_4){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "34.05 0.18 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_5){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "39.28 0.31 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_6){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "44.13 0.49 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_7){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "48.65 0.73 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_8){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "52.86 1.04 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_9){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "56.82 1.42 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_10){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "60.54 1.89 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_11){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "64.08 2.46 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_12){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "67.46 3.12 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_13){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "70.73 3.9 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_14){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "73.92 4.8 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_15){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "77.07 5.82 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_16){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "80.21 6.98 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_17){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "83.39 8.29 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_18){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "88.04 10.37 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_19){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "91.08 11.74 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_20){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "94.12 13.1 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_21){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "97.16 14.47 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_22){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "100.2 15.84 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_23){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "103.24 17.21 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_24){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "102.62 25.52 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_25){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "102.01 33.83 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_26){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "101.4 42.14 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_27){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "100.78 50.45 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_28){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "100.17 58.76 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_29){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "99.55 67.07 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_30){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "94.71 68.64 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_31){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "90.25 69.57 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_32){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "86.11 69.94 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_33){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "82.24 69.84 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_34){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "78.6 69.35 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_35){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "75.14 68.56 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_36){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "71.8 67.57 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_37){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "68.54 66.45 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_38){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "65.31 65.29 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_39){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "62.05 64.17 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_40){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "58.66 63.12 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_41){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "55.03 62.16 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_42){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "51.03 61.27 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_43){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "46.53 60.47 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_44){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "41.43 59.75 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_45){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "35.59 59.13 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_46){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "28.9 58.6 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_47){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "21.24 58.18 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_48){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "13.67 57.88 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_49){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "10.34 57.75 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_50){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "7.01 57.63 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_51){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "3.68 57.51 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_52){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "0.34 57.38 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_53){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-2.99 57.26 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_54){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-2.53 48.94 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_55){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-2.08 40.62 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_56){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-1.63 32.3 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_57){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-1.17 23.98 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_58){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-0.72 15.65 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_59){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-0.26 7.33 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_60){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-1.87 7.15 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_61){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-3.48 6.97 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_62){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-5.09 6.79 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_63){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-6.69 6.61 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_64){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-8.3 6.43 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_65){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-9.91 6.25 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_66){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-11.52 6.07 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_67){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-13.12 5.89 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_68){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-14.73 5.71 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_69){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-16.34 5.53 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_70){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-17.94 5.35 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_71){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-19.55 5.17 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_72){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-21.16 4.99 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_73){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-22.77 4.81 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_74){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-24.37 4.63 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_75){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-25.98 4.45 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_76){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-27.59 4.27 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_77){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-29.2 4.09 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_78){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-33.31 3.63 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_79){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-36.63 3.26 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_80){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-39.94 2.89 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_81){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-43.25 2.51 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_82){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-46.56 2.14 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_83){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-49.88 1.77 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_84){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-54.84 1.21 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_85){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-59.81 0.66 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_86){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-64.78 0.1 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_87){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-69.75 -0.46 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_88){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-74.72 -1.01 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_89){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-79.69 -1.57 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_90){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-81.16 -2.03 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_91){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-82.64 -2.48 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_92){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-84.12 -2.94 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_93){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-85.59 -3.39 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_94){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-87.07 -3.85 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_95){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-88.55 -4.3 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_96){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-90.02 -4.76 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_97){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-91.5 -5.22 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_98){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-92.98 -5.67 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_99){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-94.45 -6.13 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_100){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-95.93 -6.58 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_101){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-97.4 -7.04 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_102){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-98.88 -7.49 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_103){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-100.36 -7.95 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_104){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-101.83 -8.41 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_105){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-103.31 -8.86 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_106){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-104.79 -9.32 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGWaypoint(wp_ego_107){
   drawDebug = "0";
   directionalWaypoint = "0";
   position = "-106.26 -9.77 0";
   scale = "3.0 3.0 3.0";
   rotationMatrix = "1 0 0 0 1 0 0 0 1";
   mode = "Ignore";
   canSave = "1";
   canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_1', 'wp_ego_2', 'wp_ego_3', 'wp_ego_4', 'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "8.65 0.0 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_2', 'wp_ego_3', 'wp_ego_4', 'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "15.75 0.01 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_3', 'wp_ego_4', 'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "22.32 0.04 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_4', 'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "28.41 0.09 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_5', 'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "34.05 0.18 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_6', 'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "39.28 0.31 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_7', 'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "44.13 0.49 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_8', 'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "48.65 0.73 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_9', 'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "52.86 1.04 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_10', 'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "56.82 1.42 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_11', 'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "60.54 1.89 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_12', 'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "64.08 2.46 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_13', 'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "67.46 3.12 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_14', 'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "70.73 3.9 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_15', 'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "73.92 4.8 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_16', 'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "77.07 5.82 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_17', 'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "80.21 6.98 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_18', 'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "83.39 8.29 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_19', 'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "88.04 10.37 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_20', 'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "91.08 11.74 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_21', 'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "94.12 13.1 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_22', 'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "97.16 14.47 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_23', 'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "100.2 15.84 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_24', 'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "103.24 17.21 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_25', 'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "102.62 25.52 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_26', 'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "102.01 33.83 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_27', 'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "101.4 42.14 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_28', 'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "100.78 50.45 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_29', 'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "100.17 58.76 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_30', 'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "99.55 67.07 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_31', 'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "94.71 68.64 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_32', 'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "90.25 69.57 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_33', 'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "86.11 69.94 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_34', 'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "82.24 69.84 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_35', 'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "78.6 69.35 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_36', 'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "75.14 68.56 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_37', 'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "71.8 67.57 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_38', 'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "68.54 66.45 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_39', 'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "65.31 65.29 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_40', 'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "62.05 64.17 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_41', 'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "58.66 63.12 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_42', 'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "55.03 62.16 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_43', 'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "51.03 61.27 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_44', 'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "46.53 60.47 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_45', 'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "41.43 59.75 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_46', 'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "35.59 59.13 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_47', 'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "28.9 58.6 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_48', 'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "21.24 58.18 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_49', 'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "13.67 57.88 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_50', 'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "10.34 57.75 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_51', 'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "7.01 57.63 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_52', 'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "3.68 57.51 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_53', 'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "0.34 57.38 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_54', 'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-2.99 57.26 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_55', 'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-2.53 48.94 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_56', 'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-2.08 40.62 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_57', 'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-1.63 32.3 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_58', 'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-1.17 23.98 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_59', 'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-0.72 15.65 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_60', 'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-0.26 7.33 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_61', 'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-1.87 7.15 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_62', 'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-3.48 6.97 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_63', 'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-5.09 6.79 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_64', 'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-6.69 6.61 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_65', 'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-8.3 6.43 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_66', 'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-9.91 6.25 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_67', 'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-11.52 6.07 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_68', 'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-13.12 5.89 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_69', 'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-14.73 5.71 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_70', 'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-16.34 5.53 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_71', 'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-17.94 5.35 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_72', 'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-19.55 5.17 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_73', 'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-21.16 4.99 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_74', 'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-22.77 4.81 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_75', 'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-24.37 4.63 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_76', 'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-25.98 4.45 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_77', 'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-27.59 4.27 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_78', 'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-29.2 4.09 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_79', 'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-33.31 3.63 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_80', 'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-36.63 3.26 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_81', 'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-39.94 2.89 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_82', 'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-43.25 2.51 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_83', 'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-46.56 2.14 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_84', 'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-49.88 1.77 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_85', 'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-54.84 1.21 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_86', 'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-59.81 0.66 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_87', 'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-64.78 0.1 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_88', 'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-69.75 -0.46 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_89', 'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-74.72 -1.01 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_90', 'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-79.69 -1.57 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_91', 'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-81.16 -2.03 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_92', 'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-82.64 -2.48 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_93', 'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-84.12 -2.94 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_94', 'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-85.59 -3.39 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_95', 'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-87.07 -3.85 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_96', 'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-88.55 -4.3 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_97', 'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-90.02 -4.76 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_98', 'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-91.5 -5.22 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_99', 'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-92.98 -5.67 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_100', 'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-94.45 -6.13 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_101', 'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-95.93 -6.58 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_102', 'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-97.4 -7.04 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_103', 'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-98.88 -7.49 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_104', 'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-100.36 -7.95 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_105', 'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-101.83 -8.41 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_106', 'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-103.31 -8.86 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
new BeamNGTrigger() {
    TriggerType = "Sphere";
    TriggerMode = "Overlaps";
    TriggerTestType = "Race Corners";
    luaFunction = "local sh = require('ge/extensions/scenario/scenariohelper')\r\nlocal function onWaypoint(data)\r\n  if data['event'] == 'enter' then\r\n    local modeFile = io.open('ego_movementMode', 'w')\r\n    modeFile:write('_BEAMNG')\r\n    modeFile:close()\r\n    sh.setAiPath({vehicleName='ego', waypoints={'wp_ego_107'}, driveInLane='on'})\r\n  end\r\nend\r\n\r\nreturn onWaypoint";
    tickPeriod = "100";
    debug = "0";
    ticking = "0";
    triggerColor = "255 192 0 45";
    defaultOnLeave = "1";
    position = "-104.79 -9.32 0.5";
    scale = "3.5 3.5 10";
    rotationMatrix = "1 0 0 0 1 0 0 0 1";
    mode = "Ignore";
    canSave = "1";
    canSaveDynamicFields = "1";
};
    
};